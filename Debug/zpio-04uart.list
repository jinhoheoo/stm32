
zpio-04uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005228  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000224  080053c8  080053c8  000153c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055ec  080055ec  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080055ec  080055ec  000155ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055f4  080055f4  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055f4  080055f4  000155f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055f8  080055f8  000155f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080055fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  2000007c  08005678  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003a8  08005678  000203a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d900  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f75  00000000  00000000  0002d9ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d30  00000000  00000000  0002f968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a5b  00000000  00000000  00030698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001706c  00000000  00000000  000310f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ebad  00000000  00000000  0004815f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fb75  00000000  00000000  00056d0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003fe0  00000000  00000000  000e6884  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  000ea864  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080053b0 	.word	0x080053b0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	080053b0 	.word	0x080053b0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)  // printf
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8000594:	1d39      	adds	r1, r7, #4
 8000596:	230a      	movs	r3, #10
 8000598:	2201      	movs	r2, #1
 800059a:	4804      	ldr	r0, [pc, #16]	; (80005ac <__io_putchar+0x20>)
 800059c:	f002 fe0d 	bl	80031ba <HAL_UART_Transmit>
    return ch;
 80005a0:	687b      	ldr	r3, [r7, #4]
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000124 	.word	0x20000124

080005b0 <__io_getchar>:
int __io_getchar(void)  // console input (scanf)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
    char ch = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	71bb      	strb	r3, [r7, #6]

    //while(HAL_UART_Receive(&huart2, &ch, 1, 10) != HAL_OK);
    while(1)
    {
        HAL_StatusTypeDef r = HAL_UART_Receive(&huart2, &ch, 1, 10);
 80005ba:	1db9      	adds	r1, r7, #6
 80005bc:	230a      	movs	r3, #10
 80005be:	2201      	movs	r2, #1
 80005c0:	480a      	ldr	r0, [pc, #40]	; (80005ec <__io_getchar+0x3c>)
 80005c2:	f002 fe8c 	bl	80032de <HAL_UART_Receive>
 80005c6:	4603      	mov	r3, r0
 80005c8:	71fb      	strb	r3, [r7, #7]
        if(r == HAL_OK) break;
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d000      	beq.n	80005d2 <__io_getchar+0x22>
    {
 80005d0:	e7f3      	b.n	80005ba <__io_getchar+0xa>
        if(r == HAL_OK) break;
 80005d2:	bf00      	nop
    }
    HAL_UART_Transmit(&huart2, &ch, 1, 10);  // echo
 80005d4:	1db9      	adds	r1, r7, #6
 80005d6:	230a      	movs	r3, #10
 80005d8:	2201      	movs	r2, #1
 80005da:	4804      	ldr	r0, [pc, #16]	; (80005ec <__io_getchar+0x3c>)
 80005dc:	f002 fded 	bl	80031ba <HAL_UART_Transmit>
    return ch;
 80005e0:	79bb      	ldrb	r3, [r7, #6]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000124 	.word	0x20000124

080005f0 <scanfEx1>:
int scanfEx1(int *k)  // INT VALUE
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b086      	sub	sp, #24
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    unsigned char buf[10], c;
    int idx = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]

    while(1)
    {
        c = __io_getchar();
 80005fc:	f7ff ffd8 	bl	80005b0 <__io_getchar>
 8000600:	4603      	mov	r3, r0
 8000602:	74fb      	strb	r3, [r7, #19]
        if(c == 0x0d) break;
 8000604:	7cfb      	ldrb	r3, [r7, #19]
 8000606:	2b0d      	cmp	r3, #13
 8000608:	d011      	beq.n	800062e <scanfEx1+0x3e>
        if(c < '0' || c > '9') break;
 800060a:	7cfb      	ldrb	r3, [r7, #19]
 800060c:	2b2f      	cmp	r3, #47	; 0x2f
 800060e:	d911      	bls.n	8000634 <scanfEx1+0x44>
 8000610:	7cfb      	ldrb	r3, [r7, #19]
 8000612:	2b39      	cmp	r3, #57	; 0x39
 8000614:	d80e      	bhi.n	8000634 <scanfEx1+0x44>
        if(idx > 9) break;
 8000616:	697b      	ldr	r3, [r7, #20]
 8000618:	2b09      	cmp	r3, #9
 800061a:	dc0a      	bgt.n	8000632 <scanfEx1+0x42>
        buf[idx++] = c;
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	1c5a      	adds	r2, r3, #1
 8000620:	617a      	str	r2, [r7, #20]
 8000622:	3318      	adds	r3, #24
 8000624:	443b      	add	r3, r7
 8000626:	7cfa      	ldrb	r2, [r7, #19]
 8000628:	f803 2c10 	strb.w	r2, [r3, #-16]
        c = __io_getchar();
 800062c:	e7e6      	b.n	80005fc <scanfEx1+0xc>
        if(c == 0x0d) break;
 800062e:	bf00      	nop
 8000630:	e000      	b.n	8000634 <scanfEx1+0x44>
        if(idx > 9) break;
 8000632:	bf00      	nop
    }
    buf[idx] = 0;
 8000634:	f107 0208 	add.w	r2, r7, #8
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	4413      	add	r3, r2
 800063c:	2200      	movs	r2, #0
 800063e:	701a      	strb	r2, [r3, #0]
    *k = atoi(buf);
 8000640:	f107 0308 	add.w	r3, r7, #8
 8000644:	4618      	mov	r0, r3
 8000646:	f003 fe85 	bl	8004354 <atoi>
 800064a:	4602      	mov	r2, r0
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	601a      	str	r2, [r3, #0]
    return 1;
 8000650:	2301      	movs	r3, #1
}
 8000652:	4618      	mov	r0, r3
 8000654:	3718      	adds	r7, #24
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <GetDmaData>:
int  rxIdx1 = 0 ,rxIdx2=0;
int op = -1; // 0 ~ 3 : NULL ,CR ,CRLF ,LFCR
char *EL[] = { "\0" ,"\r" ,"\r\n" ,"\n\r" };

char * GetDmaData() // uart2
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
    int len = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
    tail = RX_BUF_SIZE - huart2.hdmarx->Instance->NDTR;
 8000666:	4b2d      	ldr	r3, [pc, #180]	; (800071c <GetDmaData+0xc0>)
 8000668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 8000672:	461a      	mov	r2, r3
 8000674:	4b2a      	ldr	r3, [pc, #168]	; (8000720 <GetDmaData+0xc4>)
 8000676:	601a      	str	r2, [r3, #0]

    if(head == tail) return 0;
 8000678:	4b2a      	ldr	r3, [pc, #168]	; (8000724 <GetDmaData+0xc8>)
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4b28      	ldr	r3, [pc, #160]	; (8000720 <GetDmaData+0xc4>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	429a      	cmp	r2, r3
 8000682:	d101      	bne.n	8000688 <GetDmaData+0x2c>
 8000684:	2300      	movs	r3, #0
 8000686:	e045      	b.n	8000714 <GetDmaData+0xb8>
    if(tail > head)
 8000688:	4b25      	ldr	r3, [pc, #148]	; (8000720 <GetDmaData+0xc4>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4b25      	ldr	r3, [pc, #148]	; (8000724 <GetDmaData+0xc8>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	429a      	cmp	r2, r3
 8000692:	dd14      	ble.n	80006be <GetDmaData+0x62>
    {
        memcpy(dmaBuf, rxBuf2 + head, tail - head); len = tail - head;
 8000694:	4b23      	ldr	r3, [pc, #140]	; (8000724 <GetDmaData+0xc8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	461a      	mov	r2, r3
 800069a:	4b23      	ldr	r3, [pc, #140]	; (8000728 <GetDmaData+0xcc>)
 800069c:	18d1      	adds	r1, r2, r3
 800069e:	4b20      	ldr	r3, [pc, #128]	; (8000720 <GetDmaData+0xc4>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b20      	ldr	r3, [pc, #128]	; (8000724 <GetDmaData+0xc8>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	461a      	mov	r2, r3
 80006aa:	4820      	ldr	r0, [pc, #128]	; (800072c <GetDmaData+0xd0>)
 80006ac:	f004 f964 	bl	8004978 <memcpy>
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <GetDmaData+0xc4>)
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <GetDmaData+0xc8>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	1ad3      	subs	r3, r2, r3
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	e020      	b.n	8000700 <GetDmaData+0xa4>
    }
    else // tail < head
    {
        memcpy(dmaBuf, rxBuf2 + head, RX_BUF_SIZE - head);
 80006be:	4b19      	ldr	r3, [pc, #100]	; (8000724 <GetDmaData+0xc8>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	461a      	mov	r2, r3
 80006c4:	4b18      	ldr	r3, [pc, #96]	; (8000728 <GetDmaData+0xcc>)
 80006c6:	18d1      	adds	r1, r2, r3
 80006c8:	4b16      	ldr	r3, [pc, #88]	; (8000724 <GetDmaData+0xc8>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80006d0:	461a      	mov	r2, r3
 80006d2:	4816      	ldr	r0, [pc, #88]	; (800072c <GetDmaData+0xd0>)
 80006d4:	f004 f950 	bl	8004978 <memcpy>
        memcpy(dmaBuf + RX_BUF_SIZE - head, rxBuf2, tail);
 80006d8:	4b12      	ldr	r3, [pc, #72]	; (8000724 <GetDmaData+0xc8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f1c3 0328 	rsb	r3, r3, #40	; 0x28
 80006e0:	4a12      	ldr	r2, [pc, #72]	; (800072c <GetDmaData+0xd0>)
 80006e2:	4413      	add	r3, r2
 80006e4:	4a0e      	ldr	r2, [pc, #56]	; (8000720 <GetDmaData+0xc4>)
 80006e6:	6812      	ldr	r2, [r2, #0]
 80006e8:	490f      	ldr	r1, [pc, #60]	; (8000728 <GetDmaData+0xcc>)
 80006ea:	4618      	mov	r0, r3
 80006ec:	f004 f944 	bl	8004978 <memcpy>
        len = RX_BUF_SIZE - head + tail;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <GetDmaData+0xc8>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	f1c3 0228 	rsb	r2, r3, #40	; 0x28
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <GetDmaData+0xc4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4413      	add	r3, r2
 80006fe:	607b      	str	r3, [r7, #4]
    }
    dmaBuf[len] = 0;
 8000700:	4a0a      	ldr	r2, [pc, #40]	; (800072c <GetDmaData+0xd0>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
    head = tail;
 800070a:	4b05      	ldr	r3, [pc, #20]	; (8000720 <GetDmaData+0xc4>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a05      	ldr	r2, [pc, #20]	; (8000724 <GetDmaData+0xc8>)
 8000710:	6013      	str	r3, [r2, #0]
    return dmaBuf;
 8000712:	4b06      	ldr	r3, [pc, #24]	; (800072c <GetDmaData+0xd0>)
}
 8000714:	4618      	mov	r0, r3
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	20000124 	.word	0x20000124
 8000720:	20000248 	.word	0x20000248
 8000724:	20000244 	.word	0x20000244
 8000728:	200001f4 	.word	0x200001f4
 800072c:	2000021c 	.word	0x2000021c

08000730 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
    if(huart == &huart1)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	4a4d      	ldr	r2, [pc, #308]	; (8000870 <HAL_UART_RxCpltCallback+0x140>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d126      	bne.n	800078e <HAL_UART_RxCpltCallback+0x5e>
    {
        rxBuf1[rxIdx1++] = rx;
 8000740:	4b4c      	ldr	r3, [pc, #304]	; (8000874 <HAL_UART_RxCpltCallback+0x144>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	1c5a      	adds	r2, r3, #1
 8000746:	494b      	ldr	r1, [pc, #300]	; (8000874 <HAL_UART_RxCpltCallback+0x144>)
 8000748:	600a      	str	r2, [r1, #0]
 800074a:	4a4b      	ldr	r2, [pc, #300]	; (8000878 <HAL_UART_RxCpltCallback+0x148>)
 800074c:	7811      	ldrb	r1, [r2, #0]
 800074e:	4a4b      	ldr	r2, [pc, #300]	; (800087c <HAL_UART_RxCpltCallback+0x14c>)
 8000750:	54d1      	strb	r1, [r2, r3]
        if(rx == '\0' || rx == '\r' || rx == '\n')
 8000752:	4b49      	ldr	r3, [pc, #292]	; (8000878 <HAL_UART_RxCpltCallback+0x148>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d007      	beq.n	800076a <HAL_UART_RxCpltCallback+0x3a>
 800075a:	4b47      	ldr	r3, [pc, #284]	; (8000878 <HAL_UART_RxCpltCallback+0x148>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	2b0d      	cmp	r3, #13
 8000760:	d003      	beq.n	800076a <HAL_UART_RxCpltCallback+0x3a>
 8000762:	4b45      	ldr	r3, [pc, #276]	; (8000878 <HAL_UART_RxCpltCallback+0x148>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b0a      	cmp	r3, #10
 8000768:	d178      	bne.n	800085c <HAL_UART_RxCpltCallback+0x12c>
        {
          HAL_UART_Transmit(&huart2, rxBuf1, rxIdx1, 10);
 800076a:	4b42      	ldr	r3, [pc, #264]	; (8000874 <HAL_UART_RxCpltCallback+0x144>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	b29a      	uxth	r2, r3
 8000770:	230a      	movs	r3, #10
 8000772:	4942      	ldr	r1, [pc, #264]	; (800087c <HAL_UART_RxCpltCallback+0x14c>)
 8000774:	4842      	ldr	r0, [pc, #264]	; (8000880 <HAL_UART_RxCpltCallback+0x150>)
 8000776:	f002 fd20 	bl	80031ba <HAL_UART_Transmit>
          HAL_UART_Transmit(&huart2, "\r\n", 2, 10);            //putty display out
 800077a:	230a      	movs	r3, #10
 800077c:	2202      	movs	r2, #2
 800077e:	4941      	ldr	r1, [pc, #260]	; (8000884 <HAL_UART_RxCpltCallback+0x154>)
 8000780:	483f      	ldr	r0, [pc, #252]	; (8000880 <HAL_UART_RxCpltCallback+0x150>)
 8000782:	f002 fd1a 	bl	80031ba <HAL_UART_Transmit>
          rxIdx1 = 0;
 8000786:	4b3b      	ldr	r3, [pc, #236]	; (8000874 <HAL_UART_RxCpltCallback+0x144>)
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	e066      	b.n	800085c <HAL_UART_RxCpltCallback+0x12c>
        }
    }
    else if(huart == &huart2)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4a3b      	ldr	r2, [pc, #236]	; (8000880 <HAL_UART_RxCpltCallback+0x150>)
 8000792:	4293      	cmp	r3, r2
 8000794:	d162      	bne.n	800085c <HAL_UART_RxCpltCallback+0x12c>
    {
        rxBuf2[rxIdx2++] = rx;
 8000796:	4b3c      	ldr	r3, [pc, #240]	; (8000888 <HAL_UART_RxCpltCallback+0x158>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	1c5a      	adds	r2, r3, #1
 800079c:	493a      	ldr	r1, [pc, #232]	; (8000888 <HAL_UART_RxCpltCallback+0x158>)
 800079e:	600a      	str	r2, [r1, #0]
 80007a0:	4a35      	ldr	r2, [pc, #212]	; (8000878 <HAL_UART_RxCpltCallback+0x148>)
 80007a2:	7811      	ldrb	r1, [r2, #0]
 80007a4:	4a39      	ldr	r2, [pc, #228]	; (800088c <HAL_UART_RxCpltCallback+0x15c>)
 80007a6:	54d1      	strb	r1, [r2, r3]
        if(rx == '\0' || rx == '\r' || rx == '\n') //BT > AT ??
 80007a8:	4b33      	ldr	r3, [pc, #204]	; (8000878 <HAL_UART_RxCpltCallback+0x148>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d007      	beq.n	80007c0 <HAL_UART_RxCpltCallback+0x90>
 80007b0:	4b31      	ldr	r3, [pc, #196]	; (8000878 <HAL_UART_RxCpltCallback+0x148>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b0d      	cmp	r3, #13
 80007b6:	d003      	beq.n	80007c0 <HAL_UART_RxCpltCallback+0x90>
 80007b8:	4b2f      	ldr	r3, [pc, #188]	; (8000878 <HAL_UART_RxCpltCallback+0x148>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	2b0a      	cmp	r3, #10
 80007be:	d14d      	bne.n	800085c <HAL_UART_RxCpltCallback+0x12c>
        {
          if(strncmp(rxBuf2 ,"BT>" ,3) == 0)
 80007c0:	2203      	movs	r2, #3
 80007c2:	4933      	ldr	r1, [pc, #204]	; (8000890 <HAL_UART_RxCpltCallback+0x160>)
 80007c4:	4831      	ldr	r0, [pc, #196]	; (800088c <HAL_UART_RxCpltCallback+0x15c>)
 80007c6:	f004 f853 	bl	8004870 <strncmp>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d132      	bne.n	8000836 <HAL_UART_RxCpltCallback+0x106>
          {
            HAL_UART_Transmit(&huart1, rxBuf2 + 3, rxIdx2 - 4 ,10);
 80007d0:	4930      	ldr	r1, [pc, #192]	; (8000894 <HAL_UART_RxCpltCallback+0x164>)
 80007d2:	4b2d      	ldr	r3, [pc, #180]	; (8000888 <HAL_UART_RxCpltCallback+0x158>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	b29b      	uxth	r3, r3
 80007d8:	3b04      	subs	r3, #4
 80007da:	b29a      	uxth	r2, r3
 80007dc:	230a      	movs	r3, #10
 80007de:	4824      	ldr	r0, [pc, #144]	; (8000870 <HAL_UART_RxCpltCallback+0x140>)
 80007e0:	f002 fceb 	bl	80031ba <HAL_UART_Transmit>
            if(op>0) HAL_UART_Transmit(&huart1, EL[op], strlen(EL[op]), 10);
 80007e4:	4b2c      	ldr	r3, [pc, #176]	; (8000898 <HAL_UART_RxCpltCallback+0x168>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	dd13      	ble.n	8000814 <HAL_UART_RxCpltCallback+0xe4>
 80007ec:	4b2a      	ldr	r3, [pc, #168]	; (8000898 <HAL_UART_RxCpltCallback+0x168>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a2a      	ldr	r2, [pc, #168]	; (800089c <HAL_UART_RxCpltCallback+0x16c>)
 80007f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80007f6:	4b28      	ldr	r3, [pc, #160]	; (8000898 <HAL_UART_RxCpltCallback+0x168>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a28      	ldr	r2, [pc, #160]	; (800089c <HAL_UART_RxCpltCallback+0x16c>)
 80007fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000800:	4618      	mov	r0, r3
 8000802:	f7ff fced 	bl	80001e0 <strlen>
 8000806:	4603      	mov	r3, r0
 8000808:	b29a      	uxth	r2, r3
 800080a:	230a      	movs	r3, #10
 800080c:	4621      	mov	r1, r4
 800080e:	4818      	ldr	r0, [pc, #96]	; (8000870 <HAL_UART_RxCpltCallback+0x140>)
 8000810:	f002 fcd3 	bl	80031ba <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, rxBuf2 + 3, rxIdx2 - 4 ,10);
 8000814:	491f      	ldr	r1, [pc, #124]	; (8000894 <HAL_UART_RxCpltCallback+0x164>)
 8000816:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <HAL_UART_RxCpltCallback+0x158>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	b29b      	uxth	r3, r3
 800081c:	3b04      	subs	r3, #4
 800081e:	b29a      	uxth	r2, r3
 8000820:	230a      	movs	r3, #10
 8000822:	4817      	ldr	r0, [pc, #92]	; (8000880 <HAL_UART_RxCpltCallback+0x150>)
 8000824:	f002 fcc9 	bl	80031ba <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, "\r\n",2, 10);
 8000828:	230a      	movs	r3, #10
 800082a:	2202      	movs	r2, #2
 800082c:	4915      	ldr	r1, [pc, #84]	; (8000884 <HAL_UART_RxCpltCallback+0x154>)
 800082e:	4814      	ldr	r0, [pc, #80]	; (8000880 <HAL_UART_RxCpltCallback+0x150>)
 8000830:	f002 fcc3 	bl	80031ba <HAL_UART_Transmit>
 8000834:	e00f      	b.n	8000856 <HAL_UART_RxCpltCallback+0x126>
          }
          else
          {
            HAL_UART_Transmit(&huart2, rxBuf2 + 3, rxIdx2 - 4 ,10);
 8000836:	4917      	ldr	r1, [pc, #92]	; (8000894 <HAL_UART_RxCpltCallback+0x164>)
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <HAL_UART_RxCpltCallback+0x158>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	b29b      	uxth	r3, r3
 800083e:	3b04      	subs	r3, #4
 8000840:	b29a      	uxth	r2, r3
 8000842:	230a      	movs	r3, #10
 8000844:	480e      	ldr	r0, [pc, #56]	; (8000880 <HAL_UART_RxCpltCallback+0x150>)
 8000846:	f002 fcb8 	bl	80031ba <HAL_UART_Transmit>
            HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
 800084a:	230a      	movs	r3, #10
 800084c:	2202      	movs	r2, #2
 800084e:	490d      	ldr	r1, [pc, #52]	; (8000884 <HAL_UART_RxCpltCallback+0x154>)
 8000850:	480b      	ldr	r0, [pc, #44]	; (8000880 <HAL_UART_RxCpltCallback+0x150>)
 8000852:	f002 fcb2 	bl	80031ba <HAL_UART_Transmit>
          }
          rxIdx2 = 0;
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <HAL_UART_RxCpltCallback+0x158>)
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
        }
    }
     HAL_UART_Receive_IT(huart, &rx, 1);
 800085c:	2201      	movs	r2, #1
 800085e:	4906      	ldr	r1, [pc, #24]	; (8000878 <HAL_UART_RxCpltCallback+0x148>)
 8000860:	6878      	ldr	r0, [r7, #4]
 8000862:	f002 fdde 	bl	8003422 <HAL_UART_Receive_IT>
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	bd90      	pop	{r4, r7, pc}
 800086e:	bf00      	nop
 8000870:	200000e0 	.word	0x200000e0
 8000874:	2000024c 	.word	0x2000024c
 8000878:	200001f0 	.word	0x200001f0
 800087c:	200001c8 	.word	0x200001c8
 8000880:	20000124 	.word	0x20000124
 8000884:	080053d0 	.word	0x080053d0
 8000888:	20000250 	.word	0x20000250
 800088c:	200001f4 	.word	0x200001f4
 8000890:	080053d8 	.word	0x080053d8
 8000894:	200001f7 	.word	0x200001f7
 8000898:	20000000 	.word	0x20000000
 800089c:	20000004 	.word	0x20000004

080008a0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b082      	sub	sp, #8
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
      //char *str = GetDmaData();  // str = NULL, if no data
      if(rxIdx1)
 80008a8:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d006      	beq.n	80008be <HAL_TIM_PeriodElapsedCallback+0x1e>
      {
          printf("%s\r\n", rxBuf1); rxIdx1 = 0;
 80008b0:	4906      	ldr	r1, [pc, #24]	; (80008cc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80008b2:	4807      	ldr	r0, [pc, #28]	; (80008d0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80008b4:	f003 fe8e 	bl	80045d4 <iprintf>
 80008b8:	4b03      	ldr	r3, [pc, #12]	; (80008c8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
      }
}
 80008be:	bf00      	nop
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	2000024c 	.word	0x2000024c
 80008cc:	200001c8 	.word	0x200001c8
 80008d0:	080053dc 	.word	0x080053dc

080008d4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b084      	sub	sp, #16
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == B1_Pin)
 80008de:	88fb      	ldrh	r3, [r7, #6]
 80008e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008e4:	d10d      	bne.n	8000902 <HAL_GPIO_EXTI_Callback+0x2e>
    {
      char *str = GetDmaData();  // str = NULL, if no data
 80008e6:	f7ff feb9 	bl	800065c <GetDmaData>
 80008ea:	60f8      	str	r0, [r7, #12]
      if(str)
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d007      	beq.n	8000902 <HAL_GPIO_EXTI_Callback+0x2e>
      {
          printf("[Receive Buffer] %s\r\n", rxBuf2);
 80008f2:	4906      	ldr	r1, [pc, #24]	; (800090c <HAL_GPIO_EXTI_Callback+0x38>)
 80008f4:	4806      	ldr	r0, [pc, #24]	; (8000910 <HAL_GPIO_EXTI_Callback+0x3c>)
 80008f6:	f003 fe6d 	bl	80045d4 <iprintf>
          printf("[Receive String] %s\r\n\n", str);
 80008fa:	68f9      	ldr	r1, [r7, #12]
 80008fc:	4805      	ldr	r0, [pc, #20]	; (8000914 <HAL_GPIO_EXTI_Callback+0x40>)
 80008fe:	f003 fe69 	bl	80045d4 <iprintf>
      }
    }
}
 8000902:	bf00      	nop
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	200001f4 	.word	0x200001f4
 8000910:	080053e4 	.word	0x080053e4
 8000914:	080053fc 	.word	0x080053fc

08000918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091c:	f000 fc6c 	bl	80011f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000920:	f000 f856 	bl	80009d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000924:	f000 f980 	bl	8000c28 <MX_GPIO_Init>
  MX_DMA_Init();
 8000928:	f000 f95e 	bl	8000be8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800092c:	f000 f932 	bl	8000b94 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000930:	f000 f906 	bl	8000b40 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000934:	f000 f8b6 	bl	8000aa4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  printf("\033[1J\033[1;1HUART Program Started....\r\n");
 8000938:	4819      	ldr	r0, [pc, #100]	; (80009a0 <main+0x88>)
 800093a:	f003 feb1 	bl	80046a0 <puts>
  while(1)
  {
      printf("Input End-Line option\r\n");
 800093e:	4819      	ldr	r0, [pc, #100]	; (80009a4 <main+0x8c>)
 8000940:	f003 feae 	bl	80046a0 <puts>
      printf("  '0' : NULL\r\n");
 8000944:	4818      	ldr	r0, [pc, #96]	; (80009a8 <main+0x90>)
 8000946:	f003 feab 	bl	80046a0 <puts>
      printf("  '1' : CR\r\n");
 800094a:	4818      	ldr	r0, [pc, #96]	; (80009ac <main+0x94>)
 800094c:	f003 fea8 	bl	80046a0 <puts>
      printf("  '2' : CRLF\r\n");
 8000950:	4817      	ldr	r0, [pc, #92]	; (80009b0 <main+0x98>)
 8000952:	f003 fea5 	bl	80046a0 <puts>
      printf("  '3' : LFCR\r\n");
 8000956:	4817      	ldr	r0, [pc, #92]	; (80009b4 <main+0x9c>)
 8000958:	f003 fea2 	bl	80046a0 <puts>

      scanfEx1(&op);
 800095c:	4816      	ldr	r0, [pc, #88]	; (80009b8 <main+0xa0>)
 800095e:	f7ff fe47 	bl	80005f0 <scanfEx1>
      if(op >= 0 && op < 4) break;
 8000962:	4b15      	ldr	r3, [pc, #84]	; (80009b8 <main+0xa0>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	2b00      	cmp	r3, #0
 8000968:	dbe9      	blt.n	800093e <main+0x26>
 800096a:	4b13      	ldr	r3, [pc, #76]	; (80009b8 <main+0xa0>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	2b03      	cmp	r3, #3
 8000970:	dd00      	ble.n	8000974 <main+0x5c>
      printf("Input End-Line option\r\n");
 8000972:	e7e4      	b.n	800093e <main+0x26>
      if(op >= 0 && op < 4) break;
 8000974:	bf00      	nop
  }
  printf("OK....%d\r\n",op);
 8000976:	4b10      	ldr	r3, [pc, #64]	; (80009b8 <main+0xa0>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4619      	mov	r1, r3
 800097c:	480f      	ldr	r0, [pc, #60]	; (80009bc <main+0xa4>)
 800097e:	f003 fe29 	bl	80045d4 <iprintf>

  HAL_TIM_Base_Start_IT(&htim3);
 8000982:	480f      	ldr	r0, [pc, #60]	; (80009c0 <main+0xa8>)
 8000984:	f001 ffd6 	bl	8002934 <HAL_TIM_Base_Start_IT>
  //HAL_UART_Receive_DMA(&huart2, rxBuf, RX_BUF_SIZE);
  HAL_UART_Receive_IT(&huart2, &rx, 1);
 8000988:	2201      	movs	r2, #1
 800098a:	490e      	ldr	r1, [pc, #56]	; (80009c4 <main+0xac>)
 800098c:	480e      	ldr	r0, [pc, #56]	; (80009c8 <main+0xb0>)
 800098e:	f002 fd48 	bl	8003422 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &rx, 1);
 8000992:	2201      	movs	r2, #1
 8000994:	490b      	ldr	r1, [pc, #44]	; (80009c4 <main+0xac>)
 8000996:	480d      	ldr	r0, [pc, #52]	; (80009cc <main+0xb4>)
 8000998:	f002 fd43 	bl	8003422 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800099c:	e7fe      	b.n	800099c <main+0x84>
 800099e:	bf00      	nop
 80009a0:	08005414 	.word	0x08005414
 80009a4:	08005438 	.word	0x08005438
 80009a8:	08005450 	.word	0x08005450
 80009ac:	08005460 	.word	0x08005460
 80009b0:	0800546c 	.word	0x0800546c
 80009b4:	0800547c 	.word	0x0800547c
 80009b8:	20000000 	.word	0x20000000
 80009bc:	0800548c 	.word	0x0800548c
 80009c0:	20000098 	.word	0x20000098
 80009c4:	200001f0 	.word	0x200001f0
 80009c8:	20000124 	.word	0x20000124
 80009cc:	200000e0 	.word	0x200000e0

080009d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b094      	sub	sp, #80	; 0x50
 80009d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d6:	f107 0320 	add.w	r3, r7, #32
 80009da:	2230      	movs	r2, #48	; 0x30
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f003 ff3e 	bl	8004860 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <SystemClock_Config+0xcc>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fc:	4a27      	ldr	r2, [pc, #156]	; (8000a9c <SystemClock_Config+0xcc>)
 80009fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a02:	6413      	str	r3, [r2, #64]	; 0x40
 8000a04:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <SystemClock_Config+0xcc>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	60bb      	str	r3, [r7, #8]
 8000a0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a10:	2300      	movs	r3, #0
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	4b22      	ldr	r3, [pc, #136]	; (8000aa0 <SystemClock_Config+0xd0>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a21      	ldr	r2, [pc, #132]	; (8000aa0 <SystemClock_Config+0xd0>)
 8000a1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a1e:	6013      	str	r3, [r2, #0]
 8000a20:	4b1f      	ldr	r3, [pc, #124]	; (8000aa0 <SystemClock_Config+0xd0>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a30:	2301      	movs	r3, #1
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a34:	2310      	movs	r3, #16
 8000a36:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a40:	2310      	movs	r3, #16
 8000a42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a44:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a48:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a4a:	2304      	movs	r3, #4
 8000a4c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a4e:	2304      	movs	r3, #4
 8000a50:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a52:	f107 0320 	add.w	r3, r7, #32
 8000a56:	4618      	mov	r0, r3
 8000a58:	f001 fa84 	bl	8001f64 <HAL_RCC_OscConfig>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a62:	f000 f959 	bl	8000d18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a66:	230f      	movs	r3, #15
 8000a68:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a76:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	2102      	movs	r1, #2
 8000a82:	4618      	mov	r0, r3
 8000a84:	f001 fce6 	bl	8002454 <HAL_RCC_ClockConfig>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a8e:	f000 f943 	bl	8000d18 <Error_Handler>
  }
}
 8000a92:	bf00      	nop
 8000a94:	3750      	adds	r7, #80	; 0x50
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40007000 	.word	0x40007000

08000aa4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aaa:	f107 0308 	add.w	r3, r7, #8
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ab8:	463b      	mov	r3, r7
 8000aba:	2200      	movs	r2, #0
 8000abc:	601a      	str	r2, [r3, #0]
 8000abe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ac0:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <MX_TIM3_Init+0x94>)
 8000ac2:	4a1e      	ldr	r2, [pc, #120]	; (8000b3c <MX_TIM3_Init+0x98>)
 8000ac4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <MX_TIM3_Init+0x94>)
 8000ac8:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8000acc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ace:	4b1a      	ldr	r3, [pc, #104]	; (8000b38 <MX_TIM3_Init+0x94>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000ad4:	4b18      	ldr	r3, [pc, #96]	; (8000b38 <MX_TIM3_Init+0x94>)
 8000ad6:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ada:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000adc:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <MX_TIM3_Init+0x94>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_TIM3_Init+0x94>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ae8:	4813      	ldr	r0, [pc, #76]	; (8000b38 <MX_TIM3_Init+0x94>)
 8000aea:	f001 fed3 	bl	8002894 <HAL_TIM_Base_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000af4:	f000 f910 	bl	8000d18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000afe:	f107 0308 	add.w	r3, r7, #8
 8000b02:	4619      	mov	r1, r3
 8000b04:	480c      	ldr	r0, [pc, #48]	; (8000b38 <MX_TIM3_Init+0x94>)
 8000b06:	f002 f87f 	bl	8002c08 <HAL_TIM_ConfigClockSource>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000b10:	f000 f902 	bl	8000d18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b14:	2300      	movs	r3, #0
 8000b16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b1c:	463b      	mov	r3, r7
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4805      	ldr	r0, [pc, #20]	; (8000b38 <MX_TIM3_Init+0x94>)
 8000b22:	f002 fa7b 	bl	800301c <HAL_TIMEx_MasterConfigSynchronization>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000b2c:	f000 f8f4 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20000098 	.word	0x20000098
 8000b3c:	40000400 	.word	0x40000400

08000b40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_USART1_UART_Init+0x4c>)
 8000b46:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <MX_USART1_UART_Init+0x50>)
 8000b48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <MX_USART1_UART_Init+0x4c>)
 8000b4c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_USART1_UART_Init+0x4c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_USART1_UART_Init+0x4c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_USART1_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_USART1_UART_Init+0x4c>)
 8000b66:	220c      	movs	r2, #12
 8000b68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <MX_USART1_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_USART1_UART_Init+0x4c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_USART1_UART_Init+0x4c>)
 8000b78:	f002 fad2 	bl	8003120 <HAL_UART_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b82:	f000 f8c9 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	200000e0 	.word	0x200000e0
 8000b90:	40011000 	.word	0x40011000

08000b94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <MX_USART2_UART_Init+0x50>)
 8000b9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000ba0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000bba:	220c      	movs	r2, #12
 8000bbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_USART2_UART_Init+0x4c>)
 8000bcc:	f002 faa8 	bl	8003120 <HAL_UART_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bd6:	f000 f89f 	bl	8000d18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	20000124 	.word	0x20000124
 8000be4:	40004400 	.word	0x40004400

08000be8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <MX_DMA_Init+0x3c>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a0b      	ldr	r2, [pc, #44]	; (8000c24 <MX_DMA_Init+0x3c>)
 8000bf8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <MX_DMA_Init+0x3c>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	2010      	movs	r0, #16
 8000c10:	f000 fc3f 	bl	8001492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c14:	2010      	movs	r0, #16
 8000c16:	f000 fc58 	bl	80014ca <HAL_NVIC_EnableIRQ>

}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40023800 	.word	0x40023800

08000c28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08a      	sub	sp, #40	; 0x28
 8000c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2e:	f107 0314 	add.w	r3, r7, #20
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]
 8000c38:	609a      	str	r2, [r3, #8]
 8000c3a:	60da      	str	r2, [r3, #12]
 8000c3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	4b32      	ldr	r3, [pc, #200]	; (8000d0c <MX_GPIO_Init+0xe4>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c46:	4a31      	ldr	r2, [pc, #196]	; (8000d0c <MX_GPIO_Init+0xe4>)
 8000c48:	f043 0304 	orr.w	r3, r3, #4
 8000c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4e:	4b2f      	ldr	r3, [pc, #188]	; (8000d0c <MX_GPIO_Init+0xe4>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	f003 0304 	and.w	r3, r3, #4
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b2b      	ldr	r3, [pc, #172]	; (8000d0c <MX_GPIO_Init+0xe4>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	4a2a      	ldr	r2, [pc, #168]	; (8000d0c <MX_GPIO_Init+0xe4>)
 8000c64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c68:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6a:	4b28      	ldr	r3, [pc, #160]	; (8000d0c <MX_GPIO_Init+0xe4>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	4b24      	ldr	r3, [pc, #144]	; (8000d0c <MX_GPIO_Init+0xe4>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	4a23      	ldr	r2, [pc, #140]	; (8000d0c <MX_GPIO_Init+0xe4>)
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	6313      	str	r3, [r2, #48]	; 0x30
 8000c86:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <MX_GPIO_Init+0xe4>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b1d      	ldr	r3, [pc, #116]	; (8000d0c <MX_GPIO_Init+0xe4>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a1c      	ldr	r2, [pc, #112]	; (8000d0c <MX_GPIO_Init+0xe4>)
 8000c9c:	f043 0302 	orr.w	r3, r3, #2
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <MX_GPIO_Init+0xe4>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LDr_Pin|LDg_Pin|LDy_Pin, GPIO_PIN_RESET);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f44f 61e4 	mov.w	r1, #1824	; 0x720
 8000cb4:	4816      	ldr	r0, [pc, #88]	; (8000d10 <MX_GPIO_Init+0xe8>)
 8000cb6:	f001 f923 	bl	8001f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cc0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cca:	f107 0314 	add.w	r3, r7, #20
 8000cce:	4619      	mov	r1, r3
 8000cd0:	4810      	ldr	r0, [pc, #64]	; (8000d14 <MX_GPIO_Init+0xec>)
 8000cd2:	f000 ff91 	bl	8001bf8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LDr_Pin LDg_Pin LDy_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LDr_Pin|LDg_Pin|LDy_Pin;
 8000cd6:	f44f 63e4 	mov.w	r3, #1824	; 0x720
 8000cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	4808      	ldr	r0, [pc, #32]	; (8000d10 <MX_GPIO_Init+0xe8>)
 8000cf0:	f000 ff82 	bl	8001bf8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	2028      	movs	r0, #40	; 0x28
 8000cfa:	f000 fbca 	bl	8001492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000cfe:	2028      	movs	r0, #40	; 0x28
 8000d00:	f000 fbe3 	bl	80014ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d04:	bf00      	nop
 8000d06:	3728      	adds	r7, #40	; 0x28
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020000 	.word	0x40020000
 8000d14:	40020800 	.word	0x40020800

08000d18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d1c:	b672      	cpsid	i
}
 8000d1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <Error_Handler+0x8>
	...

08000d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <HAL_MspInit+0x4c>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	4a0f      	ldr	r2, [pc, #60]	; (8000d70 <HAL_MspInit+0x4c>)
 8000d34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d38:	6453      	str	r3, [r2, #68]	; 0x44
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <HAL_MspInit+0x4c>)
 8000d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	603b      	str	r3, [r7, #0]
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <HAL_MspInit+0x4c>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	4a08      	ldr	r2, [pc, #32]	; (8000d70 <HAL_MspInit+0x4c>)
 8000d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d54:	6413      	str	r3, [r2, #64]	; 0x40
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_MspInit+0x4c>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d5e:	603b      	str	r3, [r7, #0]
 8000d60:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d62:	2007      	movs	r0, #7
 8000d64:	f000 fb8a 	bl	800147c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40023800 	.word	0x40023800

08000d74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b084      	sub	sp, #16
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <HAL_TIM_Base_MspInit+0x48>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d115      	bne.n	8000db2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <HAL_TIM_Base_MspInit+0x4c>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	4a0c      	ldr	r2, [pc, #48]	; (8000dc0 <HAL_TIM_Base_MspInit+0x4c>)
 8000d90:	f043 0302 	orr.w	r3, r3, #2
 8000d94:	6413      	str	r3, [r2, #64]	; 0x40
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <HAL_TIM_Base_MspInit+0x4c>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	f003 0302 	and.w	r3, r3, #2
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2100      	movs	r1, #0
 8000da6:	201d      	movs	r0, #29
 8000da8:	f000 fb73 	bl	8001492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000dac:	201d      	movs	r0, #29
 8000dae:	f000 fb8c 	bl	80014ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000db2:	bf00      	nop
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40000400 	.word	0x40000400
 8000dc0:	40023800 	.word	0x40023800

08000dc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08c      	sub	sp, #48	; 0x30
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dcc:	f107 031c 	add.w	r3, r7, #28
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a61      	ldr	r2, [pc, #388]	; (8000f68 <HAL_UART_MspInit+0x1a4>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d153      	bne.n	8000e8e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	61bb      	str	r3, [r7, #24]
 8000dea:	4b60      	ldr	r3, [pc, #384]	; (8000f6c <HAL_UART_MspInit+0x1a8>)
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	4a5f      	ldr	r2, [pc, #380]	; (8000f6c <HAL_UART_MspInit+0x1a8>)
 8000df0:	f043 0310 	orr.w	r3, r3, #16
 8000df4:	6453      	str	r3, [r2, #68]	; 0x44
 8000df6:	4b5d      	ldr	r3, [pc, #372]	; (8000f6c <HAL_UART_MspInit+0x1a8>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	f003 0310 	and.w	r3, r3, #16
 8000dfe:	61bb      	str	r3, [r7, #24]
 8000e00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	4b59      	ldr	r3, [pc, #356]	; (8000f6c <HAL_UART_MspInit+0x1a8>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a58      	ldr	r2, [pc, #352]	; (8000f6c <HAL_UART_MspInit+0x1a8>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b56      	ldr	r3, [pc, #344]	; (8000f6c <HAL_UART_MspInit+0x1a8>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	4b52      	ldr	r3, [pc, #328]	; (8000f6c <HAL_UART_MspInit+0x1a8>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a51      	ldr	r2, [pc, #324]	; (8000f6c <HAL_UART_MspInit+0x1a8>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b4f      	ldr	r3, [pc, #316]	; (8000f6c <HAL_UART_MspInit+0x1a8>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	4619      	mov	r1, r3
 8000e56:	4846      	ldr	r0, [pc, #280]	; (8000f70 <HAL_UART_MspInit+0x1ac>)
 8000e58:	f000 fece 	bl	8001bf8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e5c:	2380      	movs	r3, #128	; 0x80
 8000e5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e60:	2302      	movs	r3, #2
 8000e62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e6c:	2307      	movs	r3, #7
 8000e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	4619      	mov	r1, r3
 8000e76:	483f      	ldr	r0, [pc, #252]	; (8000f74 <HAL_UART_MspInit+0x1b0>)
 8000e78:	f000 febe 	bl	8001bf8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2100      	movs	r1, #0
 8000e80:	2025      	movs	r0, #37	; 0x25
 8000e82:	f000 fb06 	bl	8001492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e86:	2025      	movs	r0, #37	; 0x25
 8000e88:	f000 fb1f 	bl	80014ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e8c:	e067      	b.n	8000f5e <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART2)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a39      	ldr	r2, [pc, #228]	; (8000f78 <HAL_UART_MspInit+0x1b4>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d162      	bne.n	8000f5e <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e98:	2300      	movs	r3, #0
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	4b33      	ldr	r3, [pc, #204]	; (8000f6c <HAL_UART_MspInit+0x1a8>)
 8000e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea0:	4a32      	ldr	r2, [pc, #200]	; (8000f6c <HAL_UART_MspInit+0x1a8>)
 8000ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea8:	4b30      	ldr	r3, [pc, #192]	; (8000f6c <HAL_UART_MspInit+0x1a8>)
 8000eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60bb      	str	r3, [r7, #8]
 8000eb8:	4b2c      	ldr	r3, [pc, #176]	; (8000f6c <HAL_UART_MspInit+0x1a8>)
 8000eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebc:	4a2b      	ldr	r2, [pc, #172]	; (8000f6c <HAL_UART_MspInit+0x1a8>)
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ec4:	4b29      	ldr	r3, [pc, #164]	; (8000f6c <HAL_UART_MspInit+0x1a8>)
 8000ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec8:	f003 0301 	and.w	r3, r3, #1
 8000ecc:	60bb      	str	r3, [r7, #8]
 8000ece:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ed0:	230c      	movs	r3, #12
 8000ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	2302      	movs	r3, #2
 8000ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000edc:	2303      	movs	r3, #3
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ee0:	2307      	movs	r3, #7
 8000ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee4:	f107 031c 	add.w	r3, r7, #28
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4821      	ldr	r0, [pc, #132]	; (8000f70 <HAL_UART_MspInit+0x1ac>)
 8000eec:	f000 fe84 	bl	8001bf8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000ef0:	4b22      	ldr	r3, [pc, #136]	; (8000f7c <HAL_UART_MspInit+0x1b8>)
 8000ef2:	4a23      	ldr	r2, [pc, #140]	; (8000f80 <HAL_UART_MspInit+0x1bc>)
 8000ef4:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000ef6:	4b21      	ldr	r3, [pc, #132]	; (8000f7c <HAL_UART_MspInit+0x1b8>)
 8000ef8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000efc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000efe:	4b1f      	ldr	r3, [pc, #124]	; (8000f7c <HAL_UART_MspInit+0x1b8>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f04:	4b1d      	ldr	r3, [pc, #116]	; (8000f7c <HAL_UART_MspInit+0x1b8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f0a:	4b1c      	ldr	r3, [pc, #112]	; (8000f7c <HAL_UART_MspInit+0x1b8>)
 8000f0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f10:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <HAL_UART_MspInit+0x1b8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f18:	4b18      	ldr	r3, [pc, #96]	; (8000f7c <HAL_UART_MspInit+0x1b8>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000f1e:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <HAL_UART_MspInit+0x1b8>)
 8000f20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f24:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <HAL_UART_MspInit+0x1b8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <HAL_UART_MspInit+0x1b8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000f32:	4812      	ldr	r0, [pc, #72]	; (8000f7c <HAL_UART_MspInit+0x1b8>)
 8000f34:	f000 fae4 	bl	8001500 <HAL_DMA_Init>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_UART_MspInit+0x17e>
      Error_Handler();
 8000f3e:	f7ff feeb 	bl	8000d18 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <HAL_UART_MspInit+0x1b8>)
 8000f46:	639a      	str	r2, [r3, #56]	; 0x38
 8000f48:	4a0c      	ldr	r2, [pc, #48]	; (8000f7c <HAL_UART_MspInit+0x1b8>)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	2100      	movs	r1, #0
 8000f52:	2026      	movs	r0, #38	; 0x26
 8000f54:	f000 fa9d 	bl	8001492 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f58:	2026      	movs	r0, #38	; 0x26
 8000f5a:	f000 fab6 	bl	80014ca <HAL_NVIC_EnableIRQ>
}
 8000f5e:	bf00      	nop
 8000f60:	3730      	adds	r7, #48	; 0x30
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40011000 	.word	0x40011000
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020000 	.word	0x40020000
 8000f74:	40020400 	.word	0x40020400
 8000f78:	40004400 	.word	0x40004400
 8000f7c:	20000168 	.word	0x20000168
 8000f80:	40026088 	.word	0x40026088

08000f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <NMI_Handler+0x4>

08000f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <HardFault_Handler+0x4>

08000f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <MemManage_Handler+0x4>

08000f96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <BusFault_Handler+0x4>

08000f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <UsageFault_Handler+0x4>

08000fa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr

08000fbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fbe:	b480      	push	{r7}
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd0:	f000 f964 	bl	800129c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd4:	bf00      	nop
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000fdc:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <DMA1_Stream5_IRQHandler+0x10>)
 8000fde:	f000 fbcf 	bl	8001780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000168 	.word	0x20000168

08000fec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <TIM3_IRQHandler+0x10>)
 8000ff2:	f001 fd01 	bl	80029f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000098 	.word	0x20000098

08001000 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001004:	4802      	ldr	r0, [pc, #8]	; (8001010 <USART1_IRQHandler+0x10>)
 8001006:	f002 fa3d 	bl	8003484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800100a:	bf00      	nop
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	200000e0 	.word	0x200000e0

08001014 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001018:	4802      	ldr	r0, [pc, #8]	; (8001024 <USART2_IRQHandler+0x10>)
 800101a:	f002 fa33 	bl	8003484 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	20000124 	.word	0x20000124

08001028 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800102c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001030:	f000 ff80 	bl	8001f34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}

08001038 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
 8001048:	e00a      	b.n	8001060 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800104a:	f7ff fab1 	bl	80005b0 <__io_getchar>
 800104e:	4601      	mov	r1, r0
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	60ba      	str	r2, [r7, #8]
 8001056:	b2ca      	uxtb	r2, r1
 8001058:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	3301      	adds	r3, #1
 800105e:	617b      	str	r3, [r7, #20]
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	429a      	cmp	r2, r3
 8001066:	dbf0      	blt.n	800104a <_read+0x12>
  }

  return len;
 8001068:	687b      	ldr	r3, [r7, #4]
}
 800106a:	4618      	mov	r0, r3
 800106c:	3718      	adds	r7, #24
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	b086      	sub	sp, #24
 8001076:	af00      	add	r7, sp, #0
 8001078:	60f8      	str	r0, [r7, #12]
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
 8001082:	e009      	b.n	8001098 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	60ba      	str	r2, [r7, #8]
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fa7d 	bl	800058c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	3301      	adds	r3, #1
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	697a      	ldr	r2, [r7, #20]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	429a      	cmp	r2, r3
 800109e:	dbf1      	blt.n	8001084 <_write+0x12>
  }
  return len;
 80010a0:	687b      	ldr	r3, [r7, #4]
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <_close>:

int _close(int file)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010d2:	605a      	str	r2, [r3, #4]
  return 0;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <_isatty>:

int _isatty(int file)
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010ea:	2301      	movs	r3, #1
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001104:	2300      	movs	r3, #0
}
 8001106:	4618      	mov	r0, r3
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
	...

08001114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b086      	sub	sp, #24
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800111c:	4a14      	ldr	r2, [pc, #80]	; (8001170 <_sbrk+0x5c>)
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <_sbrk+0x60>)
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001128:	4b13      	ldr	r3, [pc, #76]	; (8001178 <_sbrk+0x64>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d102      	bne.n	8001136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <_sbrk+0x64>)
 8001132:	4a12      	ldr	r2, [pc, #72]	; (800117c <_sbrk+0x68>)
 8001134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001136:	4b10      	ldr	r3, [pc, #64]	; (8001178 <_sbrk+0x64>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4413      	add	r3, r2
 800113e:	693a      	ldr	r2, [r7, #16]
 8001140:	429a      	cmp	r2, r3
 8001142:	d207      	bcs.n	8001154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001144:	f003 fbec 	bl	8004920 <__errno>
 8001148:	4603      	mov	r3, r0
 800114a:	220c      	movs	r2, #12
 800114c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	e009      	b.n	8001168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800115a:	4b07      	ldr	r3, [pc, #28]	; (8001178 <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	4a05      	ldr	r2, [pc, #20]	; (8001178 <_sbrk+0x64>)
 8001164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001166:	68fb      	ldr	r3, [r7, #12]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3718      	adds	r7, #24
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20020000 	.word	0x20020000
 8001174:	00000400 	.word	0x00000400
 8001178:	20000254 	.word	0x20000254
 800117c:	200003a8 	.word	0x200003a8

08001180 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001184:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <SystemInit+0x20>)
 8001186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800118a:	4a05      	ldr	r2, [pc, #20]	; (80011a0 <SystemInit+0x20>)
 800118c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011a8:	480d      	ldr	r0, [pc, #52]	; (80011e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011aa:	490e      	ldr	r1, [pc, #56]	; (80011e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011ac:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b0:	e002      	b.n	80011b8 <LoopCopyDataInit>

080011b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011b6:	3304      	adds	r3, #4

080011b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011bc:	d3f9      	bcc.n	80011b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011be:	4a0b      	ldr	r2, [pc, #44]	; (80011ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011c0:	4c0b      	ldr	r4, [pc, #44]	; (80011f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c4:	e001      	b.n	80011ca <LoopFillZerobss>

080011c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011c8:	3204      	adds	r2, #4

080011ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011cc:	d3fb      	bcc.n	80011c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011ce:	f7ff ffd7 	bl	8001180 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011d2:	f003 fbab 	bl	800492c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011d6:	f7ff fb9f 	bl	8000918 <main>
  bx  lr    
 80011da:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80011dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80011e8:	080055fc 	.word	0x080055fc
  ldr r2, =_sbss
 80011ec:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80011f0:	200003a8 	.word	0x200003a8

080011f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011f4:	e7fe      	b.n	80011f4 <ADC_IRQHandler>
	...

080011f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011fc:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <HAL_Init+0x40>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a0d      	ldr	r2, [pc, #52]	; (8001238 <HAL_Init+0x40>)
 8001202:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001206:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001208:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <HAL_Init+0x40>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <HAL_Init+0x40>)
 800120e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001212:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001214:	4b08      	ldr	r3, [pc, #32]	; (8001238 <HAL_Init+0x40>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a07      	ldr	r2, [pc, #28]	; (8001238 <HAL_Init+0x40>)
 800121a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001220:	2003      	movs	r0, #3
 8001222:	f000 f92b 	bl	800147c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001226:	2000      	movs	r0, #0
 8001228:	f000 f808 	bl	800123c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800122c:	f7ff fd7a 	bl	8000d24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001230:	2300      	movs	r3, #0
}
 8001232:	4618      	mov	r0, r3
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40023c00 	.word	0x40023c00

0800123c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <HAL_InitTick+0x54>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <HAL_InitTick+0x58>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001252:	fbb3 f3f1 	udiv	r3, r3, r1
 8001256:	fbb2 f3f3 	udiv	r3, r2, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f943 	bl	80014e6 <HAL_SYSTICK_Config>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e00e      	b.n	8001288 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b0f      	cmp	r3, #15
 800126e:	d80a      	bhi.n	8001286 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001270:	2200      	movs	r2, #0
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	f000 f90b 	bl	8001492 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800127c:	4a06      	ldr	r2, [pc, #24]	; (8001298 <HAL_InitTick+0x5c>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001282:	2300      	movs	r3, #0
 8001284:	e000      	b.n	8001288 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	20000014 	.word	0x20000014
 8001294:	2000001c 	.word	0x2000001c
 8001298:	20000018 	.word	0x20000018

0800129c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_IncTick+0x20>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_IncTick+0x24>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <HAL_IncTick+0x24>)
 80012ae:	6013      	str	r3, [r2, #0]
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	2000001c 	.word	0x2000001c
 80012c0:	20000258 	.word	0x20000258

080012c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return uwTick;
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <HAL_GetTick+0x14>)
 80012ca:	681b      	ldr	r3, [r3, #0]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	20000258 	.word	0x20000258

080012dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012ec:	4b0c      	ldr	r3, [pc, #48]	; (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 80012ee:	68db      	ldr	r3, [r3, #12]
 80012f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f8:	4013      	ands	r3, r2
 80012fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800130c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130e:	4a04      	ldr	r2, [pc, #16]	; (8001320 <__NVIC_SetPriorityGrouping+0x44>)
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	60d3      	str	r3, [r2, #12]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <__NVIC_GetPriorityGrouping+0x18>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	f003 0307 	and.w	r3, r3, #7
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	2b00      	cmp	r3, #0
 8001350:	db0b      	blt.n	800136a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	f003 021f 	and.w	r2, r3, #31
 8001358:	4907      	ldr	r1, [pc, #28]	; (8001378 <__NVIC_EnableIRQ+0x38>)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	095b      	lsrs	r3, r3, #5
 8001360:	2001      	movs	r0, #1
 8001362:	fa00 f202 	lsl.w	r2, r0, r2
 8001366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000e100 	.word	0xe000e100

0800137c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	6039      	str	r1, [r7, #0]
 8001386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138c:	2b00      	cmp	r3, #0
 800138e:	db0a      	blt.n	80013a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	b2da      	uxtb	r2, r3
 8001394:	490c      	ldr	r1, [pc, #48]	; (80013c8 <__NVIC_SetPriority+0x4c>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	0112      	lsls	r2, r2, #4
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	440b      	add	r3, r1
 80013a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013a4:	e00a      	b.n	80013bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4908      	ldr	r1, [pc, #32]	; (80013cc <__NVIC_SetPriority+0x50>)
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	f003 030f 	and.w	r3, r3, #15
 80013b2:	3b04      	subs	r3, #4
 80013b4:	0112      	lsls	r2, r2, #4
 80013b6:	b2d2      	uxtb	r2, r2
 80013b8:	440b      	add	r3, r1
 80013ba:	761a      	strb	r2, [r3, #24]
}
 80013bc:	bf00      	nop
 80013be:	370c      	adds	r7, #12
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000e100 	.word	0xe000e100
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b089      	sub	sp, #36	; 0x24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f1c3 0307 	rsb	r3, r3, #7
 80013ea:	2b04      	cmp	r3, #4
 80013ec:	bf28      	it	cs
 80013ee:	2304      	movcs	r3, #4
 80013f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3304      	adds	r3, #4
 80013f6:	2b06      	cmp	r3, #6
 80013f8:	d902      	bls.n	8001400 <NVIC_EncodePriority+0x30>
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3b03      	subs	r3, #3
 80013fe:	e000      	b.n	8001402 <NVIC_EncodePriority+0x32>
 8001400:	2300      	movs	r3, #0
 8001402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001404:	f04f 32ff 	mov.w	r2, #4294967295
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	43da      	mvns	r2, r3
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	401a      	ands	r2, r3
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001418:	f04f 31ff 	mov.w	r1, #4294967295
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	fa01 f303 	lsl.w	r3, r1, r3
 8001422:	43d9      	mvns	r1, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	4313      	orrs	r3, r2
         );
}
 800142a:	4618      	mov	r0, r3
 800142c:	3724      	adds	r7, #36	; 0x24
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3b01      	subs	r3, #1
 8001444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001448:	d301      	bcc.n	800144e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144a:	2301      	movs	r3, #1
 800144c:	e00f      	b.n	800146e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <SysTick_Config+0x40>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001456:	210f      	movs	r1, #15
 8001458:	f04f 30ff 	mov.w	r0, #4294967295
 800145c:	f7ff ff8e 	bl	800137c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <SysTick_Config+0x40>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001466:	4b04      	ldr	r3, [pc, #16]	; (8001478 <SysTick_Config+0x40>)
 8001468:	2207      	movs	r2, #7
 800146a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	e000e010 	.word	0xe000e010

0800147c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ff29 	bl	80012dc <__NVIC_SetPriorityGrouping>
}
 800148a:	bf00      	nop
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001492:	b580      	push	{r7, lr}
 8001494:	b086      	sub	sp, #24
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014a4:	f7ff ff3e 	bl	8001324 <__NVIC_GetPriorityGrouping>
 80014a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	68b9      	ldr	r1, [r7, #8]
 80014ae:	6978      	ldr	r0, [r7, #20]
 80014b0:	f7ff ff8e 	bl	80013d0 <NVIC_EncodePriority>
 80014b4:	4602      	mov	r2, r0
 80014b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ba:	4611      	mov	r1, r2
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff ff5d 	bl	800137c <__NVIC_SetPriority>
}
 80014c2:	bf00      	nop
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff31 	bl	8001340 <__NVIC_EnableIRQ>
}
 80014de:	bf00      	nop
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ffa2 	bl	8001438 <SysTick_Config>
 80014f4:	4603      	mov	r3, r0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800150c:	f7ff feda 	bl	80012c4 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e099      	b.n	8001650 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2202      	movs	r2, #2
 8001520:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2200      	movs	r2, #0
 8001528:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 0201 	bic.w	r2, r2, #1
 800153a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800153c:	e00f      	b.n	800155e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800153e:	f7ff fec1 	bl	80012c4 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b05      	cmp	r3, #5
 800154a:	d908      	bls.n	800155e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2220      	movs	r2, #32
 8001550:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2203      	movs	r2, #3
 8001556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e078      	b.n	8001650 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1e8      	bne.n	800153e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	4b38      	ldr	r3, [pc, #224]	; (8001658 <HAL_DMA_Init+0x158>)
 8001578:	4013      	ands	r3, r2
 800157a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685a      	ldr	r2, [r3, #4]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800158a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001596:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015aa:	697a      	ldr	r2, [r7, #20]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	d107      	bne.n	80015c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c0:	4313      	orrs	r3, r2
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	695b      	ldr	r3, [r3, #20]
 80015d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	f023 0307 	bic.w	r3, r3, #7
 80015de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	d117      	bne.n	8001622 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001600:	2b00      	cmp	r3, #0
 8001602:	d00e      	beq.n	8001622 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	f000 fa7b 	bl	8001b00 <DMA_CheckFifoParam>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d008      	beq.n	8001622 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2240      	movs	r2, #64	; 0x40
 8001614:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800161e:	2301      	movs	r3, #1
 8001620:	e016      	b.n	8001650 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800162a:	6878      	ldr	r0, [r7, #4]
 800162c:	f000 fa32 	bl	8001a94 <DMA_CalcBaseAndBitshift>
 8001630:	4603      	mov	r3, r0
 8001632:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001638:	223f      	movs	r2, #63	; 0x3f
 800163a:	409a      	lsls	r2, r3
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2201      	movs	r2, #1
 800164a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	f010803f 	.word	0xf010803f

0800165c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001668:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800166a:	f7ff fe2b 	bl	80012c4 <HAL_GetTick>
 800166e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001676:	b2db      	uxtb	r3, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d008      	beq.n	800168e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2280      	movs	r2, #128	; 0x80
 8001680:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e052      	b.n	8001734 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0216 	bic.w	r2, r2, #22
 800169c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	695a      	ldr	r2, [r3, #20]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d103      	bne.n	80016be <HAL_DMA_Abort+0x62>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d007      	beq.n	80016ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 0208 	bic.w	r2, r2, #8
 80016cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 0201 	bic.w	r2, r2, #1
 80016dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016de:	e013      	b.n	8001708 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016e0:	f7ff fdf0 	bl	80012c4 <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b05      	cmp	r3, #5
 80016ec:	d90c      	bls.n	8001708 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2220      	movs	r2, #32
 80016f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2203      	movs	r2, #3
 80016f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001704:	2303      	movs	r3, #3
 8001706:	e015      	b.n	8001734 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1e4      	bne.n	80016e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171a:	223f      	movs	r2, #63	; 0x3f
 800171c:	409a      	lsls	r2, r3
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2201      	movs	r2, #1
 8001726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2200      	movs	r2, #0
 800172e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d004      	beq.n	800175a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2280      	movs	r2, #128	; 0x80
 8001754:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e00c      	b.n	8001774 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2205      	movs	r2, #5
 800175e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0201 	bic.w	r2, r2, #1
 8001770:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001788:	2300      	movs	r3, #0
 800178a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800178c:	4b8e      	ldr	r3, [pc, #568]	; (80019c8 <HAL_DMA_IRQHandler+0x248>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a8e      	ldr	r2, [pc, #568]	; (80019cc <HAL_DMA_IRQHandler+0x24c>)
 8001792:	fba2 2303 	umull	r2, r3, r2, r3
 8001796:	0a9b      	lsrs	r3, r3, #10
 8001798:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017aa:	2208      	movs	r2, #8
 80017ac:	409a      	lsls	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	4013      	ands	r3, r2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d01a      	beq.n	80017ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0304 	and.w	r3, r3, #4
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d013      	beq.n	80017ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0204 	bic.w	r2, r2, #4
 80017d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d8:	2208      	movs	r2, #8
 80017da:	409a      	lsls	r2, r3
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e4:	f043 0201 	orr.w	r2, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f0:	2201      	movs	r2, #1
 80017f2:	409a      	lsls	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4013      	ands	r3, r2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d012      	beq.n	8001822 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001806:	2b00      	cmp	r3, #0
 8001808:	d00b      	beq.n	8001822 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180e:	2201      	movs	r2, #1
 8001810:	409a      	lsls	r2, r3
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181a:	f043 0202 	orr.w	r2, r3, #2
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001826:	2204      	movs	r2, #4
 8001828:	409a      	lsls	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4013      	ands	r3, r2
 800182e:	2b00      	cmp	r3, #0
 8001830:	d012      	beq.n	8001858 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d00b      	beq.n	8001858 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001844:	2204      	movs	r2, #4
 8001846:	409a      	lsls	r2, r3
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001850:	f043 0204 	orr.w	r2, r3, #4
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185c:	2210      	movs	r2, #16
 800185e:	409a      	lsls	r2, r3
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4013      	ands	r3, r2
 8001864:	2b00      	cmp	r3, #0
 8001866:	d043      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0308 	and.w	r3, r3, #8
 8001872:	2b00      	cmp	r3, #0
 8001874:	d03c      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800187a:	2210      	movs	r2, #16
 800187c:	409a      	lsls	r2, r3
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d018      	beq.n	80018c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d108      	bne.n	80018b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d024      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	4798      	blx	r3
 80018ae:	e01f      	b.n	80018f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d01b      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	4798      	blx	r3
 80018c0:	e016      	b.n	80018f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d107      	bne.n	80018e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 0208 	bic.w	r2, r2, #8
 80018de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018f4:	2220      	movs	r2, #32
 80018f6:	409a      	lsls	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4013      	ands	r3, r2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	f000 808f 	beq.w	8001a20 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0310 	and.w	r3, r3, #16
 800190c:	2b00      	cmp	r3, #0
 800190e:	f000 8087 	beq.w	8001a20 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001916:	2220      	movs	r2, #32
 8001918:	409a      	lsls	r2, r3
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b05      	cmp	r3, #5
 8001928:	d136      	bne.n	8001998 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681a      	ldr	r2, [r3, #0]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f022 0216 	bic.w	r2, r2, #22
 8001938:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	695a      	ldr	r2, [r3, #20]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001948:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	2b00      	cmp	r3, #0
 8001950:	d103      	bne.n	800195a <HAL_DMA_IRQHandler+0x1da>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001956:	2b00      	cmp	r3, #0
 8001958:	d007      	beq.n	800196a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 0208 	bic.w	r2, r2, #8
 8001968:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800196e:	223f      	movs	r2, #63	; 0x3f
 8001970:	409a      	lsls	r2, r3
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800198a:	2b00      	cmp	r3, #0
 800198c:	d07e      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	4798      	blx	r3
        }
        return;
 8001996:	e079      	b.n	8001a8c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d01d      	beq.n	80019e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d10d      	bne.n	80019d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d031      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	4798      	blx	r3
 80019c4:	e02c      	b.n	8001a20 <HAL_DMA_IRQHandler+0x2a0>
 80019c6:	bf00      	nop
 80019c8:	20000014 	.word	0x20000014
 80019cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d023      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	4798      	blx	r3
 80019e0:	e01e      	b.n	8001a20 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d10f      	bne.n	8001a10 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 0210 	bic.w	r2, r2, #16
 80019fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d003      	beq.n	8001a20 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d032      	beq.n	8001a8e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d022      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2205      	movs	r2, #5
 8001a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0201 	bic.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d307      	bcc.n	8001a68 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d1f2      	bne.n	8001a4c <HAL_DMA_IRQHandler+0x2cc>
 8001a66:	e000      	b.n	8001a6a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a68:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d005      	beq.n	8001a8e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	4798      	blx	r3
 8001a8a:	e000      	b.n	8001a8e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a8c:	bf00      	nop
    }
  }
}
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	3b10      	subs	r3, #16
 8001aa4:	4a14      	ldr	r2, [pc, #80]	; (8001af8 <DMA_CalcBaseAndBitshift+0x64>)
 8001aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aaa:	091b      	lsrs	r3, r3, #4
 8001aac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001aae:	4a13      	ldr	r2, [pc, #76]	; (8001afc <DMA_CalcBaseAndBitshift+0x68>)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d909      	bls.n	8001ad6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001aca:	f023 0303 	bic.w	r3, r3, #3
 8001ace:	1d1a      	adds	r2, r3, #4
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ad4:	e007      	b.n	8001ae6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ade:	f023 0303 	bic.w	r3, r3, #3
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3714      	adds	r7, #20
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	aaaaaaab 	.word	0xaaaaaaab
 8001afc:	080054b0 	.word	0x080054b0

08001b00 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b10:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d11f      	bne.n	8001b5a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d856      	bhi.n	8001bce <DMA_CheckFifoParam+0xce>
 8001b20:	a201      	add	r2, pc, #4	; (adr r2, 8001b28 <DMA_CheckFifoParam+0x28>)
 8001b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b26:	bf00      	nop
 8001b28:	08001b39 	.word	0x08001b39
 8001b2c:	08001b4b 	.word	0x08001b4b
 8001b30:	08001b39 	.word	0x08001b39
 8001b34:	08001bcf 	.word	0x08001bcf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d046      	beq.n	8001bd2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b48:	e043      	b.n	8001bd2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b52:	d140      	bne.n	8001bd6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b58:	e03d      	b.n	8001bd6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	699b      	ldr	r3, [r3, #24]
 8001b5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b62:	d121      	bne.n	8001ba8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	2b03      	cmp	r3, #3
 8001b68:	d837      	bhi.n	8001bda <DMA_CheckFifoParam+0xda>
 8001b6a:	a201      	add	r2, pc, #4	; (adr r2, 8001b70 <DMA_CheckFifoParam+0x70>)
 8001b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b70:	08001b81 	.word	0x08001b81
 8001b74:	08001b87 	.word	0x08001b87
 8001b78:	08001b81 	.word	0x08001b81
 8001b7c:	08001b99 	.word	0x08001b99
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	73fb      	strb	r3, [r7, #15]
      break;
 8001b84:	e030      	b.n	8001be8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d025      	beq.n	8001bde <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b96:	e022      	b.n	8001bde <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ba0:	d11f      	bne.n	8001be2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ba6:	e01c      	b.n	8001be2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d903      	bls.n	8001bb6 <DMA_CheckFifoParam+0xb6>
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d003      	beq.n	8001bbc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bb4:	e018      	b.n	8001be8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	73fb      	strb	r3, [r7, #15]
      break;
 8001bba:	e015      	b.n	8001be8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00e      	beq.n	8001be6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	73fb      	strb	r3, [r7, #15]
      break;
 8001bcc:	e00b      	b.n	8001be6 <DMA_CheckFifoParam+0xe6>
      break;
 8001bce:	bf00      	nop
 8001bd0:	e00a      	b.n	8001be8 <DMA_CheckFifoParam+0xe8>
      break;
 8001bd2:	bf00      	nop
 8001bd4:	e008      	b.n	8001be8 <DMA_CheckFifoParam+0xe8>
      break;
 8001bd6:	bf00      	nop
 8001bd8:	e006      	b.n	8001be8 <DMA_CheckFifoParam+0xe8>
      break;
 8001bda:	bf00      	nop
 8001bdc:	e004      	b.n	8001be8 <DMA_CheckFifoParam+0xe8>
      break;
 8001bde:	bf00      	nop
 8001be0:	e002      	b.n	8001be8 <DMA_CheckFifoParam+0xe8>
      break;   
 8001be2:	bf00      	nop
 8001be4:	e000      	b.n	8001be8 <DMA_CheckFifoParam+0xe8>
      break;
 8001be6:	bf00      	nop
    }
  } 
  
  return status; 
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop

08001bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b089      	sub	sp, #36	; 0x24
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
 8001c12:	e159      	b.n	8001ec8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c14:	2201      	movs	r2, #1
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	f040 8148 	bne.w	8001ec2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f003 0303 	and.w	r3, r3, #3
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d005      	beq.n	8001c4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d130      	bne.n	8001cac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	2203      	movs	r2, #3
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	43db      	mvns	r3, r3
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	68da      	ldr	r2, [r3, #12]
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c80:	2201      	movs	r2, #1
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	f003 0201 	and.w	r2, r3, #1
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 0303 	and.w	r3, r3, #3
 8001cb4:	2b03      	cmp	r3, #3
 8001cb6:	d017      	beq.n	8001ce8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0303 	and.w	r3, r3, #3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d123      	bne.n	8001d3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	08da      	lsrs	r2, r3, #3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3208      	adds	r2, #8
 8001cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	220f      	movs	r2, #15
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	43db      	mvns	r3, r3
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4013      	ands	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	691a      	ldr	r2, [r3, #16]
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	009b      	lsls	r3, r3, #2
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	08da      	lsrs	r2, r3, #3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3208      	adds	r2, #8
 8001d36:	69b9      	ldr	r1, [r7, #24]
 8001d38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 0203 	and.w	r2, r3, #3
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	fa02 f303 	lsl.w	r3, r2, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	f000 80a2 	beq.w	8001ec2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	4b57      	ldr	r3, [pc, #348]	; (8001ee0 <HAL_GPIO_Init+0x2e8>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	4a56      	ldr	r2, [pc, #344]	; (8001ee0 <HAL_GPIO_Init+0x2e8>)
 8001d88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8e:	4b54      	ldr	r3, [pc, #336]	; (8001ee0 <HAL_GPIO_Init+0x2e8>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d9a:	4a52      	ldr	r2, [pc, #328]	; (8001ee4 <HAL_GPIO_Init+0x2ec>)
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	089b      	lsrs	r3, r3, #2
 8001da0:	3302      	adds	r3, #2
 8001da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	220f      	movs	r2, #15
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a49      	ldr	r2, [pc, #292]	; (8001ee8 <HAL_GPIO_Init+0x2f0>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d019      	beq.n	8001dfa <HAL_GPIO_Init+0x202>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a48      	ldr	r2, [pc, #288]	; (8001eec <HAL_GPIO_Init+0x2f4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d013      	beq.n	8001df6 <HAL_GPIO_Init+0x1fe>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a47      	ldr	r2, [pc, #284]	; (8001ef0 <HAL_GPIO_Init+0x2f8>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00d      	beq.n	8001df2 <HAL_GPIO_Init+0x1fa>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a46      	ldr	r2, [pc, #280]	; (8001ef4 <HAL_GPIO_Init+0x2fc>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d007      	beq.n	8001dee <HAL_GPIO_Init+0x1f6>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a45      	ldr	r2, [pc, #276]	; (8001ef8 <HAL_GPIO_Init+0x300>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d101      	bne.n	8001dea <HAL_GPIO_Init+0x1f2>
 8001de6:	2304      	movs	r3, #4
 8001de8:	e008      	b.n	8001dfc <HAL_GPIO_Init+0x204>
 8001dea:	2307      	movs	r3, #7
 8001dec:	e006      	b.n	8001dfc <HAL_GPIO_Init+0x204>
 8001dee:	2303      	movs	r3, #3
 8001df0:	e004      	b.n	8001dfc <HAL_GPIO_Init+0x204>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e002      	b.n	8001dfc <HAL_GPIO_Init+0x204>
 8001df6:	2301      	movs	r3, #1
 8001df8:	e000      	b.n	8001dfc <HAL_GPIO_Init+0x204>
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	69fa      	ldr	r2, [r7, #28]
 8001dfe:	f002 0203 	and.w	r2, r2, #3
 8001e02:	0092      	lsls	r2, r2, #2
 8001e04:	4093      	lsls	r3, r2
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e0c:	4935      	ldr	r1, [pc, #212]	; (8001ee4 <HAL_GPIO_Init+0x2ec>)
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	089b      	lsrs	r3, r3, #2
 8001e12:	3302      	adds	r3, #2
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e1a:	4b38      	ldr	r3, [pc, #224]	; (8001efc <HAL_GPIO_Init+0x304>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	43db      	mvns	r3, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4013      	ands	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e3e:	4a2f      	ldr	r2, [pc, #188]	; (8001efc <HAL_GPIO_Init+0x304>)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e44:	4b2d      	ldr	r3, [pc, #180]	; (8001efc <HAL_GPIO_Init+0x304>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e68:	4a24      	ldr	r2, [pc, #144]	; (8001efc <HAL_GPIO_Init+0x304>)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e6e:	4b23      	ldr	r3, [pc, #140]	; (8001efc <HAL_GPIO_Init+0x304>)
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	43db      	mvns	r3, r3
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e92:	4a1a      	ldr	r2, [pc, #104]	; (8001efc <HAL_GPIO_Init+0x304>)
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e98:	4b18      	ldr	r3, [pc, #96]	; (8001efc <HAL_GPIO_Init+0x304>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ebc:	4a0f      	ldr	r2, [pc, #60]	; (8001efc <HAL_GPIO_Init+0x304>)
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	61fb      	str	r3, [r7, #28]
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	2b0f      	cmp	r3, #15
 8001ecc:	f67f aea2 	bls.w	8001c14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	bf00      	nop
 8001ed4:	3724      	adds	r7, #36	; 0x24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40013800 	.word	0x40013800
 8001ee8:	40020000 	.word	0x40020000
 8001eec:	40020400 	.word	0x40020400
 8001ef0:	40020800 	.word	0x40020800
 8001ef4:	40020c00 	.word	0x40020c00
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40013c00 	.word	0x40013c00

08001f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	807b      	strh	r3, [r7, #2]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f10:	787b      	ldrb	r3, [r7, #1]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f16:	887a      	ldrh	r2, [r7, #2]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f1c:	e003      	b.n	8001f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f1e:	887b      	ldrh	r3, [r7, #2]
 8001f20:	041a      	lsls	r2, r3, #16
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	619a      	str	r2, [r3, #24]
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f3e:	4b08      	ldr	r3, [pc, #32]	; (8001f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d006      	beq.n	8001f58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f4a:	4a05      	ldr	r2, [pc, #20]	; (8001f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7fe fcbe 	bl	80008d4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40013c00 	.word	0x40013c00

08001f64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b086      	sub	sp, #24
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e267      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d075      	beq.n	800206e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f82:	4b88      	ldr	r3, [pc, #544]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f003 030c 	and.w	r3, r3, #12
 8001f8a:	2b04      	cmp	r3, #4
 8001f8c:	d00c      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f8e:	4b85      	ldr	r3, [pc, #532]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001f90:	689b      	ldr	r3, [r3, #8]
 8001f92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f96:	2b08      	cmp	r3, #8
 8001f98:	d112      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f9a:	4b82      	ldr	r3, [pc, #520]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fa6:	d10b      	bne.n	8001fc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa8:	4b7e      	ldr	r3, [pc, #504]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d05b      	beq.n	800206c <HAL_RCC_OscConfig+0x108>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d157      	bne.n	800206c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e242      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fc8:	d106      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x74>
 8001fca:	4b76      	ldr	r3, [pc, #472]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a75      	ldr	r2, [pc, #468]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fd4:	6013      	str	r3, [r2, #0]
 8001fd6:	e01d      	b.n	8002014 <HAL_RCC_OscConfig+0xb0>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x98>
 8001fe2:	4b70      	ldr	r3, [pc, #448]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a6f      	ldr	r2, [pc, #444]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	4b6d      	ldr	r3, [pc, #436]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a6c      	ldr	r2, [pc, #432]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff8:	6013      	str	r3, [r2, #0]
 8001ffa:	e00b      	b.n	8002014 <HAL_RCC_OscConfig+0xb0>
 8001ffc:	4b69      	ldr	r3, [pc, #420]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a68      	ldr	r2, [pc, #416]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8002002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002006:	6013      	str	r3, [r2, #0]
 8002008:	4b66      	ldr	r3, [pc, #408]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a65      	ldr	r2, [pc, #404]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 800200e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d013      	beq.n	8002044 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7ff f952 	bl	80012c4 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002024:	f7ff f94e 	bl	80012c4 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b64      	cmp	r3, #100	; 0x64
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e207      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002036:	4b5b      	ldr	r3, [pc, #364]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f0      	beq.n	8002024 <HAL_RCC_OscConfig+0xc0>
 8002042:	e014      	b.n	800206e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002044:	f7ff f93e 	bl	80012c4 <HAL_GetTick>
 8002048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204a:	e008      	b.n	800205e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800204c:	f7ff f93a 	bl	80012c4 <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b64      	cmp	r3, #100	; 0x64
 8002058:	d901      	bls.n	800205e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e1f3      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800205e:	4b51      	ldr	r3, [pc, #324]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d1f0      	bne.n	800204c <HAL_RCC_OscConfig+0xe8>
 800206a:	e000      	b.n	800206e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800206c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d063      	beq.n	8002142 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800207a:	4b4a      	ldr	r3, [pc, #296]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00b      	beq.n	800209e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002086:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800208e:	2b08      	cmp	r3, #8
 8002090:	d11c      	bne.n	80020cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002092:	4b44      	ldr	r3, [pc, #272]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d116      	bne.n	80020cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209e:	4b41      	ldr	r3, [pc, #260]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d005      	beq.n	80020b6 <HAL_RCC_OscConfig+0x152>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	68db      	ldr	r3, [r3, #12]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d001      	beq.n	80020b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e1c7      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020b6:	4b3b      	ldr	r3, [pc, #236]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4937      	ldr	r1, [pc, #220]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ca:	e03a      	b.n	8002142 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d020      	beq.n	8002116 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020d4:	4b34      	ldr	r3, [pc, #208]	; (80021a8 <HAL_RCC_OscConfig+0x244>)
 80020d6:	2201      	movs	r2, #1
 80020d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020da:	f7ff f8f3 	bl	80012c4 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020e2:	f7ff f8ef 	bl	80012c4 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e1a8      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020f4:	4b2b      	ldr	r3, [pc, #172]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d0f0      	beq.n	80020e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002100:	4b28      	ldr	r3, [pc, #160]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4925      	ldr	r1, [pc, #148]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8002110:	4313      	orrs	r3, r2
 8002112:	600b      	str	r3, [r1, #0]
 8002114:	e015      	b.n	8002142 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002116:	4b24      	ldr	r3, [pc, #144]	; (80021a8 <HAL_RCC_OscConfig+0x244>)
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800211c:	f7ff f8d2 	bl	80012c4 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002124:	f7ff f8ce 	bl	80012c4 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e187      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002136:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0308 	and.w	r3, r3, #8
 800214a:	2b00      	cmp	r3, #0
 800214c:	d036      	beq.n	80021bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d016      	beq.n	8002184 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002156:	4b15      	ldr	r3, [pc, #84]	; (80021ac <HAL_RCC_OscConfig+0x248>)
 8002158:	2201      	movs	r2, #1
 800215a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215c:	f7ff f8b2 	bl	80012c4 <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002162:	e008      	b.n	8002176 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002164:	f7ff f8ae 	bl	80012c4 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	2b02      	cmp	r3, #2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e167      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_RCC_OscConfig+0x240>)
 8002178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f0      	beq.n	8002164 <HAL_RCC_OscConfig+0x200>
 8002182:	e01b      	b.n	80021bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002184:	4b09      	ldr	r3, [pc, #36]	; (80021ac <HAL_RCC_OscConfig+0x248>)
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800218a:	f7ff f89b 	bl	80012c4 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002190:	e00e      	b.n	80021b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002192:	f7ff f897 	bl	80012c4 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d907      	bls.n	80021b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e150      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
 80021a4:	40023800 	.word	0x40023800
 80021a8:	42470000 	.word	0x42470000
 80021ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021b0:	4b88      	ldr	r3, [pc, #544]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 80021b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80021b4:	f003 0302 	and.w	r3, r3, #2
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d1ea      	bne.n	8002192 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 8097 	beq.w	80022f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ca:	2300      	movs	r3, #0
 80021cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021ce:	4b81      	ldr	r3, [pc, #516]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10f      	bne.n	80021fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	60bb      	str	r3, [r7, #8]
 80021de:	4b7d      	ldr	r3, [pc, #500]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e2:	4a7c      	ldr	r2, [pc, #496]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 80021e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e8:	6413      	str	r3, [r2, #64]	; 0x40
 80021ea:	4b7a      	ldr	r3, [pc, #488]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f2:	60bb      	str	r3, [r7, #8]
 80021f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021f6:	2301      	movs	r3, #1
 80021f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fa:	4b77      	ldr	r3, [pc, #476]	; (80023d8 <HAL_RCC_OscConfig+0x474>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002202:	2b00      	cmp	r3, #0
 8002204:	d118      	bne.n	8002238 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002206:	4b74      	ldr	r3, [pc, #464]	; (80023d8 <HAL_RCC_OscConfig+0x474>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a73      	ldr	r2, [pc, #460]	; (80023d8 <HAL_RCC_OscConfig+0x474>)
 800220c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002212:	f7ff f857 	bl	80012c4 <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800221a:	f7ff f853 	bl	80012c4 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e10c      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222c:	4b6a      	ldr	r3, [pc, #424]	; (80023d8 <HAL_RCC_OscConfig+0x474>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002234:	2b00      	cmp	r3, #0
 8002236:	d0f0      	beq.n	800221a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d106      	bne.n	800224e <HAL_RCC_OscConfig+0x2ea>
 8002240:	4b64      	ldr	r3, [pc, #400]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002244:	4a63      	ldr	r2, [pc, #396]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	6713      	str	r3, [r2, #112]	; 0x70
 800224c:	e01c      	b.n	8002288 <HAL_RCC_OscConfig+0x324>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	2b05      	cmp	r3, #5
 8002254:	d10c      	bne.n	8002270 <HAL_RCC_OscConfig+0x30c>
 8002256:	4b5f      	ldr	r3, [pc, #380]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225a:	4a5e      	ldr	r2, [pc, #376]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 800225c:	f043 0304 	orr.w	r3, r3, #4
 8002260:	6713      	str	r3, [r2, #112]	; 0x70
 8002262:	4b5c      	ldr	r3, [pc, #368]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002266:	4a5b      	ldr	r2, [pc, #364]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002268:	f043 0301 	orr.w	r3, r3, #1
 800226c:	6713      	str	r3, [r2, #112]	; 0x70
 800226e:	e00b      	b.n	8002288 <HAL_RCC_OscConfig+0x324>
 8002270:	4b58      	ldr	r3, [pc, #352]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002274:	4a57      	ldr	r2, [pc, #348]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002276:	f023 0301 	bic.w	r3, r3, #1
 800227a:	6713      	str	r3, [r2, #112]	; 0x70
 800227c:	4b55      	ldr	r3, [pc, #340]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 800227e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002280:	4a54      	ldr	r2, [pc, #336]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002282:	f023 0304 	bic.w	r3, r3, #4
 8002286:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d015      	beq.n	80022bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002290:	f7ff f818 	bl	80012c4 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002296:	e00a      	b.n	80022ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002298:	f7ff f814 	bl	80012c4 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e0cb      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022ae:	4b49      	ldr	r3, [pc, #292]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 80022b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0ee      	beq.n	8002298 <HAL_RCC_OscConfig+0x334>
 80022ba:	e014      	b.n	80022e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022bc:	f7ff f802 	bl	80012c4 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022c2:	e00a      	b.n	80022da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022c4:	f7fe fffe 	bl	80012c4 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e0b5      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022da:	4b3e      	ldr	r3, [pc, #248]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 80022dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1ee      	bne.n	80022c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022e6:	7dfb      	ldrb	r3, [r7, #23]
 80022e8:	2b01      	cmp	r3, #1
 80022ea:	d105      	bne.n	80022f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022ec:	4b39      	ldr	r3, [pc, #228]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	4a38      	ldr	r2, [pc, #224]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 80022f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	f000 80a1 	beq.w	8002444 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002302:	4b34      	ldr	r3, [pc, #208]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 030c 	and.w	r3, r3, #12
 800230a:	2b08      	cmp	r3, #8
 800230c:	d05c      	beq.n	80023c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d141      	bne.n	800239a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002316:	4b31      	ldr	r3, [pc, #196]	; (80023dc <HAL_RCC_OscConfig+0x478>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800231c:	f7fe ffd2 	bl	80012c4 <HAL_GetTick>
 8002320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002322:	e008      	b.n	8002336 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002324:	f7fe ffce 	bl	80012c4 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b02      	cmp	r3, #2
 8002330:	d901      	bls.n	8002336 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002332:	2303      	movs	r3, #3
 8002334:	e087      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002336:	4b27      	ldr	r3, [pc, #156]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1f0      	bne.n	8002324 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69da      	ldr	r2, [r3, #28]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a1b      	ldr	r3, [r3, #32]
 800234a:	431a      	orrs	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002350:	019b      	lsls	r3, r3, #6
 8002352:	431a      	orrs	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002358:	085b      	lsrs	r3, r3, #1
 800235a:	3b01      	subs	r3, #1
 800235c:	041b      	lsls	r3, r3, #16
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	061b      	lsls	r3, r3, #24
 8002366:	491b      	ldr	r1, [pc, #108]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 8002368:	4313      	orrs	r3, r2
 800236a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800236c:	4b1b      	ldr	r3, [pc, #108]	; (80023dc <HAL_RCC_OscConfig+0x478>)
 800236e:	2201      	movs	r2, #1
 8002370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002372:	f7fe ffa7 	bl	80012c4 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800237a:	f7fe ffa3 	bl	80012c4 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e05c      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800238c:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0f0      	beq.n	800237a <HAL_RCC_OscConfig+0x416>
 8002398:	e054      	b.n	8002444 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800239a:	4b10      	ldr	r3, [pc, #64]	; (80023dc <HAL_RCC_OscConfig+0x478>)
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a0:	f7fe ff90 	bl	80012c4 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023a8:	f7fe ff8c 	bl	80012c4 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e045      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <HAL_RCC_OscConfig+0x470>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x444>
 80023c6:	e03d      	b.n	8002444 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d107      	bne.n	80023e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e038      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40007000 	.word	0x40007000
 80023dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023e0:	4b1b      	ldr	r3, [pc, #108]	; (8002450 <HAL_RCC_OscConfig+0x4ec>)
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d028      	beq.n	8002440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d121      	bne.n	8002440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002406:	429a      	cmp	r2, r3
 8002408:	d11a      	bne.n	8002440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800240a:	68fa      	ldr	r2, [r7, #12]
 800240c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002410:	4013      	ands	r3, r2
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002416:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002418:	4293      	cmp	r3, r2
 800241a:	d111      	bne.n	8002440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002426:	085b      	lsrs	r3, r3, #1
 8002428:	3b01      	subs	r3, #1
 800242a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800242c:	429a      	cmp	r2, r3
 800242e:	d107      	bne.n	8002440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800243a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800243c:	429a      	cmp	r2, r3
 800243e:	d001      	beq.n	8002444 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e000      	b.n	8002446 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800

08002454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0cc      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002468:	4b68      	ldr	r3, [pc, #416]	; (800260c <HAL_RCC_ClockConfig+0x1b8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d90c      	bls.n	8002490 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002476:	4b65      	ldr	r3, [pc, #404]	; (800260c <HAL_RCC_ClockConfig+0x1b8>)
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b63      	ldr	r3, [pc, #396]	; (800260c <HAL_RCC_ClockConfig+0x1b8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e0b8      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d020      	beq.n	80024de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80024a8:	4b59      	ldr	r3, [pc, #356]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	4a58      	ldr	r2, [pc, #352]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80024b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d005      	beq.n	80024cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024c0:	4b53      	ldr	r3, [pc, #332]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	4a52      	ldr	r2, [pc, #328]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024cc:	4b50      	ldr	r3, [pc, #320]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	494d      	ldr	r1, [pc, #308]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d044      	beq.n	8002574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d107      	bne.n	8002502 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	4b47      	ldr	r3, [pc, #284]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d119      	bne.n	8002532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e07f      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b02      	cmp	r3, #2
 8002508:	d003      	beq.n	8002512 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800250e:	2b03      	cmp	r3, #3
 8002510:	d107      	bne.n	8002522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002512:	4b3f      	ldr	r3, [pc, #252]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d109      	bne.n	8002532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e06f      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002522:	4b3b      	ldr	r3, [pc, #236]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e067      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002532:	4b37      	ldr	r3, [pc, #220]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	f023 0203 	bic.w	r2, r3, #3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	4934      	ldr	r1, [pc, #208]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 8002540:	4313      	orrs	r3, r2
 8002542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002544:	f7fe febe 	bl	80012c4 <HAL_GetTick>
 8002548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254a:	e00a      	b.n	8002562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800254c:	f7fe feba 	bl	80012c4 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	f241 3288 	movw	r2, #5000	; 0x1388
 800255a:	4293      	cmp	r3, r2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e04f      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	4b2b      	ldr	r3, [pc, #172]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 020c 	and.w	r2, r3, #12
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	429a      	cmp	r2, r3
 8002572:	d1eb      	bne.n	800254c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002574:	4b25      	ldr	r3, [pc, #148]	; (800260c <HAL_RCC_ClockConfig+0x1b8>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d20c      	bcs.n	800259c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b22      	ldr	r3, [pc, #136]	; (800260c <HAL_RCC_ClockConfig+0x1b8>)
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800258a:	4b20      	ldr	r3, [pc, #128]	; (800260c <HAL_RCC_ClockConfig+0x1b8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0307 	and.w	r3, r3, #7
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d001      	beq.n	800259c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e032      	b.n	8002602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d008      	beq.n	80025ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025a8:	4b19      	ldr	r3, [pc, #100]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4916      	ldr	r1, [pc, #88]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d009      	beq.n	80025da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	490e      	ldr	r1, [pc, #56]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025da:	f000 f821 	bl	8002620 <HAL_RCC_GetSysClockFreq>
 80025de:	4602      	mov	r2, r0
 80025e0:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_RCC_ClockConfig+0x1bc>)
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	091b      	lsrs	r3, r3, #4
 80025e6:	f003 030f 	and.w	r3, r3, #15
 80025ea:	490a      	ldr	r1, [pc, #40]	; (8002614 <HAL_RCC_ClockConfig+0x1c0>)
 80025ec:	5ccb      	ldrb	r3, [r1, r3]
 80025ee:	fa22 f303 	lsr.w	r3, r2, r3
 80025f2:	4a09      	ldr	r2, [pc, #36]	; (8002618 <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025f6:	4b09      	ldr	r3, [pc, #36]	; (800261c <HAL_RCC_ClockConfig+0x1c8>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7fe fe1e 	bl	800123c <HAL_InitTick>

  return HAL_OK;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40023c00 	.word	0x40023c00
 8002610:	40023800 	.word	0x40023800
 8002614:	08005498 	.word	0x08005498
 8002618:	20000014 	.word	0x20000014
 800261c:	20000018 	.word	0x20000018

08002620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002624:	b094      	sub	sp, #80	; 0x50
 8002626:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	647b      	str	r3, [r7, #68]	; 0x44
 800262c:	2300      	movs	r3, #0
 800262e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002630:	2300      	movs	r3, #0
 8002632:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002634:	2300      	movs	r3, #0
 8002636:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002638:	4b79      	ldr	r3, [pc, #484]	; (8002820 <HAL_RCC_GetSysClockFreq+0x200>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b08      	cmp	r3, #8
 8002642:	d00d      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0x40>
 8002644:	2b08      	cmp	r3, #8
 8002646:	f200 80e1 	bhi.w	800280c <HAL_RCC_GetSysClockFreq+0x1ec>
 800264a:	2b00      	cmp	r3, #0
 800264c:	d002      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x34>
 800264e:	2b04      	cmp	r3, #4
 8002650:	d003      	beq.n	800265a <HAL_RCC_GetSysClockFreq+0x3a>
 8002652:	e0db      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002654:	4b73      	ldr	r3, [pc, #460]	; (8002824 <HAL_RCC_GetSysClockFreq+0x204>)
 8002656:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002658:	e0db      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800265a:	4b73      	ldr	r3, [pc, #460]	; (8002828 <HAL_RCC_GetSysClockFreq+0x208>)
 800265c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800265e:	e0d8      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002660:	4b6f      	ldr	r3, [pc, #444]	; (8002820 <HAL_RCC_GetSysClockFreq+0x200>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002668:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800266a:	4b6d      	ldr	r3, [pc, #436]	; (8002820 <HAL_RCC_GetSysClockFreq+0x200>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d063      	beq.n	800273e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002676:	4b6a      	ldr	r3, [pc, #424]	; (8002820 <HAL_RCC_GetSysClockFreq+0x200>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	099b      	lsrs	r3, r3, #6
 800267c:	2200      	movs	r2, #0
 800267e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002680:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002688:	633b      	str	r3, [r7, #48]	; 0x30
 800268a:	2300      	movs	r3, #0
 800268c:	637b      	str	r3, [r7, #52]	; 0x34
 800268e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002692:	4622      	mov	r2, r4
 8002694:	462b      	mov	r3, r5
 8002696:	f04f 0000 	mov.w	r0, #0
 800269a:	f04f 0100 	mov.w	r1, #0
 800269e:	0159      	lsls	r1, r3, #5
 80026a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a4:	0150      	lsls	r0, r2, #5
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4621      	mov	r1, r4
 80026ac:	1a51      	subs	r1, r2, r1
 80026ae:	6139      	str	r1, [r7, #16]
 80026b0:	4629      	mov	r1, r5
 80026b2:	eb63 0301 	sbc.w	r3, r3, r1
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026c4:	4659      	mov	r1, fp
 80026c6:	018b      	lsls	r3, r1, #6
 80026c8:	4651      	mov	r1, sl
 80026ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026ce:	4651      	mov	r1, sl
 80026d0:	018a      	lsls	r2, r1, #6
 80026d2:	4651      	mov	r1, sl
 80026d4:	ebb2 0801 	subs.w	r8, r2, r1
 80026d8:	4659      	mov	r1, fp
 80026da:	eb63 0901 	sbc.w	r9, r3, r1
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026f2:	4690      	mov	r8, r2
 80026f4:	4699      	mov	r9, r3
 80026f6:	4623      	mov	r3, r4
 80026f8:	eb18 0303 	adds.w	r3, r8, r3
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	462b      	mov	r3, r5
 8002700:	eb49 0303 	adc.w	r3, r9, r3
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	f04f 0300 	mov.w	r3, #0
 800270e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002712:	4629      	mov	r1, r5
 8002714:	024b      	lsls	r3, r1, #9
 8002716:	4621      	mov	r1, r4
 8002718:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800271c:	4621      	mov	r1, r4
 800271e:	024a      	lsls	r2, r1, #9
 8002720:	4610      	mov	r0, r2
 8002722:	4619      	mov	r1, r3
 8002724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002726:	2200      	movs	r2, #0
 8002728:	62bb      	str	r3, [r7, #40]	; 0x28
 800272a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800272c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002730:	f7fd fdae 	bl	8000290 <__aeabi_uldivmod>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4613      	mov	r3, r2
 800273a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800273c:	e058      	b.n	80027f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800273e:	4b38      	ldr	r3, [pc, #224]	; (8002820 <HAL_RCC_GetSysClockFreq+0x200>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	099b      	lsrs	r3, r3, #6
 8002744:	2200      	movs	r2, #0
 8002746:	4618      	mov	r0, r3
 8002748:	4611      	mov	r1, r2
 800274a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800274e:	623b      	str	r3, [r7, #32]
 8002750:	2300      	movs	r3, #0
 8002752:	627b      	str	r3, [r7, #36]	; 0x24
 8002754:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002758:	4642      	mov	r2, r8
 800275a:	464b      	mov	r3, r9
 800275c:	f04f 0000 	mov.w	r0, #0
 8002760:	f04f 0100 	mov.w	r1, #0
 8002764:	0159      	lsls	r1, r3, #5
 8002766:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800276a:	0150      	lsls	r0, r2, #5
 800276c:	4602      	mov	r2, r0
 800276e:	460b      	mov	r3, r1
 8002770:	4641      	mov	r1, r8
 8002772:	ebb2 0a01 	subs.w	sl, r2, r1
 8002776:	4649      	mov	r1, r9
 8002778:	eb63 0b01 	sbc.w	fp, r3, r1
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002788:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800278c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002790:	ebb2 040a 	subs.w	r4, r2, sl
 8002794:	eb63 050b 	sbc.w	r5, r3, fp
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	00eb      	lsls	r3, r5, #3
 80027a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027a6:	00e2      	lsls	r2, r4, #3
 80027a8:	4614      	mov	r4, r2
 80027aa:	461d      	mov	r5, r3
 80027ac:	4643      	mov	r3, r8
 80027ae:	18e3      	adds	r3, r4, r3
 80027b0:	603b      	str	r3, [r7, #0]
 80027b2:	464b      	mov	r3, r9
 80027b4:	eb45 0303 	adc.w	r3, r5, r3
 80027b8:	607b      	str	r3, [r7, #4]
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	f04f 0300 	mov.w	r3, #0
 80027c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027c6:	4629      	mov	r1, r5
 80027c8:	028b      	lsls	r3, r1, #10
 80027ca:	4621      	mov	r1, r4
 80027cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027d0:	4621      	mov	r1, r4
 80027d2:	028a      	lsls	r2, r1, #10
 80027d4:	4610      	mov	r0, r2
 80027d6:	4619      	mov	r1, r3
 80027d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027da:	2200      	movs	r2, #0
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	61fa      	str	r2, [r7, #28]
 80027e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027e4:	f7fd fd54 	bl	8000290 <__aeabi_uldivmod>
 80027e8:	4602      	mov	r2, r0
 80027ea:	460b      	mov	r3, r1
 80027ec:	4613      	mov	r3, r2
 80027ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027f0:	4b0b      	ldr	r3, [pc, #44]	; (8002820 <HAL_RCC_GetSysClockFreq+0x200>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	0c1b      	lsrs	r3, r3, #16
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	3301      	adds	r3, #1
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002800:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002804:	fbb2 f3f3 	udiv	r3, r2, r3
 8002808:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800280a:	e002      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800280c:	4b05      	ldr	r3, [pc, #20]	; (8002824 <HAL_RCC_GetSysClockFreq+0x204>)
 800280e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002814:	4618      	mov	r0, r3
 8002816:	3750      	adds	r7, #80	; 0x50
 8002818:	46bd      	mov	sp, r7
 800281a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800281e:	bf00      	nop
 8002820:	40023800 	.word	0x40023800
 8002824:	00f42400 	.word	0x00f42400
 8002828:	007a1200 	.word	0x007a1200

0800282c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800282c:	b480      	push	{r7}
 800282e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002830:	4b03      	ldr	r3, [pc, #12]	; (8002840 <HAL_RCC_GetHCLKFreq+0x14>)
 8002832:	681b      	ldr	r3, [r3, #0]
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000014 	.word	0x20000014

08002844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002848:	f7ff fff0 	bl	800282c <HAL_RCC_GetHCLKFreq>
 800284c:	4602      	mov	r2, r0
 800284e:	4b05      	ldr	r3, [pc, #20]	; (8002864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	0a9b      	lsrs	r3, r3, #10
 8002854:	f003 0307 	and.w	r3, r3, #7
 8002858:	4903      	ldr	r1, [pc, #12]	; (8002868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800285a:	5ccb      	ldrb	r3, [r1, r3]
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002860:	4618      	mov	r0, r3
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40023800 	.word	0x40023800
 8002868:	080054a8 	.word	0x080054a8

0800286c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002870:	f7ff ffdc 	bl	800282c <HAL_RCC_GetHCLKFreq>
 8002874:	4602      	mov	r2, r0
 8002876:	4b05      	ldr	r3, [pc, #20]	; (800288c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	0b5b      	lsrs	r3, r3, #13
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	4903      	ldr	r1, [pc, #12]	; (8002890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002882:	5ccb      	ldrb	r3, [r1, r3]
 8002884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002888:	4618      	mov	r0, r3
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40023800 	.word	0x40023800
 8002890:	080054a8 	.word	0x080054a8

08002894 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e041      	b.n	800292a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d106      	bne.n	80028c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ba:	6878      	ldr	r0, [r7, #4]
 80028bc:	f7fe fa5a 	bl	8000d74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2202      	movs	r2, #2
 80028c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	3304      	adds	r3, #4
 80028d0:	4619      	mov	r1, r3
 80028d2:	4610      	mov	r0, r2
 80028d4:	f000 fa88 	bl	8002de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b01      	cmp	r3, #1
 8002946:	d001      	beq.n	800294c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e044      	b.n	80029d6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2202      	movs	r2, #2
 8002950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68da      	ldr	r2, [r3, #12]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a1e      	ldr	r2, [pc, #120]	; (80029e4 <HAL_TIM_Base_Start_IT+0xb0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d018      	beq.n	80029a0 <HAL_TIM_Base_Start_IT+0x6c>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002976:	d013      	beq.n	80029a0 <HAL_TIM_Base_Start_IT+0x6c>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a1a      	ldr	r2, [pc, #104]	; (80029e8 <HAL_TIM_Base_Start_IT+0xb4>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d00e      	beq.n	80029a0 <HAL_TIM_Base_Start_IT+0x6c>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a19      	ldr	r2, [pc, #100]	; (80029ec <HAL_TIM_Base_Start_IT+0xb8>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d009      	beq.n	80029a0 <HAL_TIM_Base_Start_IT+0x6c>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a17      	ldr	r2, [pc, #92]	; (80029f0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d004      	beq.n	80029a0 <HAL_TIM_Base_Start_IT+0x6c>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a16      	ldr	r2, [pc, #88]	; (80029f4 <HAL_TIM_Base_Start_IT+0xc0>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d111      	bne.n	80029c4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2b06      	cmp	r3, #6
 80029b0:	d010      	beq.n	80029d4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f042 0201 	orr.w	r2, r2, #1
 80029c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c2:	e007      	b.n	80029d4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029d4:	2300      	movs	r3, #0
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3714      	adds	r7, #20
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	40010000 	.word	0x40010000
 80029e8:	40000400 	.word	0x40000400
 80029ec:	40000800 	.word	0x40000800
 80029f0:	40000c00 	.word	0x40000c00
 80029f4:	40014000 	.word	0x40014000

080029f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d122      	bne.n	8002a54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d11b      	bne.n	8002a54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f06f 0202 	mvn.w	r2, #2
 8002a24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	f000 f9b5 	bl	8002daa <HAL_TIM_IC_CaptureCallback>
 8002a40:	e005      	b.n	8002a4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 f9a7 	bl	8002d96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f9b8 	bl	8002dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	f003 0304 	and.w	r3, r3, #4
 8002a5e:	2b04      	cmp	r3, #4
 8002a60:	d122      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	f003 0304 	and.w	r3, r3, #4
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d11b      	bne.n	8002aa8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f06f 0204 	mvn.w	r2, #4
 8002a78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	699b      	ldr	r3, [r3, #24]
 8002a86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f98b 	bl	8002daa <HAL_TIM_IC_CaptureCallback>
 8002a94:	e005      	b.n	8002aa2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f97d 	bl	8002d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 f98e 	bl	8002dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	d122      	bne.n	8002afc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d11b      	bne.n	8002afc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f06f 0208 	mvn.w	r2, #8
 8002acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2204      	movs	r2, #4
 8002ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 f961 	bl	8002daa <HAL_TIM_IC_CaptureCallback>
 8002ae8:	e005      	b.n	8002af6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 f953 	bl	8002d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f000 f964 	bl	8002dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	f003 0310 	and.w	r3, r3, #16
 8002b06:	2b10      	cmp	r3, #16
 8002b08:	d122      	bne.n	8002b50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	f003 0310 	and.w	r3, r3, #16
 8002b14:	2b10      	cmp	r3, #16
 8002b16:	d11b      	bne.n	8002b50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f06f 0210 	mvn.w	r2, #16
 8002b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2208      	movs	r2, #8
 8002b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f000 f937 	bl	8002daa <HAL_TIM_IC_CaptureCallback>
 8002b3c:	e005      	b.n	8002b4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f929 	bl	8002d96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 f93a 	bl	8002dbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d10e      	bne.n	8002b7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d107      	bne.n	8002b7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f06f 0201 	mvn.w	r2, #1
 8002b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fd fe92 	bl	80008a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b86:	2b80      	cmp	r3, #128	; 0x80
 8002b88:	d10e      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b94:	2b80      	cmp	r3, #128	; 0x80
 8002b96:	d107      	bne.n	8002ba8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 fab2 	bl	800310c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb2:	2b40      	cmp	r3, #64	; 0x40
 8002bb4:	d10e      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68db      	ldr	r3, [r3, #12]
 8002bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bc0:	2b40      	cmp	r3, #64	; 0x40
 8002bc2:	d107      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f8ff 	bl	8002dd2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	f003 0320 	and.w	r3, r3, #32
 8002bde:	2b20      	cmp	r3, #32
 8002be0:	d10e      	bne.n	8002c00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f003 0320 	and.w	r3, r3, #32
 8002bec:	2b20      	cmp	r3, #32
 8002bee:	d107      	bne.n	8002c00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f06f 0220 	mvn.w	r2, #32
 8002bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 fa7c 	bl	80030f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c00:	bf00      	nop
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b084      	sub	sp, #16
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_TIM_ConfigClockSource+0x1c>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e0b4      	b.n	8002d8e <HAL_TIM_ConfigClockSource+0x186>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2202      	movs	r2, #2
 8002c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c4a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c5c:	d03e      	beq.n	8002cdc <HAL_TIM_ConfigClockSource+0xd4>
 8002c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c62:	f200 8087 	bhi.w	8002d74 <HAL_TIM_ConfigClockSource+0x16c>
 8002c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c6a:	f000 8086 	beq.w	8002d7a <HAL_TIM_ConfigClockSource+0x172>
 8002c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c72:	d87f      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x16c>
 8002c74:	2b70      	cmp	r3, #112	; 0x70
 8002c76:	d01a      	beq.n	8002cae <HAL_TIM_ConfigClockSource+0xa6>
 8002c78:	2b70      	cmp	r3, #112	; 0x70
 8002c7a:	d87b      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x16c>
 8002c7c:	2b60      	cmp	r3, #96	; 0x60
 8002c7e:	d050      	beq.n	8002d22 <HAL_TIM_ConfigClockSource+0x11a>
 8002c80:	2b60      	cmp	r3, #96	; 0x60
 8002c82:	d877      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x16c>
 8002c84:	2b50      	cmp	r3, #80	; 0x50
 8002c86:	d03c      	beq.n	8002d02 <HAL_TIM_ConfigClockSource+0xfa>
 8002c88:	2b50      	cmp	r3, #80	; 0x50
 8002c8a:	d873      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x16c>
 8002c8c:	2b40      	cmp	r3, #64	; 0x40
 8002c8e:	d058      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0x13a>
 8002c90:	2b40      	cmp	r3, #64	; 0x40
 8002c92:	d86f      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x16c>
 8002c94:	2b30      	cmp	r3, #48	; 0x30
 8002c96:	d064      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0x15a>
 8002c98:	2b30      	cmp	r3, #48	; 0x30
 8002c9a:	d86b      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x16c>
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	d060      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0x15a>
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d867      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x16c>
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d05c      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0x15a>
 8002ca8:	2b10      	cmp	r3, #16
 8002caa:	d05a      	beq.n	8002d62 <HAL_TIM_ConfigClockSource+0x15a>
 8002cac:	e062      	b.n	8002d74 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	6899      	ldr	r1, [r3, #8]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	f000 f98d 	bl	8002fdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cd0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	609a      	str	r2, [r3, #8]
      break;
 8002cda:	e04f      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6818      	ldr	r0, [r3, #0]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	6899      	ldr	r1, [r3, #8]
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	f000 f976 	bl	8002fdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	689a      	ldr	r2, [r3, #8]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002cfe:	609a      	str	r2, [r3, #8]
      break;
 8002d00:	e03c      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	6859      	ldr	r1, [r3, #4]
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	461a      	mov	r2, r3
 8002d10:	f000 f8ea 	bl	8002ee8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2150      	movs	r1, #80	; 0x50
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 f943 	bl	8002fa6 <TIM_ITRx_SetConfig>
      break;
 8002d20:	e02c      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	6859      	ldr	r1, [r3, #4]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f000 f909 	bl	8002f46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2160      	movs	r1, #96	; 0x60
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 f933 	bl	8002fa6 <TIM_ITRx_SetConfig>
      break;
 8002d40:	e01c      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	6859      	ldr	r1, [r3, #4]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	461a      	mov	r2, r3
 8002d50:	f000 f8ca 	bl	8002ee8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2140      	movs	r1, #64	; 0x40
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 f923 	bl	8002fa6 <TIM_ITRx_SetConfig>
      break;
 8002d60:	e00c      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	f000 f91a 	bl	8002fa6 <TIM_ITRx_SetConfig>
      break;
 8002d72:	e003      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	73fb      	strb	r3, [r7, #15]
      break;
 8002d78:	e000      	b.n	8002d7c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr

08002dd2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
	...

08002de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a34      	ldr	r2, [pc, #208]	; (8002ecc <TIM_Base_SetConfig+0xe4>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d00f      	beq.n	8002e20 <TIM_Base_SetConfig+0x38>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e06:	d00b      	beq.n	8002e20 <TIM_Base_SetConfig+0x38>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a31      	ldr	r2, [pc, #196]	; (8002ed0 <TIM_Base_SetConfig+0xe8>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d007      	beq.n	8002e20 <TIM_Base_SetConfig+0x38>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a30      	ldr	r2, [pc, #192]	; (8002ed4 <TIM_Base_SetConfig+0xec>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d003      	beq.n	8002e20 <TIM_Base_SetConfig+0x38>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a2f      	ldr	r2, [pc, #188]	; (8002ed8 <TIM_Base_SetConfig+0xf0>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d108      	bne.n	8002e32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a25      	ldr	r2, [pc, #148]	; (8002ecc <TIM_Base_SetConfig+0xe4>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d01b      	beq.n	8002e72 <TIM_Base_SetConfig+0x8a>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e40:	d017      	beq.n	8002e72 <TIM_Base_SetConfig+0x8a>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a22      	ldr	r2, [pc, #136]	; (8002ed0 <TIM_Base_SetConfig+0xe8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d013      	beq.n	8002e72 <TIM_Base_SetConfig+0x8a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a21      	ldr	r2, [pc, #132]	; (8002ed4 <TIM_Base_SetConfig+0xec>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d00f      	beq.n	8002e72 <TIM_Base_SetConfig+0x8a>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a20      	ldr	r2, [pc, #128]	; (8002ed8 <TIM_Base_SetConfig+0xf0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00b      	beq.n	8002e72 <TIM_Base_SetConfig+0x8a>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a1f      	ldr	r2, [pc, #124]	; (8002edc <TIM_Base_SetConfig+0xf4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d007      	beq.n	8002e72 <TIM_Base_SetConfig+0x8a>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a1e      	ldr	r2, [pc, #120]	; (8002ee0 <TIM_Base_SetConfig+0xf8>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d003      	beq.n	8002e72 <TIM_Base_SetConfig+0x8a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a1d      	ldr	r2, [pc, #116]	; (8002ee4 <TIM_Base_SetConfig+0xfc>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d108      	bne.n	8002e84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a08      	ldr	r2, [pc, #32]	; (8002ecc <TIM_Base_SetConfig+0xe4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d103      	bne.n	8002eb8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	691a      	ldr	r2, [r3, #16]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	615a      	str	r2, [r3, #20]
}
 8002ebe:	bf00      	nop
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40010000 	.word	0x40010000
 8002ed0:	40000400 	.word	0x40000400
 8002ed4:	40000800 	.word	0x40000800
 8002ed8:	40000c00 	.word	0x40000c00
 8002edc:	40014000 	.word	0x40014000
 8002ee0:	40014400 	.word	0x40014400
 8002ee4:	40014800 	.word	0x40014800

08002ee8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b087      	sub	sp, #28
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
 8002ef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	f023 0201 	bic.w	r2, r3, #1
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f023 030a 	bic.w	r3, r3, #10
 8002f24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	621a      	str	r2, [r3, #32]
}
 8002f3a:	bf00      	nop
 8002f3c:	371c      	adds	r7, #28
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f46:	b480      	push	{r7}
 8002f48:	b087      	sub	sp, #28
 8002f4a:	af00      	add	r7, sp, #0
 8002f4c:	60f8      	str	r0, [r7, #12]
 8002f4e:	60b9      	str	r1, [r7, #8]
 8002f50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6a1b      	ldr	r3, [r3, #32]
 8002f56:	f023 0210 	bic.w	r2, r3, #16
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	031b      	lsls	r3, r3, #12
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	621a      	str	r2, [r3, #32]
}
 8002f9a:	bf00      	nop
 8002f9c:	371c      	adds	r7, #28
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr

08002fa6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	b085      	sub	sp, #20
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	f043 0307 	orr.w	r3, r3, #7
 8002fc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	609a      	str	r2, [r3, #8]
}
 8002fd0:	bf00      	nop
 8002fd2:	3714      	adds	r7, #20
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b087      	sub	sp, #28
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ff6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	021a      	lsls	r2, r3, #8
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	431a      	orrs	r2, r3
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	4313      	orrs	r3, r2
 8003004:	697a      	ldr	r2, [r7, #20]
 8003006:	4313      	orrs	r3, r2
 8003008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	609a      	str	r2, [r3, #8]
}
 8003010:	bf00      	nop
 8003012:	371c      	adds	r7, #28
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800301c:	b480      	push	{r7}
 800301e:	b085      	sub	sp, #20
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003030:	2302      	movs	r3, #2
 8003032:	e050      	b.n	80030d6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2202      	movs	r2, #2
 8003040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68fa      	ldr	r2, [r7, #12]
 8003062:	4313      	orrs	r3, r2
 8003064:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a1c      	ldr	r2, [pc, #112]	; (80030e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d018      	beq.n	80030aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003080:	d013      	beq.n	80030aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a18      	ldr	r2, [pc, #96]	; (80030e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d00e      	beq.n	80030aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a16      	ldr	r2, [pc, #88]	; (80030ec <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d009      	beq.n	80030aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a15      	ldr	r2, [pc, #84]	; (80030f0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d004      	beq.n	80030aa <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a13      	ldr	r2, [pc, #76]	; (80030f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d10c      	bne.n	80030c4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030b0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40010000 	.word	0x40010000
 80030e8:	40000400 	.word	0x40000400
 80030ec:	40000800 	.word	0x40000800
 80030f0:	40000c00 	.word	0x40000c00
 80030f4:	40014000 	.word	0x40014000

080030f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b082      	sub	sp, #8
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e03f      	b.n	80031b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d106      	bne.n	800314c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f7fd fe3c 	bl	8000dc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2224      	movs	r2, #36	; 0x24
 8003150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003162:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 fe81 	bl	8003e6c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003178:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695a      	ldr	r2, [r3, #20]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003188:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003198:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3708      	adds	r7, #8
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b08a      	sub	sp, #40	; 0x28
 80031be:	af02      	add	r7, sp, #8
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	603b      	str	r3, [r7, #0]
 80031c6:	4613      	mov	r3, r2
 80031c8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b20      	cmp	r3, #32
 80031d8:	d17c      	bne.n	80032d4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d002      	beq.n	80031e6 <HAL_UART_Transmit+0x2c>
 80031e0:	88fb      	ldrh	r3, [r7, #6]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e075      	b.n	80032d6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_UART_Transmit+0x3e>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e06e      	b.n	80032d6 <HAL_UART_Transmit+0x11c>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2221      	movs	r2, #33	; 0x21
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800320e:	f7fe f859 	bl	80012c4 <HAL_GetTick>
 8003212:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	88fa      	ldrh	r2, [r7, #6]
 8003218:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	88fa      	ldrh	r2, [r7, #6]
 800321e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003228:	d108      	bne.n	800323c <HAL_UART_Transmit+0x82>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d104      	bne.n	800323c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003232:	2300      	movs	r3, #0
 8003234:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	61bb      	str	r3, [r7, #24]
 800323a:	e003      	b.n	8003244 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003240:	2300      	movs	r3, #0
 8003242:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800324c:	e02a      	b.n	80032a4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	2200      	movs	r2, #0
 8003256:	2180      	movs	r1, #128	; 0x80
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 fbc1 	bl	80039e0 <UART_WaitOnFlagUntilTimeout>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003264:	2303      	movs	r3, #3
 8003266:	e036      	b.n	80032d6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d10b      	bne.n	8003286 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	461a      	mov	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800327c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	3302      	adds	r3, #2
 8003282:	61bb      	str	r3, [r7, #24]
 8003284:	e007      	b.n	8003296 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	781a      	ldrb	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	3301      	adds	r3, #1
 8003294:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800329a:	b29b      	uxth	r3, r3
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1cf      	bne.n	800324e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	9300      	str	r3, [sp, #0]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2200      	movs	r2, #0
 80032b6:	2140      	movs	r1, #64	; 0x40
 80032b8:	68f8      	ldr	r0, [r7, #12]
 80032ba:	f000 fb91 	bl	80039e0 <UART_WaitOnFlagUntilTimeout>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d001      	beq.n	80032c8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80032c4:	2303      	movs	r3, #3
 80032c6:	e006      	b.n	80032d6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	e000      	b.n	80032d6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80032d4:	2302      	movs	r3, #2
  }
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3720      	adds	r7, #32
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b08a      	sub	sp, #40	; 0x28
 80032e2:	af02      	add	r7, sp, #8
 80032e4:	60f8      	str	r0, [r7, #12]
 80032e6:	60b9      	str	r1, [r7, #8]
 80032e8:	603b      	str	r3, [r7, #0]
 80032ea:	4613      	mov	r3, r2
 80032ec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b20      	cmp	r3, #32
 80032fc:	f040 808c 	bne.w	8003418 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <HAL_UART_Receive+0x2e>
 8003306:	88fb      	ldrh	r3, [r7, #6]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e084      	b.n	800341a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003316:	2b01      	cmp	r3, #1
 8003318:	d101      	bne.n	800331e <HAL_UART_Receive+0x40>
 800331a:	2302      	movs	r3, #2
 800331c:	e07d      	b.n	800341a <HAL_UART_Receive+0x13c>
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2222      	movs	r2, #34	; 0x22
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800333a:	f7fd ffc3 	bl	80012c4 <HAL_GetTick>
 800333e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	88fa      	ldrh	r2, [r7, #6]
 8003344:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	88fa      	ldrh	r2, [r7, #6]
 800334a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003354:	d108      	bne.n	8003368 <HAL_UART_Receive+0x8a>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d104      	bne.n	8003368 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800335e:	2300      	movs	r3, #0
 8003360:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	61bb      	str	r3, [r7, #24]
 8003366:	e003      	b.n	8003370 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800336c:	2300      	movs	r3, #0
 800336e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003378:	e043      	b.n	8003402 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2200      	movs	r2, #0
 8003382:	2120      	movs	r1, #32
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 fb2b 	bl	80039e0 <UART_WaitOnFlagUntilTimeout>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e042      	b.n	800341a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10c      	bne.n	80033b4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a6:	b29a      	uxth	r2, r3
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	3302      	adds	r3, #2
 80033b0:	61bb      	str	r3, [r7, #24]
 80033b2:	e01f      	b.n	80033f4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033bc:	d007      	beq.n	80033ce <HAL_UART_Receive+0xf0>
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10a      	bne.n	80033dc <HAL_UART_Receive+0xfe>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d106      	bne.n	80033dc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	b2da      	uxtb	r2, r3
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	701a      	strb	r2, [r3, #0]
 80033da:	e008      	b.n	80033ee <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	3301      	adds	r3, #1
 80033f2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29a      	uxth	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003406:	b29b      	uxth	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1b6      	bne.n	800337a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8003414:	2300      	movs	r3, #0
 8003416:	e000      	b.n	800341a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8003418:	2302      	movs	r3, #2
  }
}
 800341a:	4618      	mov	r0, r3
 800341c:	3720      	adds	r7, #32
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b084      	sub	sp, #16
 8003426:	af00      	add	r7, sp, #0
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	4613      	mov	r3, r2
 800342e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b20      	cmp	r3, #32
 800343a:	d11d      	bne.n	8003478 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d002      	beq.n	8003448 <HAL_UART_Receive_IT+0x26>
 8003442:	88fb      	ldrh	r3, [r7, #6]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e016      	b.n	800347a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003452:	2b01      	cmp	r3, #1
 8003454:	d101      	bne.n	800345a <HAL_UART_Receive_IT+0x38>
 8003456:	2302      	movs	r3, #2
 8003458:	e00f      	b.n	800347a <HAL_UART_Receive_IT+0x58>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	2201      	movs	r2, #1
 800345e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2200      	movs	r2, #0
 8003466:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003468:	88fb      	ldrh	r3, [r7, #6]
 800346a:	461a      	mov	r2, r3
 800346c:	68b9      	ldr	r1, [r7, #8]
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 fb24 	bl	8003abc <UART_Start_Receive_IT>
 8003474:	4603      	mov	r3, r0
 8003476:	e000      	b.n	800347a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003478:	2302      	movs	r3, #2
  }
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
	...

08003484 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b0ba      	sub	sp, #232	; 0xe8
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80034b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ba:	f003 030f 	and.w	r3, r3, #15
 80034be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80034c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10f      	bne.n	80034ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80034ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d009      	beq.n	80034ea <HAL_UART_IRQHandler+0x66>
 80034d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fc07 	bl	8003cf6 <UART_Receive_IT>
      return;
 80034e8:	e256      	b.n	8003998 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80034ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 80de 	beq.w	80036b0 <HAL_UART_IRQHandler+0x22c>
 80034f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034f8:	f003 0301 	and.w	r3, r3, #1
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d106      	bne.n	800350e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003504:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003508:	2b00      	cmp	r3, #0
 800350a:	f000 80d1 	beq.w	80036b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800350e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00b      	beq.n	8003532 <HAL_UART_IRQHandler+0xae>
 800351a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800351e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003522:	2b00      	cmp	r3, #0
 8003524:	d005      	beq.n	8003532 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f043 0201 	orr.w	r2, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00b      	beq.n	8003556 <HAL_UART_IRQHandler+0xd2>
 800353e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d005      	beq.n	8003556 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354e:	f043 0202 	orr.w	r2, r3, #2
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800355a:	f003 0302 	and.w	r3, r3, #2
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00b      	beq.n	800357a <HAL_UART_IRQHandler+0xf6>
 8003562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d005      	beq.n	800357a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	f043 0204 	orr.w	r2, r3, #4
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800357a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d011      	beq.n	80035aa <HAL_UART_IRQHandler+0x126>
 8003586:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800358a:	f003 0320 	and.w	r3, r3, #32
 800358e:	2b00      	cmp	r3, #0
 8003590:	d105      	bne.n	800359e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003596:	f003 0301 	and.w	r3, r3, #1
 800359a:	2b00      	cmp	r3, #0
 800359c:	d005      	beq.n	80035aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a2:	f043 0208 	orr.w	r2, r3, #8
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 81ed 	beq.w	800398e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d008      	beq.n	80035d2 <HAL_UART_IRQHandler+0x14e>
 80035c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035c4:	f003 0320 	and.w	r3, r3, #32
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	f000 fb92 	bl	8003cf6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035dc:	2b40      	cmp	r3, #64	; 0x40
 80035de:	bf0c      	ite	eq
 80035e0:	2301      	moveq	r3, #1
 80035e2:	2300      	movne	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d103      	bne.n	80035fe <HAL_UART_IRQHandler+0x17a>
 80035f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d04f      	beq.n	800369e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 fa9a 	bl	8003b38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360e:	2b40      	cmp	r3, #64	; 0x40
 8003610:	d141      	bne.n	8003696 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	3314      	adds	r3, #20
 8003618:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003620:	e853 3f00 	ldrex	r3, [r3]
 8003624:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003628:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800362c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003630:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	3314      	adds	r3, #20
 800363a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800363e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003642:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003646:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800364a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800364e:	e841 2300 	strex	r3, r2, [r1]
 8003652:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003656:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1d9      	bne.n	8003612 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003662:	2b00      	cmp	r3, #0
 8003664:	d013      	beq.n	800368e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366a:	4a7d      	ldr	r2, [pc, #500]	; (8003860 <HAL_UART_IRQHandler+0x3dc>)
 800366c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003672:	4618      	mov	r0, r3
 8003674:	f7fe f862 	bl	800173c <HAL_DMA_Abort_IT>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d016      	beq.n	80036ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003688:	4610      	mov	r0, r2
 800368a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800368c:	e00e      	b.n	80036ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f990 	bl	80039b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003694:	e00a      	b.n	80036ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 f98c 	bl	80039b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800369c:	e006      	b.n	80036ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f988 	bl	80039b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80036aa:	e170      	b.n	800398e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ac:	bf00      	nop
    return;
 80036ae:	e16e      	b.n	800398e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	f040 814a 	bne.w	800394e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80036ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036be:	f003 0310 	and.w	r3, r3, #16
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	f000 8143 	beq.w	800394e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80036c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036cc:	f003 0310 	and.w	r3, r3, #16
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	f000 813c 	beq.w	800394e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036d6:	2300      	movs	r3, #0
 80036d8:	60bb      	str	r3, [r7, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	60bb      	str	r3, [r7, #8]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	60bb      	str	r3, [r7, #8]
 80036ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f6:	2b40      	cmp	r3, #64	; 0x40
 80036f8:	f040 80b4 	bne.w	8003864 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003708:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 8140 	beq.w	8003992 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003716:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800371a:	429a      	cmp	r2, r3
 800371c:	f080 8139 	bcs.w	8003992 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003726:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003732:	f000 8088 	beq.w	8003846 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	330c      	adds	r3, #12
 800373c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003740:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003744:	e853 3f00 	ldrex	r3, [r3]
 8003748:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800374c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003754:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	330c      	adds	r3, #12
 800375e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003762:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003766:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800376e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003772:	e841 2300 	strex	r3, r2, [r1]
 8003776:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800377a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1d9      	bne.n	8003736 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3314      	adds	r3, #20
 8003788:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800378c:	e853 3f00 	ldrex	r3, [r3]
 8003790:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003792:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003794:	f023 0301 	bic.w	r3, r3, #1
 8003798:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3314      	adds	r3, #20
 80037a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80037aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80037ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037b2:	e841 2300 	strex	r3, r2, [r1]
 80037b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80037b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1e1      	bne.n	8003782 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	3314      	adds	r3, #20
 80037c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037c8:	e853 3f00 	ldrex	r3, [r3]
 80037cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80037ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3314      	adds	r3, #20
 80037de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80037e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80037e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037ea:	e841 2300 	strex	r3, r2, [r1]
 80037ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80037f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1e3      	bne.n	80037be <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	330c      	adds	r3, #12
 800380a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800380c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800380e:	e853 3f00 	ldrex	r3, [r3]
 8003812:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003814:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003816:	f023 0310 	bic.w	r3, r3, #16
 800381a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	330c      	adds	r3, #12
 8003824:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003828:	65ba      	str	r2, [r7, #88]	; 0x58
 800382a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800382c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800382e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003830:	e841 2300 	strex	r3, r2, [r1]
 8003834:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1e3      	bne.n	8003804 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003840:	4618      	mov	r0, r3
 8003842:	f7fd ff0b 	bl	800165c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800384e:	b29b      	uxth	r3, r3
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	b29b      	uxth	r3, r3
 8003854:	4619      	mov	r1, r3
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f8b6 	bl	80039c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800385c:	e099      	b.n	8003992 <HAL_UART_IRQHandler+0x50e>
 800385e:	bf00      	nop
 8003860:	08003bff 	.word	0x08003bff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800386c:	b29b      	uxth	r3, r3
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 808b 	beq.w	8003996 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003880:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 8086 	beq.w	8003996 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	330c      	adds	r3, #12
 8003890:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003894:	e853 3f00 	ldrex	r3, [r3]
 8003898:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800389a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	330c      	adds	r3, #12
 80038aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80038ae:	647a      	str	r2, [r7, #68]	; 0x44
 80038b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038b6:	e841 2300 	strex	r3, r2, [r1]
 80038ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1e3      	bne.n	800388a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3314      	adds	r3, #20
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038cc:	e853 3f00 	ldrex	r3, [r3]
 80038d0:	623b      	str	r3, [r7, #32]
   return(result);
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	f023 0301 	bic.w	r3, r3, #1
 80038d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3314      	adds	r3, #20
 80038e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038e6:	633a      	str	r2, [r7, #48]	; 0x30
 80038e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ee:	e841 2300 	strex	r3, r2, [r1]
 80038f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d1e3      	bne.n	80038c2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2220      	movs	r2, #32
 80038fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	330c      	adds	r3, #12
 800390e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	e853 3f00 	ldrex	r3, [r3]
 8003916:	60fb      	str	r3, [r7, #12]
   return(result);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 0310 	bic.w	r3, r3, #16
 800391e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	330c      	adds	r3, #12
 8003928:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800392c:	61fa      	str	r2, [r7, #28]
 800392e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003930:	69b9      	ldr	r1, [r7, #24]
 8003932:	69fa      	ldr	r2, [r7, #28]
 8003934:	e841 2300 	strex	r3, r2, [r1]
 8003938:	617b      	str	r3, [r7, #20]
   return(result);
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e3      	bne.n	8003908 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003940:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003944:	4619      	mov	r1, r3
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f83e 	bl	80039c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800394c:	e023      	b.n	8003996 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800394e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003956:	2b00      	cmp	r3, #0
 8003958:	d009      	beq.n	800396e <HAL_UART_IRQHandler+0x4ea>
 800395a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800395e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f95d 	bl	8003c26 <UART_Transmit_IT>
    return;
 800396c:	e014      	b.n	8003998 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800396e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003976:	2b00      	cmp	r3, #0
 8003978:	d00e      	beq.n	8003998 <HAL_UART_IRQHandler+0x514>
 800397a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800397e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	d008      	beq.n	8003998 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 f99d 	bl	8003cc6 <UART_EndTransmit_IT>
    return;
 800398c:	e004      	b.n	8003998 <HAL_UART_IRQHandler+0x514>
    return;
 800398e:	bf00      	nop
 8003990:	e002      	b.n	8003998 <HAL_UART_IRQHandler+0x514>
      return;
 8003992:	bf00      	nop
 8003994:	e000      	b.n	8003998 <HAL_UART_IRQHandler+0x514>
      return;
 8003996:	bf00      	nop
  }
}
 8003998:	37e8      	adds	r7, #232	; 0xe8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop

080039a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80039a8:	bf00      	nop
 80039aa:	370c      	adds	r7, #12
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr

080039b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b090      	sub	sp, #64	; 0x40
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	603b      	str	r3, [r7, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039f0:	e050      	b.n	8003a94 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f8:	d04c      	beq.n	8003a94 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d007      	beq.n	8003a10 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a00:	f7fd fc60 	bl	80012c4 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d241      	bcs.n	8003a94 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	330c      	adds	r3, #12
 8003a16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1a:	e853 3f00 	ldrex	r3, [r3]
 8003a1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	330c      	adds	r3, #12
 8003a2e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a30:	637a      	str	r2, [r7, #52]	; 0x34
 8003a32:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a38:	e841 2300 	strex	r3, r2, [r1]
 8003a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d1e5      	bne.n	8003a10 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3314      	adds	r3, #20
 8003a4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	e853 3f00 	ldrex	r3, [r3]
 8003a52:	613b      	str	r3, [r7, #16]
   return(result);
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f023 0301 	bic.w	r3, r3, #1
 8003a5a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3314      	adds	r3, #20
 8003a62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a64:	623a      	str	r2, [r7, #32]
 8003a66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a68:	69f9      	ldr	r1, [r7, #28]
 8003a6a:	6a3a      	ldr	r2, [r7, #32]
 8003a6c:	e841 2300 	strex	r3, r2, [r1]
 8003a70:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1e5      	bne.n	8003a44 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e00f      	b.n	8003ab4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	68ba      	ldr	r2, [r7, #8]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	bf0c      	ite	eq
 8003aa4:	2301      	moveq	r3, #1
 8003aa6:	2300      	movne	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	461a      	mov	r2, r3
 8003aac:	79fb      	ldrb	r3, [r7, #7]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d09f      	beq.n	80039f2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3740      	adds	r7, #64	; 0x40
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	4613      	mov	r3, r2
 8003ac8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	68ba      	ldr	r2, [r7, #8]
 8003ace:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	88fa      	ldrh	r2, [r7, #6]
 8003ad4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	88fa      	ldrh	r2, [r7, #6]
 8003ada:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2222      	movs	r2, #34	; 0x22
 8003ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d007      	beq.n	8003b0a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68da      	ldr	r2, [r3, #12]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b08:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695a      	ldr	r2, [r3, #20]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0201 	orr.w	r2, r2, #1
 8003b18:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f042 0220 	orr.w	r2, r2, #32
 8003b28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b095      	sub	sp, #84	; 0x54
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	330c      	adds	r3, #12
 8003b46:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b4a:	e853 3f00 	ldrex	r3, [r3]
 8003b4e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b52:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	330c      	adds	r3, #12
 8003b5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b60:	643a      	str	r2, [r7, #64]	; 0x40
 8003b62:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003b66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003b68:	e841 2300 	strex	r3, r2, [r1]
 8003b6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1e5      	bne.n	8003b40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3314      	adds	r3, #20
 8003b7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b7c:	6a3b      	ldr	r3, [r7, #32]
 8003b7e:	e853 3f00 	ldrex	r3, [r3]
 8003b82:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	f023 0301 	bic.w	r3, r3, #1
 8003b8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3314      	adds	r3, #20
 8003b92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b9c:	e841 2300 	strex	r3, r2, [r1]
 8003ba0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d1e5      	bne.n	8003b74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	2b01      	cmp	r3, #1
 8003bae:	d119      	bne.n	8003be4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	330c      	adds	r3, #12
 8003bb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	e853 3f00 	ldrex	r3, [r3]
 8003bbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	f023 0310 	bic.w	r3, r3, #16
 8003bc6:	647b      	str	r3, [r7, #68]	; 0x44
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	330c      	adds	r3, #12
 8003bce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003bd0:	61ba      	str	r2, [r7, #24]
 8003bd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bd4:	6979      	ldr	r1, [r7, #20]
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	e841 2300 	strex	r3, r2, [r1]
 8003bdc:	613b      	str	r3, [r7, #16]
   return(result);
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1e5      	bne.n	8003bb0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003bf2:	bf00      	nop
 8003bf4:	3754      	adds	r7, #84	; 0x54
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bfe:	b580      	push	{r7, lr}
 8003c00:	b084      	sub	sp, #16
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f7ff fecb 	bl	80039b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c1e:	bf00      	nop
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b085      	sub	sp, #20
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b21      	cmp	r3, #33	; 0x21
 8003c38:	d13e      	bne.n	8003cb8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c42:	d114      	bne.n	8003c6e <UART_Transmit_IT+0x48>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d110      	bne.n	8003c6e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	881b      	ldrh	r3, [r3, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	1c9a      	adds	r2, r3, #2
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	621a      	str	r2, [r3, #32]
 8003c6c:	e008      	b.n	8003c80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	1c59      	adds	r1, r3, #1
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6211      	str	r1, [r2, #32]
 8003c78:	781a      	ldrb	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	3b01      	subs	r3, #1
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d10f      	bne.n	8003cb4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ca2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68da      	ldr	r2, [r3, #12]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cb2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	e000      	b.n	8003cba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003cb8:	2302      	movs	r3, #2
  }
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003cc6:	b580      	push	{r7, lr}
 8003cc8:	b082      	sub	sp, #8
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cdc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f7ff fe5a 	bl	80039a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3708      	adds	r7, #8
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b08c      	sub	sp, #48	; 0x30
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b22      	cmp	r3, #34	; 0x22
 8003d08:	f040 80ab 	bne.w	8003e62 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d14:	d117      	bne.n	8003d46 <UART_Receive_IT+0x50>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d113      	bne.n	8003d46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d26:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d3e:	1c9a      	adds	r2, r3, #2
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	629a      	str	r2, [r3, #40]	; 0x28
 8003d44:	e026      	b.n	8003d94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d58:	d007      	beq.n	8003d6a <UART_Receive_IT+0x74>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10a      	bne.n	8003d78 <UART_Receive_IT+0x82>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d106      	bne.n	8003d78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	b2da      	uxtb	r2, r3
 8003d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	e008      	b.n	8003d8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d84:	b2da      	uxtb	r2, r3
 8003d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	4619      	mov	r1, r3
 8003da2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d15a      	bne.n	8003e5e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68da      	ldr	r2, [r3, #12]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0220 	bic.w	r2, r2, #32
 8003db6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68da      	ldr	r2, [r3, #12]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695a      	ldr	r2, [r3, #20]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f022 0201 	bic.w	r2, r2, #1
 8003dd6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d135      	bne.n	8003e54 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	330c      	adds	r3, #12
 8003df4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	e853 3f00 	ldrex	r3, [r3]
 8003dfc:	613b      	str	r3, [r7, #16]
   return(result);
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f023 0310 	bic.w	r3, r3, #16
 8003e04:	627b      	str	r3, [r7, #36]	; 0x24
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	330c      	adds	r3, #12
 8003e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e0e:	623a      	str	r2, [r7, #32]
 8003e10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e12:	69f9      	ldr	r1, [r7, #28]
 8003e14:	6a3a      	ldr	r2, [r7, #32]
 8003e16:	e841 2300 	strex	r3, r2, [r1]
 8003e1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1e5      	bne.n	8003dee <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0310 	and.w	r3, r3, #16
 8003e2c:	2b10      	cmp	r3, #16
 8003e2e:	d10a      	bne.n	8003e46 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e30:	2300      	movs	r3, #0
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	60fb      	str	r3, [r7, #12]
 8003e44:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003e4a:	4619      	mov	r1, r3
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff fdbb 	bl	80039c8 <HAL_UARTEx_RxEventCallback>
 8003e52:	e002      	b.n	8003e5a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7fc fc6b 	bl	8000730 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	e002      	b.n	8003e64 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e000      	b.n	8003e64 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003e62:	2302      	movs	r3, #2
  }
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3730      	adds	r7, #48	; 0x30
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e70:	b0c0      	sub	sp, #256	; 0x100
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e88:	68d9      	ldr	r1, [r3, #12]
 8003e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	ea40 0301 	orr.w	r3, r0, r1
 8003e94:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e9a:	689a      	ldr	r2, [r3, #8]
 8003e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	431a      	orrs	r2, r3
 8003ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	431a      	orrs	r2, r3
 8003eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003ec4:	f021 010c 	bic.w	r1, r1, #12
 8003ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003ed2:	430b      	orrs	r3, r1
 8003ed4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	695b      	ldr	r3, [r3, #20]
 8003ede:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee6:	6999      	ldr	r1, [r3, #24]
 8003ee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	ea40 0301 	orr.w	r3, r0, r1
 8003ef2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	4b8f      	ldr	r3, [pc, #572]	; (8004138 <UART_SetConfig+0x2cc>)
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d005      	beq.n	8003f0c <UART_SetConfig+0xa0>
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	4b8d      	ldr	r3, [pc, #564]	; (800413c <UART_SetConfig+0x2d0>)
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d104      	bne.n	8003f16 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f0c:	f7fe fcae 	bl	800286c <HAL_RCC_GetPCLK2Freq>
 8003f10:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f14:	e003      	b.n	8003f1e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f16:	f7fe fc95 	bl	8002844 <HAL_RCC_GetPCLK1Freq>
 8003f1a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f22:	69db      	ldr	r3, [r3, #28]
 8003f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f28:	f040 810c 	bne.w	8004144 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f30:	2200      	movs	r2, #0
 8003f32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f36:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f3a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f3e:	4622      	mov	r2, r4
 8003f40:	462b      	mov	r3, r5
 8003f42:	1891      	adds	r1, r2, r2
 8003f44:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f46:	415b      	adcs	r3, r3
 8003f48:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f4a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f4e:	4621      	mov	r1, r4
 8003f50:	eb12 0801 	adds.w	r8, r2, r1
 8003f54:	4629      	mov	r1, r5
 8003f56:	eb43 0901 	adc.w	r9, r3, r1
 8003f5a:	f04f 0200 	mov.w	r2, #0
 8003f5e:	f04f 0300 	mov.w	r3, #0
 8003f62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f6e:	4690      	mov	r8, r2
 8003f70:	4699      	mov	r9, r3
 8003f72:	4623      	mov	r3, r4
 8003f74:	eb18 0303 	adds.w	r3, r8, r3
 8003f78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f7c:	462b      	mov	r3, r5
 8003f7e:	eb49 0303 	adc.w	r3, r9, r3
 8003f82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f92:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	18db      	adds	r3, r3, r3
 8003f9e:	653b      	str	r3, [r7, #80]	; 0x50
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	eb42 0303 	adc.w	r3, r2, r3
 8003fa6:	657b      	str	r3, [r7, #84]	; 0x54
 8003fa8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003fac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003fb0:	f7fc f96e 	bl	8000290 <__aeabi_uldivmod>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4b61      	ldr	r3, [pc, #388]	; (8004140 <UART_SetConfig+0x2d4>)
 8003fba:	fba3 2302 	umull	r2, r3, r3, r2
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	011c      	lsls	r4, r3, #4
 8003fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003fcc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003fd0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003fd4:	4642      	mov	r2, r8
 8003fd6:	464b      	mov	r3, r9
 8003fd8:	1891      	adds	r1, r2, r2
 8003fda:	64b9      	str	r1, [r7, #72]	; 0x48
 8003fdc:	415b      	adcs	r3, r3
 8003fde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fe0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003fe4:	4641      	mov	r1, r8
 8003fe6:	eb12 0a01 	adds.w	sl, r2, r1
 8003fea:	4649      	mov	r1, r9
 8003fec:	eb43 0b01 	adc.w	fp, r3, r1
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	f04f 0300 	mov.w	r3, #0
 8003ff8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ffc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004000:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004004:	4692      	mov	sl, r2
 8004006:	469b      	mov	fp, r3
 8004008:	4643      	mov	r3, r8
 800400a:	eb1a 0303 	adds.w	r3, sl, r3
 800400e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004012:	464b      	mov	r3, r9
 8004014:	eb4b 0303 	adc.w	r3, fp, r3
 8004018:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800401c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004028:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800402c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004030:	460b      	mov	r3, r1
 8004032:	18db      	adds	r3, r3, r3
 8004034:	643b      	str	r3, [r7, #64]	; 0x40
 8004036:	4613      	mov	r3, r2
 8004038:	eb42 0303 	adc.w	r3, r2, r3
 800403c:	647b      	str	r3, [r7, #68]	; 0x44
 800403e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004042:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004046:	f7fc f923 	bl	8000290 <__aeabi_uldivmod>
 800404a:	4602      	mov	r2, r0
 800404c:	460b      	mov	r3, r1
 800404e:	4611      	mov	r1, r2
 8004050:	4b3b      	ldr	r3, [pc, #236]	; (8004140 <UART_SetConfig+0x2d4>)
 8004052:	fba3 2301 	umull	r2, r3, r3, r1
 8004056:	095b      	lsrs	r3, r3, #5
 8004058:	2264      	movs	r2, #100	; 0x64
 800405a:	fb02 f303 	mul.w	r3, r2, r3
 800405e:	1acb      	subs	r3, r1, r3
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004066:	4b36      	ldr	r3, [pc, #216]	; (8004140 <UART_SetConfig+0x2d4>)
 8004068:	fba3 2302 	umull	r2, r3, r3, r2
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	005b      	lsls	r3, r3, #1
 8004070:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004074:	441c      	add	r4, r3
 8004076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800407a:	2200      	movs	r2, #0
 800407c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004080:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004084:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004088:	4642      	mov	r2, r8
 800408a:	464b      	mov	r3, r9
 800408c:	1891      	adds	r1, r2, r2
 800408e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004090:	415b      	adcs	r3, r3
 8004092:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004094:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004098:	4641      	mov	r1, r8
 800409a:	1851      	adds	r1, r2, r1
 800409c:	6339      	str	r1, [r7, #48]	; 0x30
 800409e:	4649      	mov	r1, r9
 80040a0:	414b      	adcs	r3, r1
 80040a2:	637b      	str	r3, [r7, #52]	; 0x34
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	f04f 0300 	mov.w	r3, #0
 80040ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80040b0:	4659      	mov	r1, fp
 80040b2:	00cb      	lsls	r3, r1, #3
 80040b4:	4651      	mov	r1, sl
 80040b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ba:	4651      	mov	r1, sl
 80040bc:	00ca      	lsls	r2, r1, #3
 80040be:	4610      	mov	r0, r2
 80040c0:	4619      	mov	r1, r3
 80040c2:	4603      	mov	r3, r0
 80040c4:	4642      	mov	r2, r8
 80040c6:	189b      	adds	r3, r3, r2
 80040c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040cc:	464b      	mov	r3, r9
 80040ce:	460a      	mov	r2, r1
 80040d0:	eb42 0303 	adc.w	r3, r2, r3
 80040d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80040e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040ec:	460b      	mov	r3, r1
 80040ee:	18db      	adds	r3, r3, r3
 80040f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80040f2:	4613      	mov	r3, r2
 80040f4:	eb42 0303 	adc.w	r3, r2, r3
 80040f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004102:	f7fc f8c5 	bl	8000290 <__aeabi_uldivmod>
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	4b0d      	ldr	r3, [pc, #52]	; (8004140 <UART_SetConfig+0x2d4>)
 800410c:	fba3 1302 	umull	r1, r3, r3, r2
 8004110:	095b      	lsrs	r3, r3, #5
 8004112:	2164      	movs	r1, #100	; 0x64
 8004114:	fb01 f303 	mul.w	r3, r1, r3
 8004118:	1ad3      	subs	r3, r2, r3
 800411a:	00db      	lsls	r3, r3, #3
 800411c:	3332      	adds	r3, #50	; 0x32
 800411e:	4a08      	ldr	r2, [pc, #32]	; (8004140 <UART_SetConfig+0x2d4>)
 8004120:	fba2 2303 	umull	r2, r3, r2, r3
 8004124:	095b      	lsrs	r3, r3, #5
 8004126:	f003 0207 	and.w	r2, r3, #7
 800412a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4422      	add	r2, r4
 8004132:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004134:	e106      	b.n	8004344 <UART_SetConfig+0x4d8>
 8004136:	bf00      	nop
 8004138:	40011000 	.word	0x40011000
 800413c:	40011400 	.word	0x40011400
 8004140:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004144:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004148:	2200      	movs	r2, #0
 800414a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800414e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004152:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004156:	4642      	mov	r2, r8
 8004158:	464b      	mov	r3, r9
 800415a:	1891      	adds	r1, r2, r2
 800415c:	6239      	str	r1, [r7, #32]
 800415e:	415b      	adcs	r3, r3
 8004160:	627b      	str	r3, [r7, #36]	; 0x24
 8004162:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004166:	4641      	mov	r1, r8
 8004168:	1854      	adds	r4, r2, r1
 800416a:	4649      	mov	r1, r9
 800416c:	eb43 0501 	adc.w	r5, r3, r1
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	f04f 0300 	mov.w	r3, #0
 8004178:	00eb      	lsls	r3, r5, #3
 800417a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800417e:	00e2      	lsls	r2, r4, #3
 8004180:	4614      	mov	r4, r2
 8004182:	461d      	mov	r5, r3
 8004184:	4643      	mov	r3, r8
 8004186:	18e3      	adds	r3, r4, r3
 8004188:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800418c:	464b      	mov	r3, r9
 800418e:	eb45 0303 	adc.w	r3, r5, r3
 8004192:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80041b2:	4629      	mov	r1, r5
 80041b4:	008b      	lsls	r3, r1, #2
 80041b6:	4621      	mov	r1, r4
 80041b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041bc:	4621      	mov	r1, r4
 80041be:	008a      	lsls	r2, r1, #2
 80041c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80041c4:	f7fc f864 	bl	8000290 <__aeabi_uldivmod>
 80041c8:	4602      	mov	r2, r0
 80041ca:	460b      	mov	r3, r1
 80041cc:	4b60      	ldr	r3, [pc, #384]	; (8004350 <UART_SetConfig+0x4e4>)
 80041ce:	fba3 2302 	umull	r2, r3, r3, r2
 80041d2:	095b      	lsrs	r3, r3, #5
 80041d4:	011c      	lsls	r4, r3, #4
 80041d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041da:	2200      	movs	r2, #0
 80041dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80041e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80041e8:	4642      	mov	r2, r8
 80041ea:	464b      	mov	r3, r9
 80041ec:	1891      	adds	r1, r2, r2
 80041ee:	61b9      	str	r1, [r7, #24]
 80041f0:	415b      	adcs	r3, r3
 80041f2:	61fb      	str	r3, [r7, #28]
 80041f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041f8:	4641      	mov	r1, r8
 80041fa:	1851      	adds	r1, r2, r1
 80041fc:	6139      	str	r1, [r7, #16]
 80041fe:	4649      	mov	r1, r9
 8004200:	414b      	adcs	r3, r1
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004210:	4659      	mov	r1, fp
 8004212:	00cb      	lsls	r3, r1, #3
 8004214:	4651      	mov	r1, sl
 8004216:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800421a:	4651      	mov	r1, sl
 800421c:	00ca      	lsls	r2, r1, #3
 800421e:	4610      	mov	r0, r2
 8004220:	4619      	mov	r1, r3
 8004222:	4603      	mov	r3, r0
 8004224:	4642      	mov	r2, r8
 8004226:	189b      	adds	r3, r3, r2
 8004228:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800422c:	464b      	mov	r3, r9
 800422e:	460a      	mov	r2, r1
 8004230:	eb42 0303 	adc.w	r3, r2, r3
 8004234:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	67bb      	str	r3, [r7, #120]	; 0x78
 8004242:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004244:	f04f 0200 	mov.w	r2, #0
 8004248:	f04f 0300 	mov.w	r3, #0
 800424c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004250:	4649      	mov	r1, r9
 8004252:	008b      	lsls	r3, r1, #2
 8004254:	4641      	mov	r1, r8
 8004256:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800425a:	4641      	mov	r1, r8
 800425c:	008a      	lsls	r2, r1, #2
 800425e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004262:	f7fc f815 	bl	8000290 <__aeabi_uldivmod>
 8004266:	4602      	mov	r2, r0
 8004268:	460b      	mov	r3, r1
 800426a:	4611      	mov	r1, r2
 800426c:	4b38      	ldr	r3, [pc, #224]	; (8004350 <UART_SetConfig+0x4e4>)
 800426e:	fba3 2301 	umull	r2, r3, r3, r1
 8004272:	095b      	lsrs	r3, r3, #5
 8004274:	2264      	movs	r2, #100	; 0x64
 8004276:	fb02 f303 	mul.w	r3, r2, r3
 800427a:	1acb      	subs	r3, r1, r3
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	3332      	adds	r3, #50	; 0x32
 8004280:	4a33      	ldr	r2, [pc, #204]	; (8004350 <UART_SetConfig+0x4e4>)
 8004282:	fba2 2303 	umull	r2, r3, r2, r3
 8004286:	095b      	lsrs	r3, r3, #5
 8004288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800428c:	441c      	add	r4, r3
 800428e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004292:	2200      	movs	r2, #0
 8004294:	673b      	str	r3, [r7, #112]	; 0x70
 8004296:	677a      	str	r2, [r7, #116]	; 0x74
 8004298:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800429c:	4642      	mov	r2, r8
 800429e:	464b      	mov	r3, r9
 80042a0:	1891      	adds	r1, r2, r2
 80042a2:	60b9      	str	r1, [r7, #8]
 80042a4:	415b      	adcs	r3, r3
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042ac:	4641      	mov	r1, r8
 80042ae:	1851      	adds	r1, r2, r1
 80042b0:	6039      	str	r1, [r7, #0]
 80042b2:	4649      	mov	r1, r9
 80042b4:	414b      	adcs	r3, r1
 80042b6:	607b      	str	r3, [r7, #4]
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042c4:	4659      	mov	r1, fp
 80042c6:	00cb      	lsls	r3, r1, #3
 80042c8:	4651      	mov	r1, sl
 80042ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ce:	4651      	mov	r1, sl
 80042d0:	00ca      	lsls	r2, r1, #3
 80042d2:	4610      	mov	r0, r2
 80042d4:	4619      	mov	r1, r3
 80042d6:	4603      	mov	r3, r0
 80042d8:	4642      	mov	r2, r8
 80042da:	189b      	adds	r3, r3, r2
 80042dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80042de:	464b      	mov	r3, r9
 80042e0:	460a      	mov	r2, r1
 80042e2:	eb42 0303 	adc.w	r3, r2, r3
 80042e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	663b      	str	r3, [r7, #96]	; 0x60
 80042f2:	667a      	str	r2, [r7, #100]	; 0x64
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	f04f 0300 	mov.w	r3, #0
 80042fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004300:	4649      	mov	r1, r9
 8004302:	008b      	lsls	r3, r1, #2
 8004304:	4641      	mov	r1, r8
 8004306:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800430a:	4641      	mov	r1, r8
 800430c:	008a      	lsls	r2, r1, #2
 800430e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004312:	f7fb ffbd 	bl	8000290 <__aeabi_uldivmod>
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	4b0d      	ldr	r3, [pc, #52]	; (8004350 <UART_SetConfig+0x4e4>)
 800431c:	fba3 1302 	umull	r1, r3, r3, r2
 8004320:	095b      	lsrs	r3, r3, #5
 8004322:	2164      	movs	r1, #100	; 0x64
 8004324:	fb01 f303 	mul.w	r3, r1, r3
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	011b      	lsls	r3, r3, #4
 800432c:	3332      	adds	r3, #50	; 0x32
 800432e:	4a08      	ldr	r2, [pc, #32]	; (8004350 <UART_SetConfig+0x4e4>)
 8004330:	fba2 2303 	umull	r2, r3, r2, r3
 8004334:	095b      	lsrs	r3, r3, #5
 8004336:	f003 020f 	and.w	r2, r3, #15
 800433a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4422      	add	r2, r4
 8004342:	609a      	str	r2, [r3, #8]
}
 8004344:	bf00      	nop
 8004346:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800434a:	46bd      	mov	sp, r7
 800434c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004350:	51eb851f 	.word	0x51eb851f

08004354 <atoi>:
 8004354:	220a      	movs	r2, #10
 8004356:	2100      	movs	r1, #0
 8004358:	f000 b882 	b.w	8004460 <strtol>

0800435c <_strtol_l.constprop.0>:
 800435c:	2b01      	cmp	r3, #1
 800435e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004362:	d001      	beq.n	8004368 <_strtol_l.constprop.0+0xc>
 8004364:	2b24      	cmp	r3, #36	; 0x24
 8004366:	d906      	bls.n	8004376 <_strtol_l.constprop.0+0x1a>
 8004368:	f000 fada 	bl	8004920 <__errno>
 800436c:	2316      	movs	r3, #22
 800436e:	6003      	str	r3, [r0, #0]
 8004370:	2000      	movs	r0, #0
 8004372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004376:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800445c <_strtol_l.constprop.0+0x100>
 800437a:	460d      	mov	r5, r1
 800437c:	462e      	mov	r6, r5
 800437e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004382:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8004386:	f017 0708 	ands.w	r7, r7, #8
 800438a:	d1f7      	bne.n	800437c <_strtol_l.constprop.0+0x20>
 800438c:	2c2d      	cmp	r4, #45	; 0x2d
 800438e:	d132      	bne.n	80043f6 <_strtol_l.constprop.0+0x9a>
 8004390:	782c      	ldrb	r4, [r5, #0]
 8004392:	2701      	movs	r7, #1
 8004394:	1cb5      	adds	r5, r6, #2
 8004396:	2b00      	cmp	r3, #0
 8004398:	d05b      	beq.n	8004452 <_strtol_l.constprop.0+0xf6>
 800439a:	2b10      	cmp	r3, #16
 800439c:	d109      	bne.n	80043b2 <_strtol_l.constprop.0+0x56>
 800439e:	2c30      	cmp	r4, #48	; 0x30
 80043a0:	d107      	bne.n	80043b2 <_strtol_l.constprop.0+0x56>
 80043a2:	782c      	ldrb	r4, [r5, #0]
 80043a4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80043a8:	2c58      	cmp	r4, #88	; 0x58
 80043aa:	d14d      	bne.n	8004448 <_strtol_l.constprop.0+0xec>
 80043ac:	786c      	ldrb	r4, [r5, #1]
 80043ae:	2310      	movs	r3, #16
 80043b0:	3502      	adds	r5, #2
 80043b2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80043b6:	f108 38ff 	add.w	r8, r8, #4294967295
 80043ba:	f04f 0e00 	mov.w	lr, #0
 80043be:	fbb8 f9f3 	udiv	r9, r8, r3
 80043c2:	4676      	mov	r6, lr
 80043c4:	fb03 8a19 	mls	sl, r3, r9, r8
 80043c8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80043cc:	f1bc 0f09 	cmp.w	ip, #9
 80043d0:	d816      	bhi.n	8004400 <_strtol_l.constprop.0+0xa4>
 80043d2:	4664      	mov	r4, ip
 80043d4:	42a3      	cmp	r3, r4
 80043d6:	dd24      	ble.n	8004422 <_strtol_l.constprop.0+0xc6>
 80043d8:	f1be 3fff 	cmp.w	lr, #4294967295
 80043dc:	d008      	beq.n	80043f0 <_strtol_l.constprop.0+0x94>
 80043de:	45b1      	cmp	r9, r6
 80043e0:	d31c      	bcc.n	800441c <_strtol_l.constprop.0+0xc0>
 80043e2:	d101      	bne.n	80043e8 <_strtol_l.constprop.0+0x8c>
 80043e4:	45a2      	cmp	sl, r4
 80043e6:	db19      	blt.n	800441c <_strtol_l.constprop.0+0xc0>
 80043e8:	fb06 4603 	mla	r6, r6, r3, r4
 80043ec:	f04f 0e01 	mov.w	lr, #1
 80043f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80043f4:	e7e8      	b.n	80043c8 <_strtol_l.constprop.0+0x6c>
 80043f6:	2c2b      	cmp	r4, #43	; 0x2b
 80043f8:	bf04      	itt	eq
 80043fa:	782c      	ldrbeq	r4, [r5, #0]
 80043fc:	1cb5      	addeq	r5, r6, #2
 80043fe:	e7ca      	b.n	8004396 <_strtol_l.constprop.0+0x3a>
 8004400:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004404:	f1bc 0f19 	cmp.w	ip, #25
 8004408:	d801      	bhi.n	800440e <_strtol_l.constprop.0+0xb2>
 800440a:	3c37      	subs	r4, #55	; 0x37
 800440c:	e7e2      	b.n	80043d4 <_strtol_l.constprop.0+0x78>
 800440e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004412:	f1bc 0f19 	cmp.w	ip, #25
 8004416:	d804      	bhi.n	8004422 <_strtol_l.constprop.0+0xc6>
 8004418:	3c57      	subs	r4, #87	; 0x57
 800441a:	e7db      	b.n	80043d4 <_strtol_l.constprop.0+0x78>
 800441c:	f04f 3eff 	mov.w	lr, #4294967295
 8004420:	e7e6      	b.n	80043f0 <_strtol_l.constprop.0+0x94>
 8004422:	f1be 3fff 	cmp.w	lr, #4294967295
 8004426:	d105      	bne.n	8004434 <_strtol_l.constprop.0+0xd8>
 8004428:	2322      	movs	r3, #34	; 0x22
 800442a:	6003      	str	r3, [r0, #0]
 800442c:	4646      	mov	r6, r8
 800442e:	b942      	cbnz	r2, 8004442 <_strtol_l.constprop.0+0xe6>
 8004430:	4630      	mov	r0, r6
 8004432:	e79e      	b.n	8004372 <_strtol_l.constprop.0+0x16>
 8004434:	b107      	cbz	r7, 8004438 <_strtol_l.constprop.0+0xdc>
 8004436:	4276      	negs	r6, r6
 8004438:	2a00      	cmp	r2, #0
 800443a:	d0f9      	beq.n	8004430 <_strtol_l.constprop.0+0xd4>
 800443c:	f1be 0f00 	cmp.w	lr, #0
 8004440:	d000      	beq.n	8004444 <_strtol_l.constprop.0+0xe8>
 8004442:	1e69      	subs	r1, r5, #1
 8004444:	6011      	str	r1, [r2, #0]
 8004446:	e7f3      	b.n	8004430 <_strtol_l.constprop.0+0xd4>
 8004448:	2430      	movs	r4, #48	; 0x30
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1b1      	bne.n	80043b2 <_strtol_l.constprop.0+0x56>
 800444e:	2308      	movs	r3, #8
 8004450:	e7af      	b.n	80043b2 <_strtol_l.constprop.0+0x56>
 8004452:	2c30      	cmp	r4, #48	; 0x30
 8004454:	d0a5      	beq.n	80043a2 <_strtol_l.constprop.0+0x46>
 8004456:	230a      	movs	r3, #10
 8004458:	e7ab      	b.n	80043b2 <_strtol_l.constprop.0+0x56>
 800445a:	bf00      	nop
 800445c:	080054b9 	.word	0x080054b9

08004460 <strtol>:
 8004460:	4613      	mov	r3, r2
 8004462:	460a      	mov	r2, r1
 8004464:	4601      	mov	r1, r0
 8004466:	4802      	ldr	r0, [pc, #8]	; (8004470 <strtol+0x10>)
 8004468:	6800      	ldr	r0, [r0, #0]
 800446a:	f7ff bf77 	b.w	800435c <_strtol_l.constprop.0>
 800446e:	bf00      	nop
 8004470:	20000078 	.word	0x20000078

08004474 <std>:
 8004474:	2300      	movs	r3, #0
 8004476:	b510      	push	{r4, lr}
 8004478:	4604      	mov	r4, r0
 800447a:	e9c0 3300 	strd	r3, r3, [r0]
 800447e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004482:	6083      	str	r3, [r0, #8]
 8004484:	8181      	strh	r1, [r0, #12]
 8004486:	6643      	str	r3, [r0, #100]	; 0x64
 8004488:	81c2      	strh	r2, [r0, #14]
 800448a:	6183      	str	r3, [r0, #24]
 800448c:	4619      	mov	r1, r3
 800448e:	2208      	movs	r2, #8
 8004490:	305c      	adds	r0, #92	; 0x5c
 8004492:	f000 f9e5 	bl	8004860 <memset>
 8004496:	4b05      	ldr	r3, [pc, #20]	; (80044ac <std+0x38>)
 8004498:	6263      	str	r3, [r4, #36]	; 0x24
 800449a:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <std+0x3c>)
 800449c:	62a3      	str	r3, [r4, #40]	; 0x28
 800449e:	4b05      	ldr	r3, [pc, #20]	; (80044b4 <std+0x40>)
 80044a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044a2:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <std+0x44>)
 80044a4:	6224      	str	r4, [r4, #32]
 80044a6:	6323      	str	r3, [r4, #48]	; 0x30
 80044a8:	bd10      	pop	{r4, pc}
 80044aa:	bf00      	nop
 80044ac:	080046b1 	.word	0x080046b1
 80044b0:	080046d3 	.word	0x080046d3
 80044b4:	0800470b 	.word	0x0800470b
 80044b8:	0800472f 	.word	0x0800472f

080044bc <stdio_exit_handler>:
 80044bc:	4a02      	ldr	r2, [pc, #8]	; (80044c8 <stdio_exit_handler+0xc>)
 80044be:	4903      	ldr	r1, [pc, #12]	; (80044cc <stdio_exit_handler+0x10>)
 80044c0:	4803      	ldr	r0, [pc, #12]	; (80044d0 <stdio_exit_handler+0x14>)
 80044c2:	f000 b869 	b.w	8004598 <_fwalk_sglue>
 80044c6:	bf00      	nop
 80044c8:	20000020 	.word	0x20000020
 80044cc:	08005239 	.word	0x08005239
 80044d0:	2000002c 	.word	0x2000002c

080044d4 <cleanup_stdio>:
 80044d4:	6841      	ldr	r1, [r0, #4]
 80044d6:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <cleanup_stdio+0x34>)
 80044d8:	4299      	cmp	r1, r3
 80044da:	b510      	push	{r4, lr}
 80044dc:	4604      	mov	r4, r0
 80044de:	d001      	beq.n	80044e4 <cleanup_stdio+0x10>
 80044e0:	f000 feaa 	bl	8005238 <_fflush_r>
 80044e4:	68a1      	ldr	r1, [r4, #8]
 80044e6:	4b09      	ldr	r3, [pc, #36]	; (800450c <cleanup_stdio+0x38>)
 80044e8:	4299      	cmp	r1, r3
 80044ea:	d002      	beq.n	80044f2 <cleanup_stdio+0x1e>
 80044ec:	4620      	mov	r0, r4
 80044ee:	f000 fea3 	bl	8005238 <_fflush_r>
 80044f2:	68e1      	ldr	r1, [r4, #12]
 80044f4:	4b06      	ldr	r3, [pc, #24]	; (8004510 <cleanup_stdio+0x3c>)
 80044f6:	4299      	cmp	r1, r3
 80044f8:	d004      	beq.n	8004504 <cleanup_stdio+0x30>
 80044fa:	4620      	mov	r0, r4
 80044fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004500:	f000 be9a 	b.w	8005238 <_fflush_r>
 8004504:	bd10      	pop	{r4, pc}
 8004506:	bf00      	nop
 8004508:	2000025c 	.word	0x2000025c
 800450c:	200002c4 	.word	0x200002c4
 8004510:	2000032c 	.word	0x2000032c

08004514 <global_stdio_init.part.0>:
 8004514:	b510      	push	{r4, lr}
 8004516:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <global_stdio_init.part.0+0x30>)
 8004518:	4c0b      	ldr	r4, [pc, #44]	; (8004548 <global_stdio_init.part.0+0x34>)
 800451a:	4a0c      	ldr	r2, [pc, #48]	; (800454c <global_stdio_init.part.0+0x38>)
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	4620      	mov	r0, r4
 8004520:	2200      	movs	r2, #0
 8004522:	2104      	movs	r1, #4
 8004524:	f7ff ffa6 	bl	8004474 <std>
 8004528:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800452c:	2201      	movs	r2, #1
 800452e:	2109      	movs	r1, #9
 8004530:	f7ff ffa0 	bl	8004474 <std>
 8004534:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004538:	2202      	movs	r2, #2
 800453a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800453e:	2112      	movs	r1, #18
 8004540:	f7ff bf98 	b.w	8004474 <std>
 8004544:	20000394 	.word	0x20000394
 8004548:	2000025c 	.word	0x2000025c
 800454c:	080044bd 	.word	0x080044bd

08004550 <__sfp_lock_acquire>:
 8004550:	4801      	ldr	r0, [pc, #4]	; (8004558 <__sfp_lock_acquire+0x8>)
 8004552:	f000 ba0f 	b.w	8004974 <__retarget_lock_acquire_recursive>
 8004556:	bf00      	nop
 8004558:	2000039d 	.word	0x2000039d

0800455c <__sfp_lock_release>:
 800455c:	4801      	ldr	r0, [pc, #4]	; (8004564 <__sfp_lock_release+0x8>)
 800455e:	f000 ba0a 	b.w	8004976 <__retarget_lock_release_recursive>
 8004562:	bf00      	nop
 8004564:	2000039d 	.word	0x2000039d

08004568 <__sinit>:
 8004568:	b510      	push	{r4, lr}
 800456a:	4604      	mov	r4, r0
 800456c:	f7ff fff0 	bl	8004550 <__sfp_lock_acquire>
 8004570:	6a23      	ldr	r3, [r4, #32]
 8004572:	b11b      	cbz	r3, 800457c <__sinit+0x14>
 8004574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004578:	f7ff bff0 	b.w	800455c <__sfp_lock_release>
 800457c:	4b04      	ldr	r3, [pc, #16]	; (8004590 <__sinit+0x28>)
 800457e:	6223      	str	r3, [r4, #32]
 8004580:	4b04      	ldr	r3, [pc, #16]	; (8004594 <__sinit+0x2c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1f5      	bne.n	8004574 <__sinit+0xc>
 8004588:	f7ff ffc4 	bl	8004514 <global_stdio_init.part.0>
 800458c:	e7f2      	b.n	8004574 <__sinit+0xc>
 800458e:	bf00      	nop
 8004590:	080044d5 	.word	0x080044d5
 8004594:	20000394 	.word	0x20000394

08004598 <_fwalk_sglue>:
 8004598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800459c:	4607      	mov	r7, r0
 800459e:	4688      	mov	r8, r1
 80045a0:	4614      	mov	r4, r2
 80045a2:	2600      	movs	r6, #0
 80045a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045a8:	f1b9 0901 	subs.w	r9, r9, #1
 80045ac:	d505      	bpl.n	80045ba <_fwalk_sglue+0x22>
 80045ae:	6824      	ldr	r4, [r4, #0]
 80045b0:	2c00      	cmp	r4, #0
 80045b2:	d1f7      	bne.n	80045a4 <_fwalk_sglue+0xc>
 80045b4:	4630      	mov	r0, r6
 80045b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045ba:	89ab      	ldrh	r3, [r5, #12]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d907      	bls.n	80045d0 <_fwalk_sglue+0x38>
 80045c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80045c4:	3301      	adds	r3, #1
 80045c6:	d003      	beq.n	80045d0 <_fwalk_sglue+0x38>
 80045c8:	4629      	mov	r1, r5
 80045ca:	4638      	mov	r0, r7
 80045cc:	47c0      	blx	r8
 80045ce:	4306      	orrs	r6, r0
 80045d0:	3568      	adds	r5, #104	; 0x68
 80045d2:	e7e9      	b.n	80045a8 <_fwalk_sglue+0x10>

080045d4 <iprintf>:
 80045d4:	b40f      	push	{r0, r1, r2, r3}
 80045d6:	b507      	push	{r0, r1, r2, lr}
 80045d8:	4906      	ldr	r1, [pc, #24]	; (80045f4 <iprintf+0x20>)
 80045da:	ab04      	add	r3, sp, #16
 80045dc:	6808      	ldr	r0, [r1, #0]
 80045de:	f853 2b04 	ldr.w	r2, [r3], #4
 80045e2:	6881      	ldr	r1, [r0, #8]
 80045e4:	9301      	str	r3, [sp, #4]
 80045e6:	f000 faf7 	bl	8004bd8 <_vfiprintf_r>
 80045ea:	b003      	add	sp, #12
 80045ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80045f0:	b004      	add	sp, #16
 80045f2:	4770      	bx	lr
 80045f4:	20000078 	.word	0x20000078

080045f8 <_puts_r>:
 80045f8:	6a03      	ldr	r3, [r0, #32]
 80045fa:	b570      	push	{r4, r5, r6, lr}
 80045fc:	6884      	ldr	r4, [r0, #8]
 80045fe:	4605      	mov	r5, r0
 8004600:	460e      	mov	r6, r1
 8004602:	b90b      	cbnz	r3, 8004608 <_puts_r+0x10>
 8004604:	f7ff ffb0 	bl	8004568 <__sinit>
 8004608:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800460a:	07db      	lsls	r3, r3, #31
 800460c:	d405      	bmi.n	800461a <_puts_r+0x22>
 800460e:	89a3      	ldrh	r3, [r4, #12]
 8004610:	0598      	lsls	r0, r3, #22
 8004612:	d402      	bmi.n	800461a <_puts_r+0x22>
 8004614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004616:	f000 f9ad 	bl	8004974 <__retarget_lock_acquire_recursive>
 800461a:	89a3      	ldrh	r3, [r4, #12]
 800461c:	0719      	lsls	r1, r3, #28
 800461e:	d513      	bpl.n	8004648 <_puts_r+0x50>
 8004620:	6923      	ldr	r3, [r4, #16]
 8004622:	b18b      	cbz	r3, 8004648 <_puts_r+0x50>
 8004624:	3e01      	subs	r6, #1
 8004626:	68a3      	ldr	r3, [r4, #8]
 8004628:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800462c:	3b01      	subs	r3, #1
 800462e:	60a3      	str	r3, [r4, #8]
 8004630:	b9e9      	cbnz	r1, 800466e <_puts_r+0x76>
 8004632:	2b00      	cmp	r3, #0
 8004634:	da2e      	bge.n	8004694 <_puts_r+0x9c>
 8004636:	4622      	mov	r2, r4
 8004638:	210a      	movs	r1, #10
 800463a:	4628      	mov	r0, r5
 800463c:	f000 f87b 	bl	8004736 <__swbuf_r>
 8004640:	3001      	adds	r0, #1
 8004642:	d007      	beq.n	8004654 <_puts_r+0x5c>
 8004644:	250a      	movs	r5, #10
 8004646:	e007      	b.n	8004658 <_puts_r+0x60>
 8004648:	4621      	mov	r1, r4
 800464a:	4628      	mov	r0, r5
 800464c:	f000 f8b0 	bl	80047b0 <__swsetup_r>
 8004650:	2800      	cmp	r0, #0
 8004652:	d0e7      	beq.n	8004624 <_puts_r+0x2c>
 8004654:	f04f 35ff 	mov.w	r5, #4294967295
 8004658:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800465a:	07da      	lsls	r2, r3, #31
 800465c:	d405      	bmi.n	800466a <_puts_r+0x72>
 800465e:	89a3      	ldrh	r3, [r4, #12]
 8004660:	059b      	lsls	r3, r3, #22
 8004662:	d402      	bmi.n	800466a <_puts_r+0x72>
 8004664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004666:	f000 f986 	bl	8004976 <__retarget_lock_release_recursive>
 800466a:	4628      	mov	r0, r5
 800466c:	bd70      	pop	{r4, r5, r6, pc}
 800466e:	2b00      	cmp	r3, #0
 8004670:	da04      	bge.n	800467c <_puts_r+0x84>
 8004672:	69a2      	ldr	r2, [r4, #24]
 8004674:	429a      	cmp	r2, r3
 8004676:	dc06      	bgt.n	8004686 <_puts_r+0x8e>
 8004678:	290a      	cmp	r1, #10
 800467a:	d004      	beq.n	8004686 <_puts_r+0x8e>
 800467c:	6823      	ldr	r3, [r4, #0]
 800467e:	1c5a      	adds	r2, r3, #1
 8004680:	6022      	str	r2, [r4, #0]
 8004682:	7019      	strb	r1, [r3, #0]
 8004684:	e7cf      	b.n	8004626 <_puts_r+0x2e>
 8004686:	4622      	mov	r2, r4
 8004688:	4628      	mov	r0, r5
 800468a:	f000 f854 	bl	8004736 <__swbuf_r>
 800468e:	3001      	adds	r0, #1
 8004690:	d1c9      	bne.n	8004626 <_puts_r+0x2e>
 8004692:	e7df      	b.n	8004654 <_puts_r+0x5c>
 8004694:	6823      	ldr	r3, [r4, #0]
 8004696:	250a      	movs	r5, #10
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	6022      	str	r2, [r4, #0]
 800469c:	701d      	strb	r5, [r3, #0]
 800469e:	e7db      	b.n	8004658 <_puts_r+0x60>

080046a0 <puts>:
 80046a0:	4b02      	ldr	r3, [pc, #8]	; (80046ac <puts+0xc>)
 80046a2:	4601      	mov	r1, r0
 80046a4:	6818      	ldr	r0, [r3, #0]
 80046a6:	f7ff bfa7 	b.w	80045f8 <_puts_r>
 80046aa:	bf00      	nop
 80046ac:	20000078 	.word	0x20000078

080046b0 <__sread>:
 80046b0:	b510      	push	{r4, lr}
 80046b2:	460c      	mov	r4, r1
 80046b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046b8:	f000 f90e 	bl	80048d8 <_read_r>
 80046bc:	2800      	cmp	r0, #0
 80046be:	bfab      	itete	ge
 80046c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80046c2:	89a3      	ldrhlt	r3, [r4, #12]
 80046c4:	181b      	addge	r3, r3, r0
 80046c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80046ca:	bfac      	ite	ge
 80046cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80046ce:	81a3      	strhlt	r3, [r4, #12]
 80046d0:	bd10      	pop	{r4, pc}

080046d2 <__swrite>:
 80046d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046d6:	461f      	mov	r7, r3
 80046d8:	898b      	ldrh	r3, [r1, #12]
 80046da:	05db      	lsls	r3, r3, #23
 80046dc:	4605      	mov	r5, r0
 80046de:	460c      	mov	r4, r1
 80046e0:	4616      	mov	r6, r2
 80046e2:	d505      	bpl.n	80046f0 <__swrite+0x1e>
 80046e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046e8:	2302      	movs	r3, #2
 80046ea:	2200      	movs	r2, #0
 80046ec:	f000 f8e2 	bl	80048b4 <_lseek_r>
 80046f0:	89a3      	ldrh	r3, [r4, #12]
 80046f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046fa:	81a3      	strh	r3, [r4, #12]
 80046fc:	4632      	mov	r2, r6
 80046fe:	463b      	mov	r3, r7
 8004700:	4628      	mov	r0, r5
 8004702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004706:	f000 b8f9 	b.w	80048fc <_write_r>

0800470a <__sseek>:
 800470a:	b510      	push	{r4, lr}
 800470c:	460c      	mov	r4, r1
 800470e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004712:	f000 f8cf 	bl	80048b4 <_lseek_r>
 8004716:	1c43      	adds	r3, r0, #1
 8004718:	89a3      	ldrh	r3, [r4, #12]
 800471a:	bf15      	itete	ne
 800471c:	6560      	strne	r0, [r4, #84]	; 0x54
 800471e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004722:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004726:	81a3      	strheq	r3, [r4, #12]
 8004728:	bf18      	it	ne
 800472a:	81a3      	strhne	r3, [r4, #12]
 800472c:	bd10      	pop	{r4, pc}

0800472e <__sclose>:
 800472e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004732:	f000 b8af 	b.w	8004894 <_close_r>

08004736 <__swbuf_r>:
 8004736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004738:	460e      	mov	r6, r1
 800473a:	4614      	mov	r4, r2
 800473c:	4605      	mov	r5, r0
 800473e:	b118      	cbz	r0, 8004748 <__swbuf_r+0x12>
 8004740:	6a03      	ldr	r3, [r0, #32]
 8004742:	b90b      	cbnz	r3, 8004748 <__swbuf_r+0x12>
 8004744:	f7ff ff10 	bl	8004568 <__sinit>
 8004748:	69a3      	ldr	r3, [r4, #24]
 800474a:	60a3      	str	r3, [r4, #8]
 800474c:	89a3      	ldrh	r3, [r4, #12]
 800474e:	071a      	lsls	r2, r3, #28
 8004750:	d525      	bpl.n	800479e <__swbuf_r+0x68>
 8004752:	6923      	ldr	r3, [r4, #16]
 8004754:	b31b      	cbz	r3, 800479e <__swbuf_r+0x68>
 8004756:	6823      	ldr	r3, [r4, #0]
 8004758:	6922      	ldr	r2, [r4, #16]
 800475a:	1a98      	subs	r0, r3, r2
 800475c:	6963      	ldr	r3, [r4, #20]
 800475e:	b2f6      	uxtb	r6, r6
 8004760:	4283      	cmp	r3, r0
 8004762:	4637      	mov	r7, r6
 8004764:	dc04      	bgt.n	8004770 <__swbuf_r+0x3a>
 8004766:	4621      	mov	r1, r4
 8004768:	4628      	mov	r0, r5
 800476a:	f000 fd65 	bl	8005238 <_fflush_r>
 800476e:	b9e0      	cbnz	r0, 80047aa <__swbuf_r+0x74>
 8004770:	68a3      	ldr	r3, [r4, #8]
 8004772:	3b01      	subs	r3, #1
 8004774:	60a3      	str	r3, [r4, #8]
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	6022      	str	r2, [r4, #0]
 800477c:	701e      	strb	r6, [r3, #0]
 800477e:	6962      	ldr	r2, [r4, #20]
 8004780:	1c43      	adds	r3, r0, #1
 8004782:	429a      	cmp	r2, r3
 8004784:	d004      	beq.n	8004790 <__swbuf_r+0x5a>
 8004786:	89a3      	ldrh	r3, [r4, #12]
 8004788:	07db      	lsls	r3, r3, #31
 800478a:	d506      	bpl.n	800479a <__swbuf_r+0x64>
 800478c:	2e0a      	cmp	r6, #10
 800478e:	d104      	bne.n	800479a <__swbuf_r+0x64>
 8004790:	4621      	mov	r1, r4
 8004792:	4628      	mov	r0, r5
 8004794:	f000 fd50 	bl	8005238 <_fflush_r>
 8004798:	b938      	cbnz	r0, 80047aa <__swbuf_r+0x74>
 800479a:	4638      	mov	r0, r7
 800479c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800479e:	4621      	mov	r1, r4
 80047a0:	4628      	mov	r0, r5
 80047a2:	f000 f805 	bl	80047b0 <__swsetup_r>
 80047a6:	2800      	cmp	r0, #0
 80047a8:	d0d5      	beq.n	8004756 <__swbuf_r+0x20>
 80047aa:	f04f 37ff 	mov.w	r7, #4294967295
 80047ae:	e7f4      	b.n	800479a <__swbuf_r+0x64>

080047b0 <__swsetup_r>:
 80047b0:	b538      	push	{r3, r4, r5, lr}
 80047b2:	4b2a      	ldr	r3, [pc, #168]	; (800485c <__swsetup_r+0xac>)
 80047b4:	4605      	mov	r5, r0
 80047b6:	6818      	ldr	r0, [r3, #0]
 80047b8:	460c      	mov	r4, r1
 80047ba:	b118      	cbz	r0, 80047c4 <__swsetup_r+0x14>
 80047bc:	6a03      	ldr	r3, [r0, #32]
 80047be:	b90b      	cbnz	r3, 80047c4 <__swsetup_r+0x14>
 80047c0:	f7ff fed2 	bl	8004568 <__sinit>
 80047c4:	89a3      	ldrh	r3, [r4, #12]
 80047c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047ca:	0718      	lsls	r0, r3, #28
 80047cc:	d422      	bmi.n	8004814 <__swsetup_r+0x64>
 80047ce:	06d9      	lsls	r1, r3, #27
 80047d0:	d407      	bmi.n	80047e2 <__swsetup_r+0x32>
 80047d2:	2309      	movs	r3, #9
 80047d4:	602b      	str	r3, [r5, #0]
 80047d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80047da:	81a3      	strh	r3, [r4, #12]
 80047dc:	f04f 30ff 	mov.w	r0, #4294967295
 80047e0:	e034      	b.n	800484c <__swsetup_r+0x9c>
 80047e2:	0758      	lsls	r0, r3, #29
 80047e4:	d512      	bpl.n	800480c <__swsetup_r+0x5c>
 80047e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80047e8:	b141      	cbz	r1, 80047fc <__swsetup_r+0x4c>
 80047ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80047ee:	4299      	cmp	r1, r3
 80047f0:	d002      	beq.n	80047f8 <__swsetup_r+0x48>
 80047f2:	4628      	mov	r0, r5
 80047f4:	f000 f8ce 	bl	8004994 <_free_r>
 80047f8:	2300      	movs	r3, #0
 80047fa:	6363      	str	r3, [r4, #52]	; 0x34
 80047fc:	89a3      	ldrh	r3, [r4, #12]
 80047fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004802:	81a3      	strh	r3, [r4, #12]
 8004804:	2300      	movs	r3, #0
 8004806:	6063      	str	r3, [r4, #4]
 8004808:	6923      	ldr	r3, [r4, #16]
 800480a:	6023      	str	r3, [r4, #0]
 800480c:	89a3      	ldrh	r3, [r4, #12]
 800480e:	f043 0308 	orr.w	r3, r3, #8
 8004812:	81a3      	strh	r3, [r4, #12]
 8004814:	6923      	ldr	r3, [r4, #16]
 8004816:	b94b      	cbnz	r3, 800482c <__swsetup_r+0x7c>
 8004818:	89a3      	ldrh	r3, [r4, #12]
 800481a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800481e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004822:	d003      	beq.n	800482c <__swsetup_r+0x7c>
 8004824:	4621      	mov	r1, r4
 8004826:	4628      	mov	r0, r5
 8004828:	f000 fd54 	bl	80052d4 <__smakebuf_r>
 800482c:	89a0      	ldrh	r0, [r4, #12]
 800482e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004832:	f010 0301 	ands.w	r3, r0, #1
 8004836:	d00a      	beq.n	800484e <__swsetup_r+0x9e>
 8004838:	2300      	movs	r3, #0
 800483a:	60a3      	str	r3, [r4, #8]
 800483c:	6963      	ldr	r3, [r4, #20]
 800483e:	425b      	negs	r3, r3
 8004840:	61a3      	str	r3, [r4, #24]
 8004842:	6923      	ldr	r3, [r4, #16]
 8004844:	b943      	cbnz	r3, 8004858 <__swsetup_r+0xa8>
 8004846:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800484a:	d1c4      	bne.n	80047d6 <__swsetup_r+0x26>
 800484c:	bd38      	pop	{r3, r4, r5, pc}
 800484e:	0781      	lsls	r1, r0, #30
 8004850:	bf58      	it	pl
 8004852:	6963      	ldrpl	r3, [r4, #20]
 8004854:	60a3      	str	r3, [r4, #8]
 8004856:	e7f4      	b.n	8004842 <__swsetup_r+0x92>
 8004858:	2000      	movs	r0, #0
 800485a:	e7f7      	b.n	800484c <__swsetup_r+0x9c>
 800485c:	20000078 	.word	0x20000078

08004860 <memset>:
 8004860:	4402      	add	r2, r0
 8004862:	4603      	mov	r3, r0
 8004864:	4293      	cmp	r3, r2
 8004866:	d100      	bne.n	800486a <memset+0xa>
 8004868:	4770      	bx	lr
 800486a:	f803 1b01 	strb.w	r1, [r3], #1
 800486e:	e7f9      	b.n	8004864 <memset+0x4>

08004870 <strncmp>:
 8004870:	b510      	push	{r4, lr}
 8004872:	b16a      	cbz	r2, 8004890 <strncmp+0x20>
 8004874:	3901      	subs	r1, #1
 8004876:	1884      	adds	r4, r0, r2
 8004878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800487c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004880:	429a      	cmp	r2, r3
 8004882:	d103      	bne.n	800488c <strncmp+0x1c>
 8004884:	42a0      	cmp	r0, r4
 8004886:	d001      	beq.n	800488c <strncmp+0x1c>
 8004888:	2a00      	cmp	r2, #0
 800488a:	d1f5      	bne.n	8004878 <strncmp+0x8>
 800488c:	1ad0      	subs	r0, r2, r3
 800488e:	bd10      	pop	{r4, pc}
 8004890:	4610      	mov	r0, r2
 8004892:	e7fc      	b.n	800488e <strncmp+0x1e>

08004894 <_close_r>:
 8004894:	b538      	push	{r3, r4, r5, lr}
 8004896:	4d06      	ldr	r5, [pc, #24]	; (80048b0 <_close_r+0x1c>)
 8004898:	2300      	movs	r3, #0
 800489a:	4604      	mov	r4, r0
 800489c:	4608      	mov	r0, r1
 800489e:	602b      	str	r3, [r5, #0]
 80048a0:	f7fc fc03 	bl	80010aa <_close>
 80048a4:	1c43      	adds	r3, r0, #1
 80048a6:	d102      	bne.n	80048ae <_close_r+0x1a>
 80048a8:	682b      	ldr	r3, [r5, #0]
 80048aa:	b103      	cbz	r3, 80048ae <_close_r+0x1a>
 80048ac:	6023      	str	r3, [r4, #0]
 80048ae:	bd38      	pop	{r3, r4, r5, pc}
 80048b0:	20000398 	.word	0x20000398

080048b4 <_lseek_r>:
 80048b4:	b538      	push	{r3, r4, r5, lr}
 80048b6:	4d07      	ldr	r5, [pc, #28]	; (80048d4 <_lseek_r+0x20>)
 80048b8:	4604      	mov	r4, r0
 80048ba:	4608      	mov	r0, r1
 80048bc:	4611      	mov	r1, r2
 80048be:	2200      	movs	r2, #0
 80048c0:	602a      	str	r2, [r5, #0]
 80048c2:	461a      	mov	r2, r3
 80048c4:	f7fc fc18 	bl	80010f8 <_lseek>
 80048c8:	1c43      	adds	r3, r0, #1
 80048ca:	d102      	bne.n	80048d2 <_lseek_r+0x1e>
 80048cc:	682b      	ldr	r3, [r5, #0]
 80048ce:	b103      	cbz	r3, 80048d2 <_lseek_r+0x1e>
 80048d0:	6023      	str	r3, [r4, #0]
 80048d2:	bd38      	pop	{r3, r4, r5, pc}
 80048d4:	20000398 	.word	0x20000398

080048d8 <_read_r>:
 80048d8:	b538      	push	{r3, r4, r5, lr}
 80048da:	4d07      	ldr	r5, [pc, #28]	; (80048f8 <_read_r+0x20>)
 80048dc:	4604      	mov	r4, r0
 80048de:	4608      	mov	r0, r1
 80048e0:	4611      	mov	r1, r2
 80048e2:	2200      	movs	r2, #0
 80048e4:	602a      	str	r2, [r5, #0]
 80048e6:	461a      	mov	r2, r3
 80048e8:	f7fc fba6 	bl	8001038 <_read>
 80048ec:	1c43      	adds	r3, r0, #1
 80048ee:	d102      	bne.n	80048f6 <_read_r+0x1e>
 80048f0:	682b      	ldr	r3, [r5, #0]
 80048f2:	b103      	cbz	r3, 80048f6 <_read_r+0x1e>
 80048f4:	6023      	str	r3, [r4, #0]
 80048f6:	bd38      	pop	{r3, r4, r5, pc}
 80048f8:	20000398 	.word	0x20000398

080048fc <_write_r>:
 80048fc:	b538      	push	{r3, r4, r5, lr}
 80048fe:	4d07      	ldr	r5, [pc, #28]	; (800491c <_write_r+0x20>)
 8004900:	4604      	mov	r4, r0
 8004902:	4608      	mov	r0, r1
 8004904:	4611      	mov	r1, r2
 8004906:	2200      	movs	r2, #0
 8004908:	602a      	str	r2, [r5, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	f7fc fbb1 	bl	8001072 <_write>
 8004910:	1c43      	adds	r3, r0, #1
 8004912:	d102      	bne.n	800491a <_write_r+0x1e>
 8004914:	682b      	ldr	r3, [r5, #0]
 8004916:	b103      	cbz	r3, 800491a <_write_r+0x1e>
 8004918:	6023      	str	r3, [r4, #0]
 800491a:	bd38      	pop	{r3, r4, r5, pc}
 800491c:	20000398 	.word	0x20000398

08004920 <__errno>:
 8004920:	4b01      	ldr	r3, [pc, #4]	; (8004928 <__errno+0x8>)
 8004922:	6818      	ldr	r0, [r3, #0]
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	20000078 	.word	0x20000078

0800492c <__libc_init_array>:
 800492c:	b570      	push	{r4, r5, r6, lr}
 800492e:	4d0d      	ldr	r5, [pc, #52]	; (8004964 <__libc_init_array+0x38>)
 8004930:	4c0d      	ldr	r4, [pc, #52]	; (8004968 <__libc_init_array+0x3c>)
 8004932:	1b64      	subs	r4, r4, r5
 8004934:	10a4      	asrs	r4, r4, #2
 8004936:	2600      	movs	r6, #0
 8004938:	42a6      	cmp	r6, r4
 800493a:	d109      	bne.n	8004950 <__libc_init_array+0x24>
 800493c:	4d0b      	ldr	r5, [pc, #44]	; (800496c <__libc_init_array+0x40>)
 800493e:	4c0c      	ldr	r4, [pc, #48]	; (8004970 <__libc_init_array+0x44>)
 8004940:	f000 fd36 	bl	80053b0 <_init>
 8004944:	1b64      	subs	r4, r4, r5
 8004946:	10a4      	asrs	r4, r4, #2
 8004948:	2600      	movs	r6, #0
 800494a:	42a6      	cmp	r6, r4
 800494c:	d105      	bne.n	800495a <__libc_init_array+0x2e>
 800494e:	bd70      	pop	{r4, r5, r6, pc}
 8004950:	f855 3b04 	ldr.w	r3, [r5], #4
 8004954:	4798      	blx	r3
 8004956:	3601      	adds	r6, #1
 8004958:	e7ee      	b.n	8004938 <__libc_init_array+0xc>
 800495a:	f855 3b04 	ldr.w	r3, [r5], #4
 800495e:	4798      	blx	r3
 8004960:	3601      	adds	r6, #1
 8004962:	e7f2      	b.n	800494a <__libc_init_array+0x1e>
 8004964:	080055f4 	.word	0x080055f4
 8004968:	080055f4 	.word	0x080055f4
 800496c:	080055f4 	.word	0x080055f4
 8004970:	080055f8 	.word	0x080055f8

08004974 <__retarget_lock_acquire_recursive>:
 8004974:	4770      	bx	lr

08004976 <__retarget_lock_release_recursive>:
 8004976:	4770      	bx	lr

08004978 <memcpy>:
 8004978:	440a      	add	r2, r1
 800497a:	4291      	cmp	r1, r2
 800497c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004980:	d100      	bne.n	8004984 <memcpy+0xc>
 8004982:	4770      	bx	lr
 8004984:	b510      	push	{r4, lr}
 8004986:	f811 4b01 	ldrb.w	r4, [r1], #1
 800498a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800498e:	4291      	cmp	r1, r2
 8004990:	d1f9      	bne.n	8004986 <memcpy+0xe>
 8004992:	bd10      	pop	{r4, pc}

08004994 <_free_r>:
 8004994:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004996:	2900      	cmp	r1, #0
 8004998:	d044      	beq.n	8004a24 <_free_r+0x90>
 800499a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800499e:	9001      	str	r0, [sp, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f1a1 0404 	sub.w	r4, r1, #4
 80049a6:	bfb8      	it	lt
 80049a8:	18e4      	addlt	r4, r4, r3
 80049aa:	f000 f8df 	bl	8004b6c <__malloc_lock>
 80049ae:	4a1e      	ldr	r2, [pc, #120]	; (8004a28 <_free_r+0x94>)
 80049b0:	9801      	ldr	r0, [sp, #4]
 80049b2:	6813      	ldr	r3, [r2, #0]
 80049b4:	b933      	cbnz	r3, 80049c4 <_free_r+0x30>
 80049b6:	6063      	str	r3, [r4, #4]
 80049b8:	6014      	str	r4, [r2, #0]
 80049ba:	b003      	add	sp, #12
 80049bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80049c0:	f000 b8da 	b.w	8004b78 <__malloc_unlock>
 80049c4:	42a3      	cmp	r3, r4
 80049c6:	d908      	bls.n	80049da <_free_r+0x46>
 80049c8:	6825      	ldr	r5, [r4, #0]
 80049ca:	1961      	adds	r1, r4, r5
 80049cc:	428b      	cmp	r3, r1
 80049ce:	bf01      	itttt	eq
 80049d0:	6819      	ldreq	r1, [r3, #0]
 80049d2:	685b      	ldreq	r3, [r3, #4]
 80049d4:	1949      	addeq	r1, r1, r5
 80049d6:	6021      	streq	r1, [r4, #0]
 80049d8:	e7ed      	b.n	80049b6 <_free_r+0x22>
 80049da:	461a      	mov	r2, r3
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	b10b      	cbz	r3, 80049e4 <_free_r+0x50>
 80049e0:	42a3      	cmp	r3, r4
 80049e2:	d9fa      	bls.n	80049da <_free_r+0x46>
 80049e4:	6811      	ldr	r1, [r2, #0]
 80049e6:	1855      	adds	r5, r2, r1
 80049e8:	42a5      	cmp	r5, r4
 80049ea:	d10b      	bne.n	8004a04 <_free_r+0x70>
 80049ec:	6824      	ldr	r4, [r4, #0]
 80049ee:	4421      	add	r1, r4
 80049f0:	1854      	adds	r4, r2, r1
 80049f2:	42a3      	cmp	r3, r4
 80049f4:	6011      	str	r1, [r2, #0]
 80049f6:	d1e0      	bne.n	80049ba <_free_r+0x26>
 80049f8:	681c      	ldr	r4, [r3, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	6053      	str	r3, [r2, #4]
 80049fe:	440c      	add	r4, r1
 8004a00:	6014      	str	r4, [r2, #0]
 8004a02:	e7da      	b.n	80049ba <_free_r+0x26>
 8004a04:	d902      	bls.n	8004a0c <_free_r+0x78>
 8004a06:	230c      	movs	r3, #12
 8004a08:	6003      	str	r3, [r0, #0]
 8004a0a:	e7d6      	b.n	80049ba <_free_r+0x26>
 8004a0c:	6825      	ldr	r5, [r4, #0]
 8004a0e:	1961      	adds	r1, r4, r5
 8004a10:	428b      	cmp	r3, r1
 8004a12:	bf04      	itt	eq
 8004a14:	6819      	ldreq	r1, [r3, #0]
 8004a16:	685b      	ldreq	r3, [r3, #4]
 8004a18:	6063      	str	r3, [r4, #4]
 8004a1a:	bf04      	itt	eq
 8004a1c:	1949      	addeq	r1, r1, r5
 8004a1e:	6021      	streq	r1, [r4, #0]
 8004a20:	6054      	str	r4, [r2, #4]
 8004a22:	e7ca      	b.n	80049ba <_free_r+0x26>
 8004a24:	b003      	add	sp, #12
 8004a26:	bd30      	pop	{r4, r5, pc}
 8004a28:	200003a0 	.word	0x200003a0

08004a2c <sbrk_aligned>:
 8004a2c:	b570      	push	{r4, r5, r6, lr}
 8004a2e:	4e0e      	ldr	r6, [pc, #56]	; (8004a68 <sbrk_aligned+0x3c>)
 8004a30:	460c      	mov	r4, r1
 8004a32:	6831      	ldr	r1, [r6, #0]
 8004a34:	4605      	mov	r5, r0
 8004a36:	b911      	cbnz	r1, 8004a3e <sbrk_aligned+0x12>
 8004a38:	f000 fcaa 	bl	8005390 <_sbrk_r>
 8004a3c:	6030      	str	r0, [r6, #0]
 8004a3e:	4621      	mov	r1, r4
 8004a40:	4628      	mov	r0, r5
 8004a42:	f000 fca5 	bl	8005390 <_sbrk_r>
 8004a46:	1c43      	adds	r3, r0, #1
 8004a48:	d00a      	beq.n	8004a60 <sbrk_aligned+0x34>
 8004a4a:	1cc4      	adds	r4, r0, #3
 8004a4c:	f024 0403 	bic.w	r4, r4, #3
 8004a50:	42a0      	cmp	r0, r4
 8004a52:	d007      	beq.n	8004a64 <sbrk_aligned+0x38>
 8004a54:	1a21      	subs	r1, r4, r0
 8004a56:	4628      	mov	r0, r5
 8004a58:	f000 fc9a 	bl	8005390 <_sbrk_r>
 8004a5c:	3001      	adds	r0, #1
 8004a5e:	d101      	bne.n	8004a64 <sbrk_aligned+0x38>
 8004a60:	f04f 34ff 	mov.w	r4, #4294967295
 8004a64:	4620      	mov	r0, r4
 8004a66:	bd70      	pop	{r4, r5, r6, pc}
 8004a68:	200003a4 	.word	0x200003a4

08004a6c <_malloc_r>:
 8004a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a70:	1ccd      	adds	r5, r1, #3
 8004a72:	f025 0503 	bic.w	r5, r5, #3
 8004a76:	3508      	adds	r5, #8
 8004a78:	2d0c      	cmp	r5, #12
 8004a7a:	bf38      	it	cc
 8004a7c:	250c      	movcc	r5, #12
 8004a7e:	2d00      	cmp	r5, #0
 8004a80:	4607      	mov	r7, r0
 8004a82:	db01      	blt.n	8004a88 <_malloc_r+0x1c>
 8004a84:	42a9      	cmp	r1, r5
 8004a86:	d905      	bls.n	8004a94 <_malloc_r+0x28>
 8004a88:	230c      	movs	r3, #12
 8004a8a:	603b      	str	r3, [r7, #0]
 8004a8c:	2600      	movs	r6, #0
 8004a8e:	4630      	mov	r0, r6
 8004a90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a94:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004b68 <_malloc_r+0xfc>
 8004a98:	f000 f868 	bl	8004b6c <__malloc_lock>
 8004a9c:	f8d8 3000 	ldr.w	r3, [r8]
 8004aa0:	461c      	mov	r4, r3
 8004aa2:	bb5c      	cbnz	r4, 8004afc <_malloc_r+0x90>
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	4638      	mov	r0, r7
 8004aa8:	f7ff ffc0 	bl	8004a2c <sbrk_aligned>
 8004aac:	1c43      	adds	r3, r0, #1
 8004aae:	4604      	mov	r4, r0
 8004ab0:	d155      	bne.n	8004b5e <_malloc_r+0xf2>
 8004ab2:	f8d8 4000 	ldr.w	r4, [r8]
 8004ab6:	4626      	mov	r6, r4
 8004ab8:	2e00      	cmp	r6, #0
 8004aba:	d145      	bne.n	8004b48 <_malloc_r+0xdc>
 8004abc:	2c00      	cmp	r4, #0
 8004abe:	d048      	beq.n	8004b52 <_malloc_r+0xe6>
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	4631      	mov	r1, r6
 8004ac4:	4638      	mov	r0, r7
 8004ac6:	eb04 0903 	add.w	r9, r4, r3
 8004aca:	f000 fc61 	bl	8005390 <_sbrk_r>
 8004ace:	4581      	cmp	r9, r0
 8004ad0:	d13f      	bne.n	8004b52 <_malloc_r+0xe6>
 8004ad2:	6821      	ldr	r1, [r4, #0]
 8004ad4:	1a6d      	subs	r5, r5, r1
 8004ad6:	4629      	mov	r1, r5
 8004ad8:	4638      	mov	r0, r7
 8004ada:	f7ff ffa7 	bl	8004a2c <sbrk_aligned>
 8004ade:	3001      	adds	r0, #1
 8004ae0:	d037      	beq.n	8004b52 <_malloc_r+0xe6>
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	442b      	add	r3, r5
 8004ae6:	6023      	str	r3, [r4, #0]
 8004ae8:	f8d8 3000 	ldr.w	r3, [r8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d038      	beq.n	8004b62 <_malloc_r+0xf6>
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	42a2      	cmp	r2, r4
 8004af4:	d12b      	bne.n	8004b4e <_malloc_r+0xe2>
 8004af6:	2200      	movs	r2, #0
 8004af8:	605a      	str	r2, [r3, #4]
 8004afa:	e00f      	b.n	8004b1c <_malloc_r+0xb0>
 8004afc:	6822      	ldr	r2, [r4, #0]
 8004afe:	1b52      	subs	r2, r2, r5
 8004b00:	d41f      	bmi.n	8004b42 <_malloc_r+0xd6>
 8004b02:	2a0b      	cmp	r2, #11
 8004b04:	d917      	bls.n	8004b36 <_malloc_r+0xca>
 8004b06:	1961      	adds	r1, r4, r5
 8004b08:	42a3      	cmp	r3, r4
 8004b0a:	6025      	str	r5, [r4, #0]
 8004b0c:	bf18      	it	ne
 8004b0e:	6059      	strne	r1, [r3, #4]
 8004b10:	6863      	ldr	r3, [r4, #4]
 8004b12:	bf08      	it	eq
 8004b14:	f8c8 1000 	streq.w	r1, [r8]
 8004b18:	5162      	str	r2, [r4, r5]
 8004b1a:	604b      	str	r3, [r1, #4]
 8004b1c:	4638      	mov	r0, r7
 8004b1e:	f104 060b 	add.w	r6, r4, #11
 8004b22:	f000 f829 	bl	8004b78 <__malloc_unlock>
 8004b26:	f026 0607 	bic.w	r6, r6, #7
 8004b2a:	1d23      	adds	r3, r4, #4
 8004b2c:	1af2      	subs	r2, r6, r3
 8004b2e:	d0ae      	beq.n	8004a8e <_malloc_r+0x22>
 8004b30:	1b9b      	subs	r3, r3, r6
 8004b32:	50a3      	str	r3, [r4, r2]
 8004b34:	e7ab      	b.n	8004a8e <_malloc_r+0x22>
 8004b36:	42a3      	cmp	r3, r4
 8004b38:	6862      	ldr	r2, [r4, #4]
 8004b3a:	d1dd      	bne.n	8004af8 <_malloc_r+0x8c>
 8004b3c:	f8c8 2000 	str.w	r2, [r8]
 8004b40:	e7ec      	b.n	8004b1c <_malloc_r+0xb0>
 8004b42:	4623      	mov	r3, r4
 8004b44:	6864      	ldr	r4, [r4, #4]
 8004b46:	e7ac      	b.n	8004aa2 <_malloc_r+0x36>
 8004b48:	4634      	mov	r4, r6
 8004b4a:	6876      	ldr	r6, [r6, #4]
 8004b4c:	e7b4      	b.n	8004ab8 <_malloc_r+0x4c>
 8004b4e:	4613      	mov	r3, r2
 8004b50:	e7cc      	b.n	8004aec <_malloc_r+0x80>
 8004b52:	230c      	movs	r3, #12
 8004b54:	603b      	str	r3, [r7, #0]
 8004b56:	4638      	mov	r0, r7
 8004b58:	f000 f80e 	bl	8004b78 <__malloc_unlock>
 8004b5c:	e797      	b.n	8004a8e <_malloc_r+0x22>
 8004b5e:	6025      	str	r5, [r4, #0]
 8004b60:	e7dc      	b.n	8004b1c <_malloc_r+0xb0>
 8004b62:	605b      	str	r3, [r3, #4]
 8004b64:	deff      	udf	#255	; 0xff
 8004b66:	bf00      	nop
 8004b68:	200003a0 	.word	0x200003a0

08004b6c <__malloc_lock>:
 8004b6c:	4801      	ldr	r0, [pc, #4]	; (8004b74 <__malloc_lock+0x8>)
 8004b6e:	f7ff bf01 	b.w	8004974 <__retarget_lock_acquire_recursive>
 8004b72:	bf00      	nop
 8004b74:	2000039c 	.word	0x2000039c

08004b78 <__malloc_unlock>:
 8004b78:	4801      	ldr	r0, [pc, #4]	; (8004b80 <__malloc_unlock+0x8>)
 8004b7a:	f7ff befc 	b.w	8004976 <__retarget_lock_release_recursive>
 8004b7e:	bf00      	nop
 8004b80:	2000039c 	.word	0x2000039c

08004b84 <__sfputc_r>:
 8004b84:	6893      	ldr	r3, [r2, #8]
 8004b86:	3b01      	subs	r3, #1
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	b410      	push	{r4}
 8004b8c:	6093      	str	r3, [r2, #8]
 8004b8e:	da08      	bge.n	8004ba2 <__sfputc_r+0x1e>
 8004b90:	6994      	ldr	r4, [r2, #24]
 8004b92:	42a3      	cmp	r3, r4
 8004b94:	db01      	blt.n	8004b9a <__sfputc_r+0x16>
 8004b96:	290a      	cmp	r1, #10
 8004b98:	d103      	bne.n	8004ba2 <__sfputc_r+0x1e>
 8004b9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b9e:	f7ff bdca 	b.w	8004736 <__swbuf_r>
 8004ba2:	6813      	ldr	r3, [r2, #0]
 8004ba4:	1c58      	adds	r0, r3, #1
 8004ba6:	6010      	str	r0, [r2, #0]
 8004ba8:	7019      	strb	r1, [r3, #0]
 8004baa:	4608      	mov	r0, r1
 8004bac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004bb0:	4770      	bx	lr

08004bb2 <__sfputs_r>:
 8004bb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb4:	4606      	mov	r6, r0
 8004bb6:	460f      	mov	r7, r1
 8004bb8:	4614      	mov	r4, r2
 8004bba:	18d5      	adds	r5, r2, r3
 8004bbc:	42ac      	cmp	r4, r5
 8004bbe:	d101      	bne.n	8004bc4 <__sfputs_r+0x12>
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	e007      	b.n	8004bd4 <__sfputs_r+0x22>
 8004bc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bc8:	463a      	mov	r2, r7
 8004bca:	4630      	mov	r0, r6
 8004bcc:	f7ff ffda 	bl	8004b84 <__sfputc_r>
 8004bd0:	1c43      	adds	r3, r0, #1
 8004bd2:	d1f3      	bne.n	8004bbc <__sfputs_r+0xa>
 8004bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004bd8 <_vfiprintf_r>:
 8004bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bdc:	460d      	mov	r5, r1
 8004bde:	b09d      	sub	sp, #116	; 0x74
 8004be0:	4614      	mov	r4, r2
 8004be2:	4698      	mov	r8, r3
 8004be4:	4606      	mov	r6, r0
 8004be6:	b118      	cbz	r0, 8004bf0 <_vfiprintf_r+0x18>
 8004be8:	6a03      	ldr	r3, [r0, #32]
 8004bea:	b90b      	cbnz	r3, 8004bf0 <_vfiprintf_r+0x18>
 8004bec:	f7ff fcbc 	bl	8004568 <__sinit>
 8004bf0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004bf2:	07d9      	lsls	r1, r3, #31
 8004bf4:	d405      	bmi.n	8004c02 <_vfiprintf_r+0x2a>
 8004bf6:	89ab      	ldrh	r3, [r5, #12]
 8004bf8:	059a      	lsls	r2, r3, #22
 8004bfa:	d402      	bmi.n	8004c02 <_vfiprintf_r+0x2a>
 8004bfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004bfe:	f7ff feb9 	bl	8004974 <__retarget_lock_acquire_recursive>
 8004c02:	89ab      	ldrh	r3, [r5, #12]
 8004c04:	071b      	lsls	r3, r3, #28
 8004c06:	d501      	bpl.n	8004c0c <_vfiprintf_r+0x34>
 8004c08:	692b      	ldr	r3, [r5, #16]
 8004c0a:	b99b      	cbnz	r3, 8004c34 <_vfiprintf_r+0x5c>
 8004c0c:	4629      	mov	r1, r5
 8004c0e:	4630      	mov	r0, r6
 8004c10:	f7ff fdce 	bl	80047b0 <__swsetup_r>
 8004c14:	b170      	cbz	r0, 8004c34 <_vfiprintf_r+0x5c>
 8004c16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004c18:	07dc      	lsls	r4, r3, #31
 8004c1a:	d504      	bpl.n	8004c26 <_vfiprintf_r+0x4e>
 8004c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c20:	b01d      	add	sp, #116	; 0x74
 8004c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c26:	89ab      	ldrh	r3, [r5, #12]
 8004c28:	0598      	lsls	r0, r3, #22
 8004c2a:	d4f7      	bmi.n	8004c1c <_vfiprintf_r+0x44>
 8004c2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004c2e:	f7ff fea2 	bl	8004976 <__retarget_lock_release_recursive>
 8004c32:	e7f3      	b.n	8004c1c <_vfiprintf_r+0x44>
 8004c34:	2300      	movs	r3, #0
 8004c36:	9309      	str	r3, [sp, #36]	; 0x24
 8004c38:	2320      	movs	r3, #32
 8004c3a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004c3e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c42:	2330      	movs	r3, #48	; 0x30
 8004c44:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004df8 <_vfiprintf_r+0x220>
 8004c48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004c4c:	f04f 0901 	mov.w	r9, #1
 8004c50:	4623      	mov	r3, r4
 8004c52:	469a      	mov	sl, r3
 8004c54:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c58:	b10a      	cbz	r2, 8004c5e <_vfiprintf_r+0x86>
 8004c5a:	2a25      	cmp	r2, #37	; 0x25
 8004c5c:	d1f9      	bne.n	8004c52 <_vfiprintf_r+0x7a>
 8004c5e:	ebba 0b04 	subs.w	fp, sl, r4
 8004c62:	d00b      	beq.n	8004c7c <_vfiprintf_r+0xa4>
 8004c64:	465b      	mov	r3, fp
 8004c66:	4622      	mov	r2, r4
 8004c68:	4629      	mov	r1, r5
 8004c6a:	4630      	mov	r0, r6
 8004c6c:	f7ff ffa1 	bl	8004bb2 <__sfputs_r>
 8004c70:	3001      	adds	r0, #1
 8004c72:	f000 80a9 	beq.w	8004dc8 <_vfiprintf_r+0x1f0>
 8004c76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004c78:	445a      	add	r2, fp
 8004c7a:	9209      	str	r2, [sp, #36]	; 0x24
 8004c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 80a1 	beq.w	8004dc8 <_vfiprintf_r+0x1f0>
 8004c86:	2300      	movs	r3, #0
 8004c88:	f04f 32ff 	mov.w	r2, #4294967295
 8004c8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c90:	f10a 0a01 	add.w	sl, sl, #1
 8004c94:	9304      	str	r3, [sp, #16]
 8004c96:	9307      	str	r3, [sp, #28]
 8004c98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004c9c:	931a      	str	r3, [sp, #104]	; 0x68
 8004c9e:	4654      	mov	r4, sl
 8004ca0:	2205      	movs	r2, #5
 8004ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ca6:	4854      	ldr	r0, [pc, #336]	; (8004df8 <_vfiprintf_r+0x220>)
 8004ca8:	f7fb faa2 	bl	80001f0 <memchr>
 8004cac:	9a04      	ldr	r2, [sp, #16]
 8004cae:	b9d8      	cbnz	r0, 8004ce8 <_vfiprintf_r+0x110>
 8004cb0:	06d1      	lsls	r1, r2, #27
 8004cb2:	bf44      	itt	mi
 8004cb4:	2320      	movmi	r3, #32
 8004cb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cba:	0713      	lsls	r3, r2, #28
 8004cbc:	bf44      	itt	mi
 8004cbe:	232b      	movmi	r3, #43	; 0x2b
 8004cc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8004cc8:	2b2a      	cmp	r3, #42	; 0x2a
 8004cca:	d015      	beq.n	8004cf8 <_vfiprintf_r+0x120>
 8004ccc:	9a07      	ldr	r2, [sp, #28]
 8004cce:	4654      	mov	r4, sl
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	f04f 0c0a 	mov.w	ip, #10
 8004cd6:	4621      	mov	r1, r4
 8004cd8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cdc:	3b30      	subs	r3, #48	; 0x30
 8004cde:	2b09      	cmp	r3, #9
 8004ce0:	d94d      	bls.n	8004d7e <_vfiprintf_r+0x1a6>
 8004ce2:	b1b0      	cbz	r0, 8004d12 <_vfiprintf_r+0x13a>
 8004ce4:	9207      	str	r2, [sp, #28]
 8004ce6:	e014      	b.n	8004d12 <_vfiprintf_r+0x13a>
 8004ce8:	eba0 0308 	sub.w	r3, r0, r8
 8004cec:	fa09 f303 	lsl.w	r3, r9, r3
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	9304      	str	r3, [sp, #16]
 8004cf4:	46a2      	mov	sl, r4
 8004cf6:	e7d2      	b.n	8004c9e <_vfiprintf_r+0xc6>
 8004cf8:	9b03      	ldr	r3, [sp, #12]
 8004cfa:	1d19      	adds	r1, r3, #4
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	9103      	str	r1, [sp, #12]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	bfbb      	ittet	lt
 8004d04:	425b      	neglt	r3, r3
 8004d06:	f042 0202 	orrlt.w	r2, r2, #2
 8004d0a:	9307      	strge	r3, [sp, #28]
 8004d0c:	9307      	strlt	r3, [sp, #28]
 8004d0e:	bfb8      	it	lt
 8004d10:	9204      	strlt	r2, [sp, #16]
 8004d12:	7823      	ldrb	r3, [r4, #0]
 8004d14:	2b2e      	cmp	r3, #46	; 0x2e
 8004d16:	d10c      	bne.n	8004d32 <_vfiprintf_r+0x15a>
 8004d18:	7863      	ldrb	r3, [r4, #1]
 8004d1a:	2b2a      	cmp	r3, #42	; 0x2a
 8004d1c:	d134      	bne.n	8004d88 <_vfiprintf_r+0x1b0>
 8004d1e:	9b03      	ldr	r3, [sp, #12]
 8004d20:	1d1a      	adds	r2, r3, #4
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	9203      	str	r2, [sp, #12]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	bfb8      	it	lt
 8004d2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004d2e:	3402      	adds	r4, #2
 8004d30:	9305      	str	r3, [sp, #20]
 8004d32:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004e08 <_vfiprintf_r+0x230>
 8004d36:	7821      	ldrb	r1, [r4, #0]
 8004d38:	2203      	movs	r2, #3
 8004d3a:	4650      	mov	r0, sl
 8004d3c:	f7fb fa58 	bl	80001f0 <memchr>
 8004d40:	b138      	cbz	r0, 8004d52 <_vfiprintf_r+0x17a>
 8004d42:	9b04      	ldr	r3, [sp, #16]
 8004d44:	eba0 000a 	sub.w	r0, r0, sl
 8004d48:	2240      	movs	r2, #64	; 0x40
 8004d4a:	4082      	lsls	r2, r0
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	3401      	adds	r4, #1
 8004d50:	9304      	str	r3, [sp, #16]
 8004d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d56:	4829      	ldr	r0, [pc, #164]	; (8004dfc <_vfiprintf_r+0x224>)
 8004d58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004d5c:	2206      	movs	r2, #6
 8004d5e:	f7fb fa47 	bl	80001f0 <memchr>
 8004d62:	2800      	cmp	r0, #0
 8004d64:	d03f      	beq.n	8004de6 <_vfiprintf_r+0x20e>
 8004d66:	4b26      	ldr	r3, [pc, #152]	; (8004e00 <_vfiprintf_r+0x228>)
 8004d68:	bb1b      	cbnz	r3, 8004db2 <_vfiprintf_r+0x1da>
 8004d6a:	9b03      	ldr	r3, [sp, #12]
 8004d6c:	3307      	adds	r3, #7
 8004d6e:	f023 0307 	bic.w	r3, r3, #7
 8004d72:	3308      	adds	r3, #8
 8004d74:	9303      	str	r3, [sp, #12]
 8004d76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d78:	443b      	add	r3, r7
 8004d7a:	9309      	str	r3, [sp, #36]	; 0x24
 8004d7c:	e768      	b.n	8004c50 <_vfiprintf_r+0x78>
 8004d7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004d82:	460c      	mov	r4, r1
 8004d84:	2001      	movs	r0, #1
 8004d86:	e7a6      	b.n	8004cd6 <_vfiprintf_r+0xfe>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	3401      	adds	r4, #1
 8004d8c:	9305      	str	r3, [sp, #20]
 8004d8e:	4619      	mov	r1, r3
 8004d90:	f04f 0c0a 	mov.w	ip, #10
 8004d94:	4620      	mov	r0, r4
 8004d96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d9a:	3a30      	subs	r2, #48	; 0x30
 8004d9c:	2a09      	cmp	r2, #9
 8004d9e:	d903      	bls.n	8004da8 <_vfiprintf_r+0x1d0>
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0c6      	beq.n	8004d32 <_vfiprintf_r+0x15a>
 8004da4:	9105      	str	r1, [sp, #20]
 8004da6:	e7c4      	b.n	8004d32 <_vfiprintf_r+0x15a>
 8004da8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dac:	4604      	mov	r4, r0
 8004dae:	2301      	movs	r3, #1
 8004db0:	e7f0      	b.n	8004d94 <_vfiprintf_r+0x1bc>
 8004db2:	ab03      	add	r3, sp, #12
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	462a      	mov	r2, r5
 8004db8:	4b12      	ldr	r3, [pc, #72]	; (8004e04 <_vfiprintf_r+0x22c>)
 8004dba:	a904      	add	r1, sp, #16
 8004dbc:	4630      	mov	r0, r6
 8004dbe:	f3af 8000 	nop.w
 8004dc2:	4607      	mov	r7, r0
 8004dc4:	1c78      	adds	r0, r7, #1
 8004dc6:	d1d6      	bne.n	8004d76 <_vfiprintf_r+0x19e>
 8004dc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004dca:	07d9      	lsls	r1, r3, #31
 8004dcc:	d405      	bmi.n	8004dda <_vfiprintf_r+0x202>
 8004dce:	89ab      	ldrh	r3, [r5, #12]
 8004dd0:	059a      	lsls	r2, r3, #22
 8004dd2:	d402      	bmi.n	8004dda <_vfiprintf_r+0x202>
 8004dd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004dd6:	f7ff fdce 	bl	8004976 <__retarget_lock_release_recursive>
 8004dda:	89ab      	ldrh	r3, [r5, #12]
 8004ddc:	065b      	lsls	r3, r3, #25
 8004dde:	f53f af1d 	bmi.w	8004c1c <_vfiprintf_r+0x44>
 8004de2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004de4:	e71c      	b.n	8004c20 <_vfiprintf_r+0x48>
 8004de6:	ab03      	add	r3, sp, #12
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	462a      	mov	r2, r5
 8004dec:	4b05      	ldr	r3, [pc, #20]	; (8004e04 <_vfiprintf_r+0x22c>)
 8004dee:	a904      	add	r1, sp, #16
 8004df0:	4630      	mov	r0, r6
 8004df2:	f000 f879 	bl	8004ee8 <_printf_i>
 8004df6:	e7e4      	b.n	8004dc2 <_vfiprintf_r+0x1ea>
 8004df8:	080055b9 	.word	0x080055b9
 8004dfc:	080055c3 	.word	0x080055c3
 8004e00:	00000000 	.word	0x00000000
 8004e04:	08004bb3 	.word	0x08004bb3
 8004e08:	080055bf 	.word	0x080055bf

08004e0c <_printf_common>:
 8004e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e10:	4616      	mov	r6, r2
 8004e12:	4699      	mov	r9, r3
 8004e14:	688a      	ldr	r2, [r1, #8]
 8004e16:	690b      	ldr	r3, [r1, #16]
 8004e18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	bfb8      	it	lt
 8004e20:	4613      	movlt	r3, r2
 8004e22:	6033      	str	r3, [r6, #0]
 8004e24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e28:	4607      	mov	r7, r0
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	b10a      	cbz	r2, 8004e32 <_printf_common+0x26>
 8004e2e:	3301      	adds	r3, #1
 8004e30:	6033      	str	r3, [r6, #0]
 8004e32:	6823      	ldr	r3, [r4, #0]
 8004e34:	0699      	lsls	r1, r3, #26
 8004e36:	bf42      	ittt	mi
 8004e38:	6833      	ldrmi	r3, [r6, #0]
 8004e3a:	3302      	addmi	r3, #2
 8004e3c:	6033      	strmi	r3, [r6, #0]
 8004e3e:	6825      	ldr	r5, [r4, #0]
 8004e40:	f015 0506 	ands.w	r5, r5, #6
 8004e44:	d106      	bne.n	8004e54 <_printf_common+0x48>
 8004e46:	f104 0a19 	add.w	sl, r4, #25
 8004e4a:	68e3      	ldr	r3, [r4, #12]
 8004e4c:	6832      	ldr	r2, [r6, #0]
 8004e4e:	1a9b      	subs	r3, r3, r2
 8004e50:	42ab      	cmp	r3, r5
 8004e52:	dc26      	bgt.n	8004ea2 <_printf_common+0x96>
 8004e54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e58:	1e13      	subs	r3, r2, #0
 8004e5a:	6822      	ldr	r2, [r4, #0]
 8004e5c:	bf18      	it	ne
 8004e5e:	2301      	movne	r3, #1
 8004e60:	0692      	lsls	r2, r2, #26
 8004e62:	d42b      	bmi.n	8004ebc <_printf_common+0xb0>
 8004e64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e68:	4649      	mov	r1, r9
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	47c0      	blx	r8
 8004e6e:	3001      	adds	r0, #1
 8004e70:	d01e      	beq.n	8004eb0 <_printf_common+0xa4>
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	6922      	ldr	r2, [r4, #16]
 8004e76:	f003 0306 	and.w	r3, r3, #6
 8004e7a:	2b04      	cmp	r3, #4
 8004e7c:	bf02      	ittt	eq
 8004e7e:	68e5      	ldreq	r5, [r4, #12]
 8004e80:	6833      	ldreq	r3, [r6, #0]
 8004e82:	1aed      	subeq	r5, r5, r3
 8004e84:	68a3      	ldr	r3, [r4, #8]
 8004e86:	bf0c      	ite	eq
 8004e88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e8c:	2500      	movne	r5, #0
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	bfc4      	itt	gt
 8004e92:	1a9b      	subgt	r3, r3, r2
 8004e94:	18ed      	addgt	r5, r5, r3
 8004e96:	2600      	movs	r6, #0
 8004e98:	341a      	adds	r4, #26
 8004e9a:	42b5      	cmp	r5, r6
 8004e9c:	d11a      	bne.n	8004ed4 <_printf_common+0xc8>
 8004e9e:	2000      	movs	r0, #0
 8004ea0:	e008      	b.n	8004eb4 <_printf_common+0xa8>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	4652      	mov	r2, sl
 8004ea6:	4649      	mov	r1, r9
 8004ea8:	4638      	mov	r0, r7
 8004eaa:	47c0      	blx	r8
 8004eac:	3001      	adds	r0, #1
 8004eae:	d103      	bne.n	8004eb8 <_printf_common+0xac>
 8004eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eb8:	3501      	adds	r5, #1
 8004eba:	e7c6      	b.n	8004e4a <_printf_common+0x3e>
 8004ebc:	18e1      	adds	r1, r4, r3
 8004ebe:	1c5a      	adds	r2, r3, #1
 8004ec0:	2030      	movs	r0, #48	; 0x30
 8004ec2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ec6:	4422      	add	r2, r4
 8004ec8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ecc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ed0:	3302      	adds	r3, #2
 8004ed2:	e7c7      	b.n	8004e64 <_printf_common+0x58>
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	4622      	mov	r2, r4
 8004ed8:	4649      	mov	r1, r9
 8004eda:	4638      	mov	r0, r7
 8004edc:	47c0      	blx	r8
 8004ede:	3001      	adds	r0, #1
 8004ee0:	d0e6      	beq.n	8004eb0 <_printf_common+0xa4>
 8004ee2:	3601      	adds	r6, #1
 8004ee4:	e7d9      	b.n	8004e9a <_printf_common+0x8e>
	...

08004ee8 <_printf_i>:
 8004ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004eec:	7e0f      	ldrb	r7, [r1, #24]
 8004eee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ef0:	2f78      	cmp	r7, #120	; 0x78
 8004ef2:	4691      	mov	r9, r2
 8004ef4:	4680      	mov	r8, r0
 8004ef6:	460c      	mov	r4, r1
 8004ef8:	469a      	mov	sl, r3
 8004efa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004efe:	d807      	bhi.n	8004f10 <_printf_i+0x28>
 8004f00:	2f62      	cmp	r7, #98	; 0x62
 8004f02:	d80a      	bhi.n	8004f1a <_printf_i+0x32>
 8004f04:	2f00      	cmp	r7, #0
 8004f06:	f000 80d4 	beq.w	80050b2 <_printf_i+0x1ca>
 8004f0a:	2f58      	cmp	r7, #88	; 0x58
 8004f0c:	f000 80c0 	beq.w	8005090 <_printf_i+0x1a8>
 8004f10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f18:	e03a      	b.n	8004f90 <_printf_i+0xa8>
 8004f1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f1e:	2b15      	cmp	r3, #21
 8004f20:	d8f6      	bhi.n	8004f10 <_printf_i+0x28>
 8004f22:	a101      	add	r1, pc, #4	; (adr r1, 8004f28 <_printf_i+0x40>)
 8004f24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f28:	08004f81 	.word	0x08004f81
 8004f2c:	08004f95 	.word	0x08004f95
 8004f30:	08004f11 	.word	0x08004f11
 8004f34:	08004f11 	.word	0x08004f11
 8004f38:	08004f11 	.word	0x08004f11
 8004f3c:	08004f11 	.word	0x08004f11
 8004f40:	08004f95 	.word	0x08004f95
 8004f44:	08004f11 	.word	0x08004f11
 8004f48:	08004f11 	.word	0x08004f11
 8004f4c:	08004f11 	.word	0x08004f11
 8004f50:	08004f11 	.word	0x08004f11
 8004f54:	08005099 	.word	0x08005099
 8004f58:	08004fc1 	.word	0x08004fc1
 8004f5c:	08005053 	.word	0x08005053
 8004f60:	08004f11 	.word	0x08004f11
 8004f64:	08004f11 	.word	0x08004f11
 8004f68:	080050bb 	.word	0x080050bb
 8004f6c:	08004f11 	.word	0x08004f11
 8004f70:	08004fc1 	.word	0x08004fc1
 8004f74:	08004f11 	.word	0x08004f11
 8004f78:	08004f11 	.word	0x08004f11
 8004f7c:	0800505b 	.word	0x0800505b
 8004f80:	682b      	ldr	r3, [r5, #0]
 8004f82:	1d1a      	adds	r2, r3, #4
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	602a      	str	r2, [r5, #0]
 8004f88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f90:	2301      	movs	r3, #1
 8004f92:	e09f      	b.n	80050d4 <_printf_i+0x1ec>
 8004f94:	6820      	ldr	r0, [r4, #0]
 8004f96:	682b      	ldr	r3, [r5, #0]
 8004f98:	0607      	lsls	r7, r0, #24
 8004f9a:	f103 0104 	add.w	r1, r3, #4
 8004f9e:	6029      	str	r1, [r5, #0]
 8004fa0:	d501      	bpl.n	8004fa6 <_printf_i+0xbe>
 8004fa2:	681e      	ldr	r6, [r3, #0]
 8004fa4:	e003      	b.n	8004fae <_printf_i+0xc6>
 8004fa6:	0646      	lsls	r6, r0, #25
 8004fa8:	d5fb      	bpl.n	8004fa2 <_printf_i+0xba>
 8004faa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004fae:	2e00      	cmp	r6, #0
 8004fb0:	da03      	bge.n	8004fba <_printf_i+0xd2>
 8004fb2:	232d      	movs	r3, #45	; 0x2d
 8004fb4:	4276      	negs	r6, r6
 8004fb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fba:	485a      	ldr	r0, [pc, #360]	; (8005124 <_printf_i+0x23c>)
 8004fbc:	230a      	movs	r3, #10
 8004fbe:	e012      	b.n	8004fe6 <_printf_i+0xfe>
 8004fc0:	682b      	ldr	r3, [r5, #0]
 8004fc2:	6820      	ldr	r0, [r4, #0]
 8004fc4:	1d19      	adds	r1, r3, #4
 8004fc6:	6029      	str	r1, [r5, #0]
 8004fc8:	0605      	lsls	r5, r0, #24
 8004fca:	d501      	bpl.n	8004fd0 <_printf_i+0xe8>
 8004fcc:	681e      	ldr	r6, [r3, #0]
 8004fce:	e002      	b.n	8004fd6 <_printf_i+0xee>
 8004fd0:	0641      	lsls	r1, r0, #25
 8004fd2:	d5fb      	bpl.n	8004fcc <_printf_i+0xe4>
 8004fd4:	881e      	ldrh	r6, [r3, #0]
 8004fd6:	4853      	ldr	r0, [pc, #332]	; (8005124 <_printf_i+0x23c>)
 8004fd8:	2f6f      	cmp	r7, #111	; 0x6f
 8004fda:	bf0c      	ite	eq
 8004fdc:	2308      	moveq	r3, #8
 8004fde:	230a      	movne	r3, #10
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004fe6:	6865      	ldr	r5, [r4, #4]
 8004fe8:	60a5      	str	r5, [r4, #8]
 8004fea:	2d00      	cmp	r5, #0
 8004fec:	bfa2      	ittt	ge
 8004fee:	6821      	ldrge	r1, [r4, #0]
 8004ff0:	f021 0104 	bicge.w	r1, r1, #4
 8004ff4:	6021      	strge	r1, [r4, #0]
 8004ff6:	b90e      	cbnz	r6, 8004ffc <_printf_i+0x114>
 8004ff8:	2d00      	cmp	r5, #0
 8004ffa:	d04b      	beq.n	8005094 <_printf_i+0x1ac>
 8004ffc:	4615      	mov	r5, r2
 8004ffe:	fbb6 f1f3 	udiv	r1, r6, r3
 8005002:	fb03 6711 	mls	r7, r3, r1, r6
 8005006:	5dc7      	ldrb	r7, [r0, r7]
 8005008:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800500c:	4637      	mov	r7, r6
 800500e:	42bb      	cmp	r3, r7
 8005010:	460e      	mov	r6, r1
 8005012:	d9f4      	bls.n	8004ffe <_printf_i+0x116>
 8005014:	2b08      	cmp	r3, #8
 8005016:	d10b      	bne.n	8005030 <_printf_i+0x148>
 8005018:	6823      	ldr	r3, [r4, #0]
 800501a:	07de      	lsls	r6, r3, #31
 800501c:	d508      	bpl.n	8005030 <_printf_i+0x148>
 800501e:	6923      	ldr	r3, [r4, #16]
 8005020:	6861      	ldr	r1, [r4, #4]
 8005022:	4299      	cmp	r1, r3
 8005024:	bfde      	ittt	le
 8005026:	2330      	movle	r3, #48	; 0x30
 8005028:	f805 3c01 	strble.w	r3, [r5, #-1]
 800502c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005030:	1b52      	subs	r2, r2, r5
 8005032:	6122      	str	r2, [r4, #16]
 8005034:	f8cd a000 	str.w	sl, [sp]
 8005038:	464b      	mov	r3, r9
 800503a:	aa03      	add	r2, sp, #12
 800503c:	4621      	mov	r1, r4
 800503e:	4640      	mov	r0, r8
 8005040:	f7ff fee4 	bl	8004e0c <_printf_common>
 8005044:	3001      	adds	r0, #1
 8005046:	d14a      	bne.n	80050de <_printf_i+0x1f6>
 8005048:	f04f 30ff 	mov.w	r0, #4294967295
 800504c:	b004      	add	sp, #16
 800504e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	f043 0320 	orr.w	r3, r3, #32
 8005058:	6023      	str	r3, [r4, #0]
 800505a:	4833      	ldr	r0, [pc, #204]	; (8005128 <_printf_i+0x240>)
 800505c:	2778      	movs	r7, #120	; 0x78
 800505e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005062:	6823      	ldr	r3, [r4, #0]
 8005064:	6829      	ldr	r1, [r5, #0]
 8005066:	061f      	lsls	r7, r3, #24
 8005068:	f851 6b04 	ldr.w	r6, [r1], #4
 800506c:	d402      	bmi.n	8005074 <_printf_i+0x18c>
 800506e:	065f      	lsls	r7, r3, #25
 8005070:	bf48      	it	mi
 8005072:	b2b6      	uxthmi	r6, r6
 8005074:	07df      	lsls	r7, r3, #31
 8005076:	bf48      	it	mi
 8005078:	f043 0320 	orrmi.w	r3, r3, #32
 800507c:	6029      	str	r1, [r5, #0]
 800507e:	bf48      	it	mi
 8005080:	6023      	strmi	r3, [r4, #0]
 8005082:	b91e      	cbnz	r6, 800508c <_printf_i+0x1a4>
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	f023 0320 	bic.w	r3, r3, #32
 800508a:	6023      	str	r3, [r4, #0]
 800508c:	2310      	movs	r3, #16
 800508e:	e7a7      	b.n	8004fe0 <_printf_i+0xf8>
 8005090:	4824      	ldr	r0, [pc, #144]	; (8005124 <_printf_i+0x23c>)
 8005092:	e7e4      	b.n	800505e <_printf_i+0x176>
 8005094:	4615      	mov	r5, r2
 8005096:	e7bd      	b.n	8005014 <_printf_i+0x12c>
 8005098:	682b      	ldr	r3, [r5, #0]
 800509a:	6826      	ldr	r6, [r4, #0]
 800509c:	6961      	ldr	r1, [r4, #20]
 800509e:	1d18      	adds	r0, r3, #4
 80050a0:	6028      	str	r0, [r5, #0]
 80050a2:	0635      	lsls	r5, r6, #24
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	d501      	bpl.n	80050ac <_printf_i+0x1c4>
 80050a8:	6019      	str	r1, [r3, #0]
 80050aa:	e002      	b.n	80050b2 <_printf_i+0x1ca>
 80050ac:	0670      	lsls	r0, r6, #25
 80050ae:	d5fb      	bpl.n	80050a8 <_printf_i+0x1c0>
 80050b0:	8019      	strh	r1, [r3, #0]
 80050b2:	2300      	movs	r3, #0
 80050b4:	6123      	str	r3, [r4, #16]
 80050b6:	4615      	mov	r5, r2
 80050b8:	e7bc      	b.n	8005034 <_printf_i+0x14c>
 80050ba:	682b      	ldr	r3, [r5, #0]
 80050bc:	1d1a      	adds	r2, r3, #4
 80050be:	602a      	str	r2, [r5, #0]
 80050c0:	681d      	ldr	r5, [r3, #0]
 80050c2:	6862      	ldr	r2, [r4, #4]
 80050c4:	2100      	movs	r1, #0
 80050c6:	4628      	mov	r0, r5
 80050c8:	f7fb f892 	bl	80001f0 <memchr>
 80050cc:	b108      	cbz	r0, 80050d2 <_printf_i+0x1ea>
 80050ce:	1b40      	subs	r0, r0, r5
 80050d0:	6060      	str	r0, [r4, #4]
 80050d2:	6863      	ldr	r3, [r4, #4]
 80050d4:	6123      	str	r3, [r4, #16]
 80050d6:	2300      	movs	r3, #0
 80050d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050dc:	e7aa      	b.n	8005034 <_printf_i+0x14c>
 80050de:	6923      	ldr	r3, [r4, #16]
 80050e0:	462a      	mov	r2, r5
 80050e2:	4649      	mov	r1, r9
 80050e4:	4640      	mov	r0, r8
 80050e6:	47d0      	blx	sl
 80050e8:	3001      	adds	r0, #1
 80050ea:	d0ad      	beq.n	8005048 <_printf_i+0x160>
 80050ec:	6823      	ldr	r3, [r4, #0]
 80050ee:	079b      	lsls	r3, r3, #30
 80050f0:	d413      	bmi.n	800511a <_printf_i+0x232>
 80050f2:	68e0      	ldr	r0, [r4, #12]
 80050f4:	9b03      	ldr	r3, [sp, #12]
 80050f6:	4298      	cmp	r0, r3
 80050f8:	bfb8      	it	lt
 80050fa:	4618      	movlt	r0, r3
 80050fc:	e7a6      	b.n	800504c <_printf_i+0x164>
 80050fe:	2301      	movs	r3, #1
 8005100:	4632      	mov	r2, r6
 8005102:	4649      	mov	r1, r9
 8005104:	4640      	mov	r0, r8
 8005106:	47d0      	blx	sl
 8005108:	3001      	adds	r0, #1
 800510a:	d09d      	beq.n	8005048 <_printf_i+0x160>
 800510c:	3501      	adds	r5, #1
 800510e:	68e3      	ldr	r3, [r4, #12]
 8005110:	9903      	ldr	r1, [sp, #12]
 8005112:	1a5b      	subs	r3, r3, r1
 8005114:	42ab      	cmp	r3, r5
 8005116:	dcf2      	bgt.n	80050fe <_printf_i+0x216>
 8005118:	e7eb      	b.n	80050f2 <_printf_i+0x20a>
 800511a:	2500      	movs	r5, #0
 800511c:	f104 0619 	add.w	r6, r4, #25
 8005120:	e7f5      	b.n	800510e <_printf_i+0x226>
 8005122:	bf00      	nop
 8005124:	080055ca 	.word	0x080055ca
 8005128:	080055db 	.word	0x080055db

0800512c <__sflush_r>:
 800512c:	898a      	ldrh	r2, [r1, #12]
 800512e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005132:	4605      	mov	r5, r0
 8005134:	0710      	lsls	r0, r2, #28
 8005136:	460c      	mov	r4, r1
 8005138:	d458      	bmi.n	80051ec <__sflush_r+0xc0>
 800513a:	684b      	ldr	r3, [r1, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	dc05      	bgt.n	800514c <__sflush_r+0x20>
 8005140:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005142:	2b00      	cmp	r3, #0
 8005144:	dc02      	bgt.n	800514c <__sflush_r+0x20>
 8005146:	2000      	movs	r0, #0
 8005148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800514c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800514e:	2e00      	cmp	r6, #0
 8005150:	d0f9      	beq.n	8005146 <__sflush_r+0x1a>
 8005152:	2300      	movs	r3, #0
 8005154:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005158:	682f      	ldr	r7, [r5, #0]
 800515a:	6a21      	ldr	r1, [r4, #32]
 800515c:	602b      	str	r3, [r5, #0]
 800515e:	d032      	beq.n	80051c6 <__sflush_r+0x9a>
 8005160:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005162:	89a3      	ldrh	r3, [r4, #12]
 8005164:	075a      	lsls	r2, r3, #29
 8005166:	d505      	bpl.n	8005174 <__sflush_r+0x48>
 8005168:	6863      	ldr	r3, [r4, #4]
 800516a:	1ac0      	subs	r0, r0, r3
 800516c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800516e:	b10b      	cbz	r3, 8005174 <__sflush_r+0x48>
 8005170:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005172:	1ac0      	subs	r0, r0, r3
 8005174:	2300      	movs	r3, #0
 8005176:	4602      	mov	r2, r0
 8005178:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800517a:	6a21      	ldr	r1, [r4, #32]
 800517c:	4628      	mov	r0, r5
 800517e:	47b0      	blx	r6
 8005180:	1c43      	adds	r3, r0, #1
 8005182:	89a3      	ldrh	r3, [r4, #12]
 8005184:	d106      	bne.n	8005194 <__sflush_r+0x68>
 8005186:	6829      	ldr	r1, [r5, #0]
 8005188:	291d      	cmp	r1, #29
 800518a:	d82b      	bhi.n	80051e4 <__sflush_r+0xb8>
 800518c:	4a29      	ldr	r2, [pc, #164]	; (8005234 <__sflush_r+0x108>)
 800518e:	410a      	asrs	r2, r1
 8005190:	07d6      	lsls	r6, r2, #31
 8005192:	d427      	bmi.n	80051e4 <__sflush_r+0xb8>
 8005194:	2200      	movs	r2, #0
 8005196:	6062      	str	r2, [r4, #4]
 8005198:	04d9      	lsls	r1, r3, #19
 800519a:	6922      	ldr	r2, [r4, #16]
 800519c:	6022      	str	r2, [r4, #0]
 800519e:	d504      	bpl.n	80051aa <__sflush_r+0x7e>
 80051a0:	1c42      	adds	r2, r0, #1
 80051a2:	d101      	bne.n	80051a8 <__sflush_r+0x7c>
 80051a4:	682b      	ldr	r3, [r5, #0]
 80051a6:	b903      	cbnz	r3, 80051aa <__sflush_r+0x7e>
 80051a8:	6560      	str	r0, [r4, #84]	; 0x54
 80051aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051ac:	602f      	str	r7, [r5, #0]
 80051ae:	2900      	cmp	r1, #0
 80051b0:	d0c9      	beq.n	8005146 <__sflush_r+0x1a>
 80051b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80051b6:	4299      	cmp	r1, r3
 80051b8:	d002      	beq.n	80051c0 <__sflush_r+0x94>
 80051ba:	4628      	mov	r0, r5
 80051bc:	f7ff fbea 	bl	8004994 <_free_r>
 80051c0:	2000      	movs	r0, #0
 80051c2:	6360      	str	r0, [r4, #52]	; 0x34
 80051c4:	e7c0      	b.n	8005148 <__sflush_r+0x1c>
 80051c6:	2301      	movs	r3, #1
 80051c8:	4628      	mov	r0, r5
 80051ca:	47b0      	blx	r6
 80051cc:	1c41      	adds	r1, r0, #1
 80051ce:	d1c8      	bne.n	8005162 <__sflush_r+0x36>
 80051d0:	682b      	ldr	r3, [r5, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0c5      	beq.n	8005162 <__sflush_r+0x36>
 80051d6:	2b1d      	cmp	r3, #29
 80051d8:	d001      	beq.n	80051de <__sflush_r+0xb2>
 80051da:	2b16      	cmp	r3, #22
 80051dc:	d101      	bne.n	80051e2 <__sflush_r+0xb6>
 80051de:	602f      	str	r7, [r5, #0]
 80051e0:	e7b1      	b.n	8005146 <__sflush_r+0x1a>
 80051e2:	89a3      	ldrh	r3, [r4, #12]
 80051e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051e8:	81a3      	strh	r3, [r4, #12]
 80051ea:	e7ad      	b.n	8005148 <__sflush_r+0x1c>
 80051ec:	690f      	ldr	r7, [r1, #16]
 80051ee:	2f00      	cmp	r7, #0
 80051f0:	d0a9      	beq.n	8005146 <__sflush_r+0x1a>
 80051f2:	0793      	lsls	r3, r2, #30
 80051f4:	680e      	ldr	r6, [r1, #0]
 80051f6:	bf08      	it	eq
 80051f8:	694b      	ldreq	r3, [r1, #20]
 80051fa:	600f      	str	r7, [r1, #0]
 80051fc:	bf18      	it	ne
 80051fe:	2300      	movne	r3, #0
 8005200:	eba6 0807 	sub.w	r8, r6, r7
 8005204:	608b      	str	r3, [r1, #8]
 8005206:	f1b8 0f00 	cmp.w	r8, #0
 800520a:	dd9c      	ble.n	8005146 <__sflush_r+0x1a>
 800520c:	6a21      	ldr	r1, [r4, #32]
 800520e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005210:	4643      	mov	r3, r8
 8005212:	463a      	mov	r2, r7
 8005214:	4628      	mov	r0, r5
 8005216:	47b0      	blx	r6
 8005218:	2800      	cmp	r0, #0
 800521a:	dc06      	bgt.n	800522a <__sflush_r+0xfe>
 800521c:	89a3      	ldrh	r3, [r4, #12]
 800521e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005222:	81a3      	strh	r3, [r4, #12]
 8005224:	f04f 30ff 	mov.w	r0, #4294967295
 8005228:	e78e      	b.n	8005148 <__sflush_r+0x1c>
 800522a:	4407      	add	r7, r0
 800522c:	eba8 0800 	sub.w	r8, r8, r0
 8005230:	e7e9      	b.n	8005206 <__sflush_r+0xda>
 8005232:	bf00      	nop
 8005234:	dfbffffe 	.word	0xdfbffffe

08005238 <_fflush_r>:
 8005238:	b538      	push	{r3, r4, r5, lr}
 800523a:	690b      	ldr	r3, [r1, #16]
 800523c:	4605      	mov	r5, r0
 800523e:	460c      	mov	r4, r1
 8005240:	b913      	cbnz	r3, 8005248 <_fflush_r+0x10>
 8005242:	2500      	movs	r5, #0
 8005244:	4628      	mov	r0, r5
 8005246:	bd38      	pop	{r3, r4, r5, pc}
 8005248:	b118      	cbz	r0, 8005252 <_fflush_r+0x1a>
 800524a:	6a03      	ldr	r3, [r0, #32]
 800524c:	b90b      	cbnz	r3, 8005252 <_fflush_r+0x1a>
 800524e:	f7ff f98b 	bl	8004568 <__sinit>
 8005252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d0f3      	beq.n	8005242 <_fflush_r+0xa>
 800525a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800525c:	07d0      	lsls	r0, r2, #31
 800525e:	d404      	bmi.n	800526a <_fflush_r+0x32>
 8005260:	0599      	lsls	r1, r3, #22
 8005262:	d402      	bmi.n	800526a <_fflush_r+0x32>
 8005264:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005266:	f7ff fb85 	bl	8004974 <__retarget_lock_acquire_recursive>
 800526a:	4628      	mov	r0, r5
 800526c:	4621      	mov	r1, r4
 800526e:	f7ff ff5d 	bl	800512c <__sflush_r>
 8005272:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005274:	07da      	lsls	r2, r3, #31
 8005276:	4605      	mov	r5, r0
 8005278:	d4e4      	bmi.n	8005244 <_fflush_r+0xc>
 800527a:	89a3      	ldrh	r3, [r4, #12]
 800527c:	059b      	lsls	r3, r3, #22
 800527e:	d4e1      	bmi.n	8005244 <_fflush_r+0xc>
 8005280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005282:	f7ff fb78 	bl	8004976 <__retarget_lock_release_recursive>
 8005286:	e7dd      	b.n	8005244 <_fflush_r+0xc>

08005288 <__swhatbuf_r>:
 8005288:	b570      	push	{r4, r5, r6, lr}
 800528a:	460c      	mov	r4, r1
 800528c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005290:	2900      	cmp	r1, #0
 8005292:	b096      	sub	sp, #88	; 0x58
 8005294:	4615      	mov	r5, r2
 8005296:	461e      	mov	r6, r3
 8005298:	da0d      	bge.n	80052b6 <__swhatbuf_r+0x2e>
 800529a:	89a3      	ldrh	r3, [r4, #12]
 800529c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80052a0:	f04f 0100 	mov.w	r1, #0
 80052a4:	bf0c      	ite	eq
 80052a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80052aa:	2340      	movne	r3, #64	; 0x40
 80052ac:	2000      	movs	r0, #0
 80052ae:	6031      	str	r1, [r6, #0]
 80052b0:	602b      	str	r3, [r5, #0]
 80052b2:	b016      	add	sp, #88	; 0x58
 80052b4:	bd70      	pop	{r4, r5, r6, pc}
 80052b6:	466a      	mov	r2, sp
 80052b8:	f000 f848 	bl	800534c <_fstat_r>
 80052bc:	2800      	cmp	r0, #0
 80052be:	dbec      	blt.n	800529a <__swhatbuf_r+0x12>
 80052c0:	9901      	ldr	r1, [sp, #4]
 80052c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80052c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80052ca:	4259      	negs	r1, r3
 80052cc:	4159      	adcs	r1, r3
 80052ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052d2:	e7eb      	b.n	80052ac <__swhatbuf_r+0x24>

080052d4 <__smakebuf_r>:
 80052d4:	898b      	ldrh	r3, [r1, #12]
 80052d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80052d8:	079d      	lsls	r5, r3, #30
 80052da:	4606      	mov	r6, r0
 80052dc:	460c      	mov	r4, r1
 80052de:	d507      	bpl.n	80052f0 <__smakebuf_r+0x1c>
 80052e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80052e4:	6023      	str	r3, [r4, #0]
 80052e6:	6123      	str	r3, [r4, #16]
 80052e8:	2301      	movs	r3, #1
 80052ea:	6163      	str	r3, [r4, #20]
 80052ec:	b002      	add	sp, #8
 80052ee:	bd70      	pop	{r4, r5, r6, pc}
 80052f0:	ab01      	add	r3, sp, #4
 80052f2:	466a      	mov	r2, sp
 80052f4:	f7ff ffc8 	bl	8005288 <__swhatbuf_r>
 80052f8:	9900      	ldr	r1, [sp, #0]
 80052fa:	4605      	mov	r5, r0
 80052fc:	4630      	mov	r0, r6
 80052fe:	f7ff fbb5 	bl	8004a6c <_malloc_r>
 8005302:	b948      	cbnz	r0, 8005318 <__smakebuf_r+0x44>
 8005304:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005308:	059a      	lsls	r2, r3, #22
 800530a:	d4ef      	bmi.n	80052ec <__smakebuf_r+0x18>
 800530c:	f023 0303 	bic.w	r3, r3, #3
 8005310:	f043 0302 	orr.w	r3, r3, #2
 8005314:	81a3      	strh	r3, [r4, #12]
 8005316:	e7e3      	b.n	80052e0 <__smakebuf_r+0xc>
 8005318:	89a3      	ldrh	r3, [r4, #12]
 800531a:	6020      	str	r0, [r4, #0]
 800531c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005320:	81a3      	strh	r3, [r4, #12]
 8005322:	9b00      	ldr	r3, [sp, #0]
 8005324:	6163      	str	r3, [r4, #20]
 8005326:	9b01      	ldr	r3, [sp, #4]
 8005328:	6120      	str	r0, [r4, #16]
 800532a:	b15b      	cbz	r3, 8005344 <__smakebuf_r+0x70>
 800532c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005330:	4630      	mov	r0, r6
 8005332:	f000 f81d 	bl	8005370 <_isatty_r>
 8005336:	b128      	cbz	r0, 8005344 <__smakebuf_r+0x70>
 8005338:	89a3      	ldrh	r3, [r4, #12]
 800533a:	f023 0303 	bic.w	r3, r3, #3
 800533e:	f043 0301 	orr.w	r3, r3, #1
 8005342:	81a3      	strh	r3, [r4, #12]
 8005344:	89a3      	ldrh	r3, [r4, #12]
 8005346:	431d      	orrs	r5, r3
 8005348:	81a5      	strh	r5, [r4, #12]
 800534a:	e7cf      	b.n	80052ec <__smakebuf_r+0x18>

0800534c <_fstat_r>:
 800534c:	b538      	push	{r3, r4, r5, lr}
 800534e:	4d07      	ldr	r5, [pc, #28]	; (800536c <_fstat_r+0x20>)
 8005350:	2300      	movs	r3, #0
 8005352:	4604      	mov	r4, r0
 8005354:	4608      	mov	r0, r1
 8005356:	4611      	mov	r1, r2
 8005358:	602b      	str	r3, [r5, #0]
 800535a:	f7fb feb2 	bl	80010c2 <_fstat>
 800535e:	1c43      	adds	r3, r0, #1
 8005360:	d102      	bne.n	8005368 <_fstat_r+0x1c>
 8005362:	682b      	ldr	r3, [r5, #0]
 8005364:	b103      	cbz	r3, 8005368 <_fstat_r+0x1c>
 8005366:	6023      	str	r3, [r4, #0]
 8005368:	bd38      	pop	{r3, r4, r5, pc}
 800536a:	bf00      	nop
 800536c:	20000398 	.word	0x20000398

08005370 <_isatty_r>:
 8005370:	b538      	push	{r3, r4, r5, lr}
 8005372:	4d06      	ldr	r5, [pc, #24]	; (800538c <_isatty_r+0x1c>)
 8005374:	2300      	movs	r3, #0
 8005376:	4604      	mov	r4, r0
 8005378:	4608      	mov	r0, r1
 800537a:	602b      	str	r3, [r5, #0]
 800537c:	f7fb feb1 	bl	80010e2 <_isatty>
 8005380:	1c43      	adds	r3, r0, #1
 8005382:	d102      	bne.n	800538a <_isatty_r+0x1a>
 8005384:	682b      	ldr	r3, [r5, #0]
 8005386:	b103      	cbz	r3, 800538a <_isatty_r+0x1a>
 8005388:	6023      	str	r3, [r4, #0]
 800538a:	bd38      	pop	{r3, r4, r5, pc}
 800538c:	20000398 	.word	0x20000398

08005390 <_sbrk_r>:
 8005390:	b538      	push	{r3, r4, r5, lr}
 8005392:	4d06      	ldr	r5, [pc, #24]	; (80053ac <_sbrk_r+0x1c>)
 8005394:	2300      	movs	r3, #0
 8005396:	4604      	mov	r4, r0
 8005398:	4608      	mov	r0, r1
 800539a:	602b      	str	r3, [r5, #0]
 800539c:	f7fb feba 	bl	8001114 <_sbrk>
 80053a0:	1c43      	adds	r3, r0, #1
 80053a2:	d102      	bne.n	80053aa <_sbrk_r+0x1a>
 80053a4:	682b      	ldr	r3, [r5, #0]
 80053a6:	b103      	cbz	r3, 80053aa <_sbrk_r+0x1a>
 80053a8:	6023      	str	r3, [r4, #0]
 80053aa:	bd38      	pop	{r3, r4, r5, pc}
 80053ac:	20000398 	.word	0x20000398

080053b0 <_init>:
 80053b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b2:	bf00      	nop
 80053b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053b6:	bc08      	pop	{r3}
 80053b8:	469e      	mov	lr, r3
 80053ba:	4770      	bx	lr

080053bc <_fini>:
 80053bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053be:	bf00      	nop
 80053c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053c2:	bc08      	pop	{r3}
 80053c4:	469e      	mov	lr, r3
 80053c6:	4770      	bx	lr
